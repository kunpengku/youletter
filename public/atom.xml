<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>由来</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.youletter.cn/"/>
  <updated>2017-12-14T10:55:17.533Z</updated>
  <id>http://www.youletter.cn/</id>
  
  <author>
    <name>kunpengku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vim查看二进制文件内容</title>
    <link href="http://www.youletter.cn/2017/12/14/vim%E6%9F%A5%E7%9C%8B%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
    <id>http://www.youletter.cn/2017/12/14/vim查看二进制文件内容/</id>
    <published>2017-12-14T10:51:45.000Z</published>
    <updated>2017-12-14T10:55:17.533Z</updated>
    
    <content type="html"><![CDATA[<p>1.用vi 打开文件 </p><p>乱码状态</p><p>2.使用xxd转换为16进制</p><p>:%!xxd</p><p>3.转换16进制回二进制</p><p>:%!xxd -r</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/22281280" target="_blank" rel="external">Mac下有二进制查看/编辑器吗？</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.用vi 打开文件 &lt;/p&gt;
&lt;p&gt;乱码状态&lt;/p&gt;
&lt;p&gt;2.使用xxd转换为16进制&lt;/p&gt;
&lt;p&gt;:%!xxd&lt;/p&gt;
&lt;p&gt;3.转换16进制回二进制&lt;/p&gt;
&lt;p&gt;:%!xxd -r&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/22281280&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac下有二进制查看/编辑器吗？&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://www.youletter.cn/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>ID3 tag version 2.4.0</title>
    <link href="http://www.youletter.cn/2017/12/14/ID3-tag-version-2-4-0/"/>
    <id>http://www.youletter.cn/2017/12/14/ID3-tag-version-2-4-0/</id>
    <published>2017-12-14T07:48:35.000Z</published>
    <updated>2017-12-14T07:58:43.518Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://id3.org/id3v2.4.0-structure" target="_blank" rel="external">id3v2.4.0-structure</a></p><p><a href="https://baike.baidu.com/item/MSB/7147777?fr=aladdin" target="_blank" rel="external">MSB</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://id3.org/id3v2.4.0-structure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;id3v2.4.0-structure&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://baike.baidu.c
      
    
    </summary>
    
    
      <category term="mp3" scheme="http://www.youletter.cn/tags/mp3/"/>
    
  </entry>
  
  <entry>
    <title>Jump Right In</title>
    <link href="http://www.youletter.cn/2017/12/12/Jump-Right-In/"/>
    <id>http://www.youletter.cn/2017/12/12/Jump-Right-In/</id>
    <published>2017-12-12T10:23:50.000Z</published>
    <updated>2017-12-13T09:03:37.118Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" target="_blank" rel="external">Start Developing iOS Apps (Swift)</a></p><p>Developer Mode ,开发模式 ，不需要每次 访问debug 特性 都 输入密码。</p><p>Choose Editor &gt; Canvas, and make sure Show Bounds Rectangles is selected</p><p>因为有些视图是 透明了， 这个设置有助于 了解view的 确切大小。</p><h2 id="Preview-Your-Interface"><a href="#Preview-Your-Interface" class="headerlink" title="Preview Your Interface"></a>Preview Your Interface</h2><h2 id="Adopt-Auto-Layout"><a href="#Adopt-Auto-Layout" class="headerlink" title="Adopt Auto Layout"></a>Adopt Auto Layout</h2><p>//MARK: 是一种 特殊的 注释，  XCode可以利用。</p><h2 id="view-的生命周期"><a href="#view-的生命周期" class="headerlink" title="view 的生命周期"></a><a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" target="_blank" rel="external">view 的生命周期</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/d
      
    
    </summary>
    
    
      <category term="ios" scheme="http://www.youletter.cn/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Swift tour</title>
    <link href="http://www.youletter.cn/2017/12/12/swift-tour/"/>
    <id>http://www.youletter.cn/2017/12/12/swift-tour/</id>
    <published>2017-12-12T01:34:10.000Z</published>
    <updated>2017-12-12T09:25:26.385Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1" target="_blank" rel="external">A Swift Tour</a></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&quot;Hello, world!&quot;)</div></pre></td></tr></table></figure><h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>let定义 常量<br>var定义 变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var myVariable = 42</div><div class="line">myVariable = 50</div><div class="line">let myConstant = 42</div></pre></td></tr></table></figure><h3 id="编译器可以推断-变量的类型。"><a href="#编译器可以推断-变量的类型。" class="headerlink" title="编译器可以推断 变量的类型。"></a>编译器可以推断 变量的类型。</h3><p>但如果 第一个出现变量时，没有初始时，可以显示的 给 变量 定义 类型， 在变量后面 写明类型，用一个冒号分开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let implicitInteger = 70</div><div class="line">let implicitDouble = 70.0</div><div class="line">let explicitDouble: Double = 70</div></pre></td></tr></table></figure><h2 id="明确的类型转换"><a href="#明确的类型转换" class="headerlink" title="明确的类型转换"></a>明确的类型转换</h2><p>如果一个类型 需要 转换成另一种类型，必须  显示的说明， 不能 隐式的转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let label = &quot;The width is &quot;</div><div class="line">let width = 94</div><div class="line">let widthLabel = label + String(width)</div></pre></td></tr></table></figure><h2 id="将值-拼接到-字符串中"><a href="#将值-拼接到-字符串中" class="headerlink" title="将值 拼接到 字符串中"></a>将值 拼接到 字符串中</h2><p>使用 括号将值括起来，在前面加一个反斜杠 <code>\()</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let apples = 3</div><div class="line">let oranges = 5</div><div class="line">let appleSummary = &quot;I have \(apples) apples.&quot;</div><div class="line">let fruitSummary = &quot;I have \(apples + oranges) pieces of fruit.&quot;</div></pre></td></tr></table></figure><h2 id="多行字符串-，用三个双引号。"><a href="#多行字符串-，用三个双引号。" class="headerlink" title="多行字符串 ，用三个双引号。"></a>多行字符串 ，用三个双引号。</h2><p>同Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let quotation = &quot;&quot;&quot;</div><div class="line">I said &quot;I have \(apples) apples.&quot;</div><div class="line">And then I said &quot;I have \(apples + oranges) pieces of fruit.&quot;</div><div class="line">&quot;&quot;&quot;</div></pre></td></tr></table></figure><h2 id="数组-，字典"><a href="#数组-，字典" class="headerlink" title="数组 ，字典"></a>数组 ，字典</h2><p>使用方括号<code>[]</code>来 创建数组和字典 ，用index或者 key来访问。<br>最后一个元素后面，允许跟一个 逗号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var shoppingList = [&quot;catfish&quot;, &quot;water&quot;, &quot;tulips&quot;, &quot;blue paint&quot;,]</div><div class="line">shoppingList[1] = &quot;bottle of water&quot;</div><div class="line"></div><div class="line">var occupations = [</div><div class="line">    &quot;Malcolm&quot;: &quot;Captain&quot;,</div><div class="line">    &quot;Kaylee&quot;: &quot;Mechanic&quot;,</div><div class="line">]</div><div class="line">occupations[&quot;Jayne&quot;] = &quot;Public Relations&quot;</div></pre></td></tr></table></figure><h2 id="创建一个空的数组-，或者-字典"><a href="#创建一个空的数组-，或者-字典" class="headerlink" title="创建一个空的数组 ，或者 字典"></a>创建一个空的数组 ，或者 字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var emptyArray = [String]()</div><div class="line">var emptyDictionary = [String: Float]()</div><div class="line"></div><div class="line">emptyArray.append(&quot;123&quot;)</div><div class="line"></div><div class="line">print(emptyArray)</div><div class="line"></div><div class="line">emptyDictionary[&quot;123&quot;] = 1.2</div><div class="line"></div><div class="line">print(emptyDictionary)</div></pre></td></tr></table></figure><p>如果 希望 编译器 通过 值来 自己 判断类型，也可以用下面的 方式 初始化 空的 数组或者 字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shoppingList = []</div><div class="line">occupations = [:]</div></pre></td></tr></table></figure><a id="more"></a><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>使用if 和 switch 进行 条件选择<br>使用 for-in, while, 或 repeat-while 进行循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let individualScores = [75, 43, 103, 87, 12]</div><div class="line">var teamScore = 0</div><div class="line">for score in individualScores &#123;</div><div class="line">    if score &gt; 50 &#123;</div><div class="line">        teamScore += 3</div><div class="line">    &#125; else &#123;</div><div class="line">        teamScore += 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">print(teamScore)</div></pre></td></tr></table></figure><p>条件周围的 圆括号是 可选的， 循环体的 大括号是必选的。</p><p>if 条件必须是 boolean表达式。</p><p>if score { … } 这种写法是错误的。</p><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p>如果一个变量 可能是 nil ，那么在声明这个变量时，需要在 类型后面 写一个 ？。<br>言外之意是，如果普通定义的变量 不能是 nil。 否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var optionalString: String? = &quot;Hello&quot;</div><div class="line">print(optionalString == nil)</div><div class="line"> </div><div class="line">var optionalName: String? = &quot;John Appleseed&quot;</div><div class="line">var greeting = &quot;Hello!&quot;</div><div class="line">if let name = optionalName &#123;</div><div class="line">    greeting = &quot;Hello, \(name)&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="??"></a>??</h2><p>两个冒号，表示 默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let nickName: String? = nil</div><div class="line">let fullName: String = &quot;John Appleseed&quot;</div><div class="line">let informalGreeting = &quot;Hi \(nickName ?? fullName)&quot;</div></pre></td></tr></table></figure><p>if 和 let连用。</p><h2 id="强大的switch"><a href="#强大的switch" class="headerlink" title="强大的switch"></a>强大的switch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let vegetable = &quot;red pepper&quot;</div><div class="line">switch vegetable &#123;</div><div class="line">case &quot;celery&quot;:</div><div class="line">    print(&quot;Add some raisins and make ants on a log.&quot;)</div><div class="line">case &quot;cucumber&quot;, &quot;watercress&quot;:</div><div class="line">    print(&quot;That would make a good tea sandwich.&quot;)</div><div class="line">case let x where x.hasSuffix(&quot;pepper&quot;):</div><div class="line">    print(&quot;Is it a spicy \(x)?&quot;)</div><div class="line">default:</div><div class="line">    print(&quot;Everything tastes good in soup.&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不需要break语句， 执行完case后，会自动退出。</p><h2 id="循环遍历-字典-和-数组"><a href="#循环遍历-字典-和-数组" class="headerlink" title="循环遍历 字典 和 数组"></a>循环遍历 字典 和 数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let interestingNumbers = [</div><div class="line">    &quot;Prime&quot;: [2, 3, 5, 7, 11, 13],</div><div class="line">    &quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8],</div><div class="line">    &quot;Square&quot;: [1, 4, 9, 16, 25],</div><div class="line">]</div><div class="line">var largest = 0</div><div class="line">for (kind, numbers) in interestingNumbers &#123;</div><div class="line">    print(kind,numbers)</div><div class="line">    for number in numbers &#123;</div><div class="line">        print(number)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="while-和-repeat-while"><a href="#while-和-repeat-while" class="headerlink" title="while 和 repeat,while"></a>while 和 repeat,while</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var n = 2</div><div class="line">while n &lt; 100 &#123;</div><div class="line">    n *= 2</div><div class="line">&#125;</div><div class="line">print(n)</div><div class="line"> </div><div class="line">var m = 2</div><div class="line">repeat &#123;</div><div class="line">    m *= 2</div><div class="line">&#125; while m &lt; 100</div><div class="line">print(m)</div></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var total = 0</div><div class="line">for i in 0...4 &#123;</div><div class="line">    print(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><p>注意 <code>...</code> 变成 <code>..&lt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var total = 0</div><div class="line">for i in 0..&lt;4 &#123;</div><div class="line">    print(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(person: String, day: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello \(person), today is \(day)."</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> s = greet(person: <span class="string">"Bob"</span>, day: <span class="string">"Tuesday"</span>)</div><div class="line"><span class="built_in">print</span>(s)</div></pre></td></tr></table></figure><p>使用func声明函数，  -&gt; 后面是返回的类型。</p><p>调用函数时， 需要使用参数标签，  如果不想使用参数 ，可以在参数前 增加 _<br>或者 给参数起一个别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func greet(_ person: String, on day: String) -&gt; String &#123;</div><div class="line">    return &quot;Hello \(person), today is \(day).&quot;</div><div class="line">&#125;</div><div class="line">var s = greet(&quot;Bob&quot;, on: &quot;Tuesday&quot;)</div><div class="line">print(s)</div></pre></td></tr></table></figure><p>这个例子中， person这个参数 省略了， 用on来 作为today的标签。</p><p>下面这个例子 ，一个函数，返回了多个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">func calculateStatistics(scores: [Int]) -&gt; (min: Int, max: Int, sum: Int) &#123;</div><div class="line">    var min = scores[0]</div><div class="line">    var max = scores[0]</div><div class="line">    var sum = 0</div><div class="line">    </div><div class="line">    for score in scores &#123;</div><div class="line">        if score &gt; max &#123;</div><div class="line">            max = score</div><div class="line">        &#125; else if score &lt; min &#123;</div><div class="line">            min = score</div><div class="line">        &#125;</div><div class="line">        sum += score</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return (min, max, sum)</div><div class="line">&#125;</div><div class="line">let statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])</div><div class="line">print(statistics.sum)</div><div class="line">print(statistics.2)</div><div class="line"></div><div class="line">print(statistics)</div></pre></td></tr></table></figure><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>函数中可以  再定义函数 ，内存函数可以 使用外层函数的 变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func returnFifteen() -&gt; Int &#123;</div><div class="line">    var y = 10</div><div class="line">    func add() &#123;</div><div class="line">        y += 5</div><div class="line">    &#125;</div><div class="line">    add()</div><div class="line">    return y</div><div class="line">&#125;</div><div class="line">returnFifteen()</div></pre></td></tr></table></figure><h2 id="返回一个函数"><a href="#返回一个函数" class="headerlink" title="返回一个函数"></a>返回一个函数</h2><p>函数是头等类型， 所以可以返回一个 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func makeIncrementer() -&gt; ((Int) -&gt; Int) &#123;</div><div class="line">    func addOne(number: Int) -&gt; Int &#123;</div><div class="line">        return 1 + number</div><div class="line">    &#125;</div><div class="line">    return addOne</div><div class="line">&#125;</div><div class="line">var increment = makeIncrementer()</div><div class="line">increment(7)</div></pre></td></tr></table></figure><h2 id="函数可以作为-参数-传入"><a href="#函数可以作为-参数-传入" class="headerlink" title="函数可以作为 参数 传入"></a>函数可以作为 参数 传入</h2><p>这一点和  C语言很像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func hasAnyMatches(list: [Int], condition: (Int) -&gt; Bool) -&gt; Bool &#123;</div><div class="line">    for item in list &#123;</div><div class="line">        if condition(item) &#123;</div><div class="line">            return true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false</div><div class="line">&#125;</div><div class="line">func lessThanTen(number: Int) -&gt; Bool &#123;</div><div class="line">    return number &lt; 10</div><div class="line">&#125;</div><div class="line">var numbers = [20, 19, 7, 12]</div><div class="line">hasAnyMatches(list: numbers, condition: lessThanTen)</div></pre></td></tr></table></figure><h2 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h2><p>函数时 closure 的一种 特例。</p><p>closure 就是 可以在 别处 调用的 代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">numbers.map(&#123; (number: Int) -&gt; Int in</div><div class="line">    let result = 3 * number</div><div class="line">    return result</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>closure 用 in 来 分开 参数 ，返回类型 和 函数体</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>声明 属性</p><p>声明 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Shape &#123;</div><div class="line">    var numberOfSides = 0</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实例化 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var shape = Shape()</div></pre></td></tr></table></figure><p>访问实例的属性 和 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shape.numberOfSides = 7</div><div class="line">var shapeDescription = shape.simpleDescription()</div></pre></td></tr></table></figure><p>类的构造函数 init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class NamedShape &#123;</div><div class="line">    var numberOfSides: Int = 0</div><div class="line">    var name: String</div><div class="line">    </div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所有的属性 都需要 赋值。</p><p><code>deinit</code> 来定义 析构函数</p><p>子类 ，用冒号 ，后面跟上 superclass</p><p>子类中 用 override 可以重写 相同的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Square: NamedShape &#123;</div><div class="line">    var sideLength: Double</div><div class="line">    </div><div class="line">    init(sideLength: Double, name: String) &#123;</div><div class="line">        self.sideLength = sideLength</div><div class="line">        super.init(name: name)</div><div class="line">        numberOfSides = 4</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func area() -&gt; Double &#123;</div><div class="line">        return sideLength * sideLength</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    override func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A square with sides of length \(sideLength).&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let test = Square(sideLength: 5.2, name: &quot;my test square&quot;)</div><div class="line">test.area()</div><div class="line">test.simpleDescription()</div></pre></td></tr></table></figure><h2 id="类中的setter-getter"><a href="#类中的setter-getter" class="headerlink" title="类中的setter / getter"></a>类中的setter / getter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class NamedShape &#123;</div><div class="line">    var numberOfSides: Int = 0</div><div class="line">    var name: String</div><div class="line">    </div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EquilateralTriangle: NamedShape &#123;</div><div class="line">    var sideLength: Double = 0.0</div><div class="line">    </div><div class="line">    init(sideLength: Double, name: String) &#123;</div><div class="line">        self.sideLength = sideLength</div><div class="line">        super.init(name: name)</div><div class="line">        numberOfSides = 3</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var perimeter: Double &#123;</div><div class="line">        get &#123;</div><div class="line">            return 3.0 * sideLength</div><div class="line">        &#125;</div><div class="line">        set(newValue)&#123;</div><div class="line">            sideLength = newValue / 3.0</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    override func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;An equilateral triangle with sides of length \(sideLength).&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var triangle = EquilateralTriangle(sideLength: 3.1, name: &quot;a triangle&quot;)</div><div class="line">print(triangle.perimeter)</div><div class="line">triangle.perimeter = 9.9</div><div class="line">print(triangle.sideLength)</div></pre></td></tr></table></figure><p>枚举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">enum Rank: Int &#123;</div><div class="line">    case ace = 1</div><div class="line">    case two, three, four, five, six, seven, eight, nine, ten</div><div class="line">    case jack, queen, king</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .ace:</div><div class="line">            return &quot;ace&quot;</div><div class="line">        case .jack:</div><div class="line">            return &quot;jack&quot;</div><div class="line">        case .queen:</div><div class="line">            return &quot;queen&quot;</div><div class="line">        case .king:</div><div class="line">            return &quot;king&quot;</div><div class="line">        default:</div><div class="line">            return String(self.rawValue)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let ace = Rank.ace</div><div class="line">let aceRawValue = ace.rawValue</div></pre></td></tr></table></figure><p>用rawValue 实例化 Enum</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if let convertedRank = Rank(rawValue: 3) &#123;</div><div class="line">    let threeDescription = convertedRank.simpleDescription()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>枚举 example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">enum Suit &#123;</div><div class="line">    case spades, hearts, diamonds, clubs</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .spades:</div><div class="line">            return &quot;spades&quot;</div><div class="line">        case .hearts:</div><div class="line">            return &quot;hearts&quot;</div><div class="line">        case .diamonds:</div><div class="line">            return &quot;diamonds&quot;</div><div class="line">        case .clubs:</div><div class="line">            return &quot;clubs&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func color() -&gt; String&#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .spades, .diamonds:</div><div class="line">            return &quot;black&quot;</div><div class="line">        case .hearts, .clubs:</div><div class="line">            return &quot;red&quot;</div><div class="line">        default:</div><div class="line">            return &quot;error&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let hearts = Suit.hearts</div><div class="line">let heartsDescription = hearts.simpleDescription()</div><div class="line"></div><div class="line">print(hearts.color())</div></pre></td></tr></table></figure><h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><p>结构和 class 类似 ，结构在 传递的时候 用的是复制， class 传的是 引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Card &#123;</div><div class="line">    var rank: Rank</div><div class="line">    var suit: Suit</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;The \(rank.simpleDescription()) of \(suit.simpleDescription())&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let threeOfSpades = Card(rank: .three, suit: .spades)</div><div class="line">let threeOfSpadesDescription = threeOfSpades.simpleDescription()</div></pre></td></tr></table></figure><h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><p>类似 java中的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">protocol ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String &#123; get &#125;</div><div class="line">    mutating func adjust()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class SimpleClass: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String = &quot;A very simple class.&quot;</div><div class="line">    var anotherProperty: Int = 69105</div><div class="line">    func adjust() &#123;</div><div class="line">        simpleDescription += &quot;  Now 100% adjusted.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var a = SimpleClass()</div><div class="line">a.adjust()</div><div class="line">let aDescription = a.simpleDescription</div><div class="line"> </div><div class="line">struct SimpleStructure: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String = &quot;A simple structure&quot;</div><div class="line">    mutating func adjust() &#123;</div><div class="line">        simpleDescription += &quot; (adjusted)&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = SimpleStructure()</div><div class="line">b.adjust()</div><div class="line">let bDescription = b.simpleDescription</div></pre></td></tr></table></figure><h2 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h2><p>扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">extension Int: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String &#123;</div><div class="line">        return &quot;The number \(self)&quot;</div><div class="line">    &#125;</div><div class="line">    mutating func adjust() &#123;</div><div class="line">        self += 42</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">print(7.simpleDescription)</div></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>用enum 实现 Error protocol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">enum PrinterError: Error &#123;</div><div class="line">    case outOfPaper</div><div class="line">    case noToner</div><div class="line">    case onFire</div><div class="line">&#125;</div><div class="line"></div><div class="line">func send(job: Int, toPrinter printerName: String) throws -&gt; String &#123;</div><div class="line">    if printerName == &quot;Never Has Toner&quot; &#123;</div><div class="line">        throw PrinterError.noToner</div><div class="line">    &#125;</div><div class="line">    return &quot;Job sent&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>处理异常 do catch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">do &#123;</div><div class="line">    let printerResponse = try send(job: 1040, toPrinter: &quot;Bi Sheng&quot;)</div><div class="line">    print(printerResponse)</div><div class="line">&#125; catch &#123;</div><div class="line">    print(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>defer 相当于 finally</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var fridgeIsOpen = false</div><div class="line">let fridgeContent = [&quot;milk&quot;, &quot;eggs&quot;, &quot;leftovers&quot;]</div><div class="line"> </div><div class="line">func fridgeContains(_ food: String) -&gt; Bool &#123;</div><div class="line">    fridgeIsOpen = true</div><div class="line">    defer &#123;</div><div class="line">        fridgeIsOpen = false</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    let result = fridgeContent.contains(food)</div><div class="line">    return result</div><div class="line">&#125;</div><div class="line">fridgeContains(&quot;banana&quot;)</div><div class="line">print(fridgeIsOpen)</div></pre></td></tr></table></figure><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>泛型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func makeArray&lt;Item&gt;(repeating item: Item, numberOfTimes: Int) -&gt; [Item] &#123;</div><div class="line">    var result = [Item]()</div><div class="line">    for _ in 0..&lt;numberOfTimes &#123;</div><div class="line">        result.append(item)</div><div class="line">    &#125;</div><div class="line">    return result</div><div class="line">&#125;</div><div class="line">makeArray(repeating: &quot;knock&quot;, numberOfTimes: 4)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Swift Tour&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;print(&amp;quot;Hello, world!&amp;quot;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简单值&quot;&gt;&lt;a href=&quot;#简单值&quot; class=&quot;headerlink&quot; title=&quot;简单值&quot;&gt;&lt;/a&gt;简单值&lt;/h2&gt;&lt;p&gt;let定义 常量&lt;br&gt;var定义 变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var myVariable = 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myVariable = 50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let myConstant = 42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译器可以推断-变量的类型。&quot;&gt;&lt;a href=&quot;#编译器可以推断-变量的类型。&quot; class=&quot;headerlink&quot; title=&quot;编译器可以推断 变量的类型。&quot;&gt;&lt;/a&gt;编译器可以推断 变量的类型。&lt;/h3&gt;&lt;p&gt;但如果 第一个出现变量时，没有初始时，可以显示的 给 变量 定义 类型， 在变量后面 写明类型，用一个冒号分开。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let implicitInteger = 70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let implicitDouble = 70.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let explicitDouble: Double = 70&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;明确的类型转换&quot;&gt;&lt;a href=&quot;#明确的类型转换&quot; class=&quot;headerlink&quot; title=&quot;明确的类型转换&quot;&gt;&lt;/a&gt;明确的类型转换&lt;/h2&gt;&lt;p&gt;如果一个类型 需要 转换成另一种类型，必须  显示的说明， 不能 隐式的转化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let label = &amp;quot;The width is &amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let width = 94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let widthLabel = label + String(width)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;将值-拼接到-字符串中&quot;&gt;&lt;a href=&quot;#将值-拼接到-字符串中&quot; class=&quot;headerlink&quot; title=&quot;将值 拼接到 字符串中&quot;&gt;&lt;/a&gt;将值 拼接到 字符串中&lt;/h2&gt;&lt;p&gt;使用 括号将值括起来，在前面加一个反斜杠 &lt;code&gt;\()&lt;/code&gt;  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let apples = 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let oranges = 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let appleSummary = &amp;quot;I have \(apples) apples.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let fruitSummary = &amp;quot;I have \(apples + oranges) pieces of fruit.&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;多行字符串-，用三个双引号。&quot;&gt;&lt;a href=&quot;#多行字符串-，用三个双引号。&quot; class=&quot;headerlink&quot; title=&quot;多行字符串 ，用三个双引号。&quot;&gt;&lt;/a&gt;多行字符串 ，用三个双引号。&lt;/h2&gt;&lt;p&gt;同Python&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let quotation = &amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I said &amp;quot;I have \(apples) apples.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;And then I said &amp;quot;I have \(apples + oranges) pieces of fruit.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组-，字典&quot;&gt;&lt;a href=&quot;#数组-，字典&quot; class=&quot;headerlink&quot; title=&quot;数组 ，字典&quot;&gt;&lt;/a&gt;数组 ，字典&lt;/h2&gt;&lt;p&gt;使用方括号&lt;code&gt;[]&lt;/code&gt;来 创建数组和字典 ，用index或者 key来访问。&lt;br&gt;最后一个元素后面，允许跟一个 逗号。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var shoppingList = [&amp;quot;catfish&amp;quot;, &amp;quot;water&amp;quot;, &amp;quot;tulips&amp;quot;, &amp;quot;blue paint&amp;quot;,]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;shoppingList[1] = &amp;quot;bottle of water&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var occupations = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;Malcolm&amp;quot;: &amp;quot;Captain&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;Kaylee&amp;quot;: &amp;quot;Mechanic&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;occupations[&amp;quot;Jayne&amp;quot;] = &amp;quot;Public Relations&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建一个空的数组-，或者-字典&quot;&gt;&lt;a href=&quot;#创建一个空的数组-，或者-字典&quot; class=&quot;headerlink&quot; title=&quot;创建一个空的数组 ，或者 字典&quot;&gt;&lt;/a&gt;创建一个空的数组 ，或者 字典&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var emptyArray = [String]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var emptyDictionary = [String: Float]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emptyArray.append(&amp;quot;123&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(emptyArray)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emptyDictionary[&amp;quot;123&amp;quot;] = 1.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(emptyDictionary)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 希望 编译器 通过 值来 自己 判断类型，也可以用下面的 方式 初始化 空的 数组或者 字典。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;shoppingList = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;occupations = [:]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://www.youletter.cn/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>spring security-preface</title>
    <link href="http://www.youletter.cn/2017/12/11/spring-security-preface/"/>
    <id>http://www.youletter.cn/2017/12/11/spring-security-preface/</id>
    <published>2017-12-11T02:58:30.000Z</published>
    <updated>2017-12-11T14:56:38.511Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档</p><p><a href="https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle" target="_blank" rel="external">Spring Security Reference</a></p><p><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project" target="_blank" rel="external">十大漏洞</a></p><p>Authentication 是 识别建立一个 Principal ,Principal是一个用户，或者一个人，或者一个设备，就是行为主体， 认证之意，证明你是你。</p><p>Authorization 是决定 这个Principal   能有哪些行为。 授权之意，表示你能做什么。</p><h2 id="Spring-Security-版本号说明"><a href="#Spring-Security-版本号说明" class="headerlink" title="Spring Security 版本号说明"></a>Spring Security 版本号说明</h2><p>版本号分三级 MAJOR.MINOR.PATCH</p><p>MAJOR 的意思是 API有重大修改，不兼容。  如 5.0.0 和 4.2.3 不兼容。</p><p>MINOR 的意思是 小的修改 ，可能不兼容。</p><p>PATCH 绝对兼容。比如 4.2.3 和 4.2.1</p><h2 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-security-web&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.0.0.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.security&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;5.0.0.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>实际的开发中 可能不会 显示的 写这个依赖 ，比如 如果用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>就会包含这个依赖。</p><h2 id="开启debug日志"><a href="#开启debug日志" class="headerlink" title="开启debug日志"></a>开启debug日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 开启spring security的 debug日志</div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    org:</div><div class="line">      springframework:</div><div class="line">        security: DEBUG</div></pre></td></tr></table></figure><h2 id="SecurityContextHolder"><a href="#SecurityContextHolder" class="headerlink" title="SecurityContextHolder"></a>SecurityContextHolder</h2><p>This is where we store details of the present security context</p><h2 id="Authentication中存储-个人信息。"><a href="#Authentication中存储-个人信息。" class="headerlink" title="Authentication中存储 个人信息。"></a>Authentication中存储 个人信息。</h2><p>Authentication中存储 个人信息<br>在程序中的任何地方，可以用下面这段代码 来获取 已 认证的 用户信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();</div><div class="line"></div><div class="line">if (principal instanceof UserDetails) &#123;</div><div class="line">String username = ((UserDetails)principal).getUsername();</div><div class="line">&#125; else &#123;</div><div class="line">String username = principal.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="UserDetails"><a href="#UserDetails" class="headerlink" title="UserDetails"></a>UserDetails</h2><p>Authentication 中可以取到 Principal ，这是一个Object ，在Spring Security中Principal 大部分情况都是 UserDetails。</p><p>UserDetails是一个核心接口，它是 SecurityContextHolder 和 你的数据库中 真是用户信息的 一种联系。</p><h2 id="UserDetailsService"><a href="#UserDetailsService" class="headerlink" title="UserDetailsService"></a>UserDetailsService</h2><p>获取UserDetails的方法是  实现UserDetailsService 接口， 这个接口 只有一个方法， 就是通过 String name 获取 UserDetails。</p><p>对于UserDetailsService的实现，官方有一个基于数据库的实现 JdbcDaoImpl ，很有参考的地方。</p><a id="more"></a><p>JdbcDaoImpl.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * Copyright 2004, 2005, 2006 Acegi Technology Pty Limited</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> *      http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line">package org.springframework.security.core.userdetails.jdbc;</div><div class="line"></div><div class="line">import java.sql.ResultSet;</div><div class="line">import java.sql.SQLException;</div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.HashSet;</div><div class="line">import java.util.List;</div><div class="line">import java.util.Set;</div><div class="line"></div><div class="line">import org.springframework.context.ApplicationContextException;</div><div class="line">import org.springframework.context.MessageSource;</div><div class="line">import org.springframework.context.MessageSourceAware;</div><div class="line">import org.springframework.context.support.MessageSourceAccessor;</div><div class="line">import org.springframework.jdbc.core.RowMapper;</div><div class="line">import org.springframework.jdbc.core.support.JdbcDaoSupport;</div><div class="line">import org.springframework.security.core.GrantedAuthority;</div><div class="line">import org.springframework.security.core.SpringSecurityMessageSource;</div><div class="line">import org.springframework.security.core.authority.AuthorityUtils;</div><div class="line">import org.springframework.security.core.authority.SimpleGrantedAuthority;</div><div class="line">import org.springframework.security.core.userdetails.User;</div><div class="line">import org.springframework.security.core.userdetails.UserDetails;</div><div class="line">import org.springframework.security.core.userdetails.UserDetailsService;</div><div class="line">import org.springframework.security.core.userdetails.UsernameNotFoundException;</div><div class="line">import org.springframework.util.Assert;</div><div class="line"></div><div class="line">/**</div><div class="line"> * &lt;tt&gt;UserDetailsServiceRetrieves&lt;/tt&gt; implementation which retrieves the user details</div><div class="line"> * (username, password, enabled flag, and authorities) from a database using JDBC queries.</div><div class="line"> *</div><div class="line"> * &lt;h3&gt;Default Schema&lt;/h3&gt; A default database schema is assumed, with two tables &quot;users&quot;</div><div class="line"> * and &quot;authorities&quot;.</div><div class="line"> *</div><div class="line"> * &lt;h4&gt;The Users table&lt;/h4&gt;</div><div class="line"> *</div><div class="line"> * This table contains the login name, password and enabled status of the user.</div><div class="line"> *</div><div class="line"> * &lt;table summary=&quot;The Users Table&quot;&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;th&gt;Column&lt;/th&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;td&gt;username&lt;/td&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;td&gt;password&lt;/td&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;td&gt;enabled&lt;/td&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;/table&gt;</div><div class="line"> *</div><div class="line"> * &lt;h4&gt;The Authorities Table&lt;/h4&gt;</div><div class="line"> *</div><div class="line"> * &lt;table summary=&quot;The Authorities Table&quot;&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;th&gt;Column&lt;/th&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;td&gt;username&lt;/td&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;tr&gt;</div><div class="line"> * &lt;td&gt;authority&lt;/td&gt;</div><div class="line"> * &lt;/tr&gt;</div><div class="line"> * &lt;/table&gt;</div><div class="line"> *</div><div class="line"> * If you are using an existing schema you will have to set the queries</div><div class="line"> * &lt;tt&gt;usersByUsernameQuery&lt;/tt&gt; and &lt;tt&gt;authoritiesByUsernameQuery&lt;/tt&gt; to match your</div><div class="line"> * database setup (see &#123;@link #DEF_USERS_BY_USERNAME_QUERY&#125; and</div><div class="line"> * &#123;@link #DEF_AUTHORITIES_BY_USERNAME_QUERY&#125;).</div><div class="line"> *</div><div class="line"> * &lt;p&gt;</div><div class="line"> * In order to minimise backward compatibility issues, this implementation doesn&apos;t</div><div class="line"> * recognise the expiration of user accounts or the expiration of user credentials.</div><div class="line"> * However, it does recognise and honour the user enabled/disabled column. This should map</div><div class="line"> * to a &lt;tt&gt;boolean&lt;/tt&gt; type in the result set (the SQL type will depend on the database</div><div class="line"> * you are using). All the other columns map to &lt;tt&gt;String&lt;/tt&gt;s.</div><div class="line"> *</div><div class="line"> * &lt;h3&gt;Group Support&lt;/h3&gt; Support for group-based authorities can be enabled by setting</div><div class="line"> * the &lt;tt&gt;enableGroups&lt;/tt&gt; property to &lt;tt&gt;true&lt;/tt&gt; (you may also then wish to set</div><div class="line"> * &lt;tt&gt;enableAuthorities&lt;/tt&gt; to &lt;tt&gt;false&lt;/tt&gt; to disable loading of authorities</div><div class="line"> * directly). With this approach, authorities are allocated to groups and a user&apos;s</div><div class="line"> * authorities are determined based on the groups they are a member of. The net result is</div><div class="line"> * the same (a UserDetails containing a set of &lt;tt&gt;GrantedAuthority&lt;/tt&gt;s is loaded), but</div><div class="line"> * the different persistence strategy may be more suitable for the administration of some</div><div class="line"> * applications.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * When groups are being used, the tables &quot;groups&quot;, &quot;group_members&quot; and</div><div class="line"> * &quot;group_authorities&quot; are used. See &#123;@link #DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY&#125; for</div><div class="line"> * the default query which is used to load the group authorities. Again you can customize</div><div class="line"> * this by setting the &lt;tt&gt;groupAuthoritiesByUsernameQuery&lt;/tt&gt; property, but the format</div><div class="line"> * of the rows returned should match the default.</div><div class="line"> *</div><div class="line"> * @author Ben Alex</div><div class="line"> * @author colin sampaleanu</div><div class="line"> * @author Luke Taylor</div><div class="line"> */</div><div class="line">public class JdbcDaoImpl extends JdbcDaoSupport</div><div class="line">implements UserDetailsService, MessageSourceAware &#123;</div><div class="line">// ~ Static fields/initializers</div><div class="line">// =====================================================================================</div><div class="line"></div><div class="line">public static final String DEF_USERS_BY_USERNAME_QUERY = &quot;select username,password,enabled &quot;</div><div class="line">+ &quot;from users &quot; + &quot;where username = ?&quot;;</div><div class="line">public static final String DEF_AUTHORITIES_BY_USERNAME_QUERY = &quot;select username,authority &quot;</div><div class="line">+ &quot;from authorities &quot; + &quot;where username = ?&quot;;</div><div class="line">public static final String DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY = &quot;select g.id, g.group_name, ga.authority &quot;</div><div class="line">+ &quot;from groups g, group_members gm, group_authorities ga &quot;</div><div class="line">+ &quot;where gm.username = ? &quot; + &quot;and g.id = ga.group_id &quot;</div><div class="line">+ &quot;and g.id = gm.group_id&quot;;</div><div class="line"></div><div class="line">// ~ Instance fields</div><div class="line">// ================================================================================================</div><div class="line"></div><div class="line">protected MessageSourceAccessor messages = SpringSecurityMessageSource.getAccessor();</div><div class="line"></div><div class="line">private String authoritiesByUsernameQuery;</div><div class="line">private String groupAuthoritiesByUsernameQuery;</div><div class="line">private String usersByUsernameQuery;</div><div class="line">private String rolePrefix = &quot;&quot;;</div><div class="line">private boolean usernameBasedPrimaryKey = true;</div><div class="line">private boolean enableAuthorities = true;</div><div class="line">private boolean enableGroups;</div><div class="line"></div><div class="line">// ~ Constructors</div><div class="line">// ===================================================================================================</div><div class="line"></div><div class="line">public JdbcDaoImpl() &#123;</div><div class="line">this.usersByUsernameQuery = DEF_USERS_BY_USERNAME_QUERY;</div><div class="line">this.authoritiesByUsernameQuery = DEF_AUTHORITIES_BY_USERNAME_QUERY;</div><div class="line">this.groupAuthoritiesByUsernameQuery = DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ~ Methods</div><div class="line">// ========================================================================================================</div><div class="line"></div><div class="line">/**</div><div class="line"> * @return the messages</div><div class="line"> */</div><div class="line">protected MessageSourceAccessor getMessages() &#123;</div><div class="line">return this.messages;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Allows subclasses to add their own granted authorities to the list to be returned</div><div class="line"> * in the &lt;tt&gt;UserDetails&lt;/tt&gt;.</div><div class="line"> *</div><div class="line"> * @param username the username, for use by finder methods</div><div class="line"> * @param authorities the current granted authorities, as populated from the</div><div class="line"> * &lt;code&gt;authoritiesByUsername&lt;/code&gt; mapping</div><div class="line"> */</div><div class="line">protected void addCustomAuthorities(String username,</div><div class="line">List&lt;GrantedAuthority&gt; authorities) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public String getUsersByUsernameQuery() &#123;</div><div class="line">return this.usersByUsernameQuery;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void initDao() throws ApplicationContextException &#123;</div><div class="line">Assert.isTrue(this.enableAuthorities || this.enableGroups,</div><div class="line">&quot;Use of either authorities or groups must be enabled&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public UserDetails loadUserByUsername(String username)</div><div class="line">throws UsernameNotFoundException &#123;</div><div class="line">List&lt;UserDetails&gt; users = loadUsersByUsername(username);</div><div class="line"></div><div class="line">if (users.size() == 0) &#123;</div><div class="line">this.logger.debug(&quot;Query returned no results for user &apos;&quot; + username + &quot;&apos;&quot;);</div><div class="line"></div><div class="line">throw new UsernameNotFoundException(</div><div class="line">this.messages.getMessage(&quot;JdbcDaoImpl.notFound&quot;,</div><div class="line">new Object[] &#123; username &#125;, &quot;Username &#123;0&#125; not found&quot;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">UserDetails user = users.get(0); // contains no GrantedAuthority[]</div><div class="line"></div><div class="line">Set&lt;GrantedAuthority&gt; dbAuthsSet = new HashSet&lt;GrantedAuthority&gt;();</div><div class="line"></div><div class="line">if (this.enableAuthorities) &#123;</div><div class="line">dbAuthsSet.addAll(loadUserAuthorities(user.getUsername()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">if (this.enableGroups) &#123;</div><div class="line">dbAuthsSet.addAll(loadGroupAuthorities(user.getUsername()));</div><div class="line">&#125;</div><div class="line"></div><div class="line">List&lt;GrantedAuthority&gt; dbAuths = new ArrayList&lt;GrantedAuthority&gt;(dbAuthsSet);</div><div class="line"></div><div class="line">addCustomAuthorities(user.getUsername(), dbAuths);</div><div class="line"></div><div class="line">if (dbAuths.size() == 0) &#123;</div><div class="line">this.logger.debug(&quot;User &apos;&quot; + username</div><div class="line">+ &quot;&apos; has no authorities and will be treated as &apos;not found&apos;&quot;);</div><div class="line"></div><div class="line">throw new UsernameNotFoundException(this.messages.getMessage(</div><div class="line">&quot;JdbcDaoImpl.noAuthority&quot;, new Object[] &#123; username &#125;,</div><div class="line">&quot;User &#123;0&#125; has no GrantedAuthority&quot;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">return createUserDetails(username, user, dbAuths);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Executes the SQL &lt;tt&gt;usersByUsernameQuery&lt;/tt&gt; and returns a list of UserDetails</div><div class="line"> * objects. There should normally only be one matching user.</div><div class="line"> */</div><div class="line">protected List&lt;UserDetails&gt; loadUsersByUsername(String username) &#123;</div><div class="line">return getJdbcTemplate().query(this.usersByUsernameQuery,</div><div class="line">new String[] &#123; username &#125;, new RowMapper&lt;UserDetails&gt;() &#123;</div><div class="line">@Override</div><div class="line">public UserDetails mapRow(ResultSet rs, int rowNum)</div><div class="line">throws SQLException &#123;</div><div class="line">String username = rs.getString(1);</div><div class="line">String password = rs.getString(2);</div><div class="line">boolean enabled = rs.getBoolean(3);</div><div class="line">return new User(username, password, enabled, true, true, true,</div><div class="line">AuthorityUtils.NO_AUTHORITIES);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Loads authorities by executing the SQL from &lt;tt&gt;authoritiesByUsernameQuery&lt;/tt&gt;.</div><div class="line"> *</div><div class="line"> * @return a list of GrantedAuthority objects for the user</div><div class="line"> */</div><div class="line">protected List&lt;GrantedAuthority&gt; loadUserAuthorities(String username) &#123;</div><div class="line">return getJdbcTemplate().query(this.authoritiesByUsernameQuery,</div><div class="line">new String[] &#123; username &#125;, new RowMapper&lt;GrantedAuthority&gt;() &#123;</div><div class="line">@Override</div><div class="line">public GrantedAuthority mapRow(ResultSet rs, int rowNum)</div><div class="line">throws SQLException &#123;</div><div class="line">String roleName = JdbcDaoImpl.this.rolePrefix + rs.getString(2);</div><div class="line"></div><div class="line">return new SimpleGrantedAuthority(roleName);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Loads authorities by executing the SQL from</div><div class="line"> * &lt;tt&gt;groupAuthoritiesByUsernameQuery&lt;/tt&gt;.</div><div class="line"> *</div><div class="line"> * @return a list of GrantedAuthority objects for the user</div><div class="line"> */</div><div class="line">protected List&lt;GrantedAuthority&gt; loadGroupAuthorities(String username) &#123;</div><div class="line">return getJdbcTemplate().query(this.groupAuthoritiesByUsernameQuery,</div><div class="line">new String[] &#123; username &#125;, new RowMapper&lt;GrantedAuthority&gt;() &#123;</div><div class="line">@Override</div><div class="line">public GrantedAuthority mapRow(ResultSet rs, int rowNum)</div><div class="line">throws SQLException &#123;</div><div class="line">String roleName = getRolePrefix() + rs.getString(3);</div><div class="line"></div><div class="line">return new SimpleGrantedAuthority(roleName);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Can be overridden to customize the creation of the final UserDetailsObject which is</div><div class="line"> * returned by the &lt;tt&gt;loadUserByUsername&lt;/tt&gt; method.</div><div class="line"> *</div><div class="line"> * @param username the name originally passed to loadUserByUsername</div><div class="line"> * @param userFromUserQuery the object returned from the execution of the</div><div class="line"> * @param combinedAuthorities the combined array of authorities from all the authority</div><div class="line"> * loading queries.</div><div class="line"> * @return the final UserDetails which should be used in the system.</div><div class="line"> */</div><div class="line">protected UserDetails createUserDetails(String username,</div><div class="line">UserDetails userFromUserQuery, List&lt;GrantedAuthority&gt; combinedAuthorities) &#123;</div><div class="line">String returnUsername = userFromUserQuery.getUsername();</div><div class="line"></div><div class="line">if (!this.usernameBasedPrimaryKey) &#123;</div><div class="line">returnUsername = username;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return new User(returnUsername, userFromUserQuery.getPassword(),</div><div class="line">userFromUserQuery.isEnabled(), true, true, true, combinedAuthorities);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Allows the default query string used to retrieve authorities based on username to</div><div class="line"> * be overridden, if default table or column names need to be changed. The default</div><div class="line"> * query is &#123;@link #DEF_AUTHORITIES_BY_USERNAME_QUERY&#125;; when modifying this query,</div><div class="line"> * ensure that all returned columns are mapped back to the same column names as in the</div><div class="line"> * default query.</div><div class="line"> *</div><div class="line"> * @param queryString The SQL query string to set</div><div class="line"> */</div><div class="line">public void setAuthoritiesByUsernameQuery(String queryString) &#123;</div><div class="line">this.authoritiesByUsernameQuery = queryString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected String getAuthoritiesByUsernameQuery() &#123;</div><div class="line">return this.authoritiesByUsernameQuery;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Allows the default query string used to retrieve group authorities based on</div><div class="line"> * username to be overridden, if default table or column names need to be changed. The</div><div class="line"> * default query is &#123;@link #DEF_GROUP_AUTHORITIES_BY_USERNAME_QUERY&#125;; when modifying</div><div class="line"> * this query, ensure that all returned columns are mapped back to the same column</div><div class="line"> * names as in the default query.</div><div class="line"> *</div><div class="line"> * @param queryString The SQL query string to set</div><div class="line"> */</div><div class="line">public void setGroupAuthoritiesByUsernameQuery(String queryString) &#123;</div><div class="line">this.groupAuthoritiesByUsernameQuery = queryString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Allows a default role prefix to be specified. If this is set to a non-empty value,</div><div class="line"> * then it is automatically prepended to any roles read in from the db. This may for</div><div class="line"> * example be used to add the &lt;tt&gt;ROLE_&lt;/tt&gt; prefix expected to exist in role names</div><div class="line"> * (by default) by some other Spring Security classes, in the case that the prefix is</div><div class="line"> * not already present in the db.</div><div class="line"> *</div><div class="line"> * @param rolePrefix the new prefix</div><div class="line"> */</div><div class="line">public void setRolePrefix(String rolePrefix) &#123;</div><div class="line">this.rolePrefix = rolePrefix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected String getRolePrefix() &#123;</div><div class="line">return this.rolePrefix;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * If &lt;code&gt;true&lt;/code&gt; (the default), indicates the</div><div class="line"> * &#123;@link #getUsersByUsernameQuery()&#125; returns a username in response to a query. If</div><div class="line"> * &lt;code&gt;false&lt;/code&gt;, indicates that a primary key is used instead. If set to</div><div class="line"> * &lt;code&gt;true&lt;/code&gt;, the class will use the database-derived username in the returned</div><div class="line"> * &lt;code&gt;UserDetails&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt;, the class will use the</div><div class="line"> * &#123;@link #loadUserByUsername(String)&#125; derived username in the returned</div><div class="line"> * &lt;code&gt;UserDetails&lt;/code&gt;.</div><div class="line"> *</div><div class="line"> * @param usernameBasedPrimaryKey &lt;code&gt;true&lt;/code&gt; if the mapping queries return the</div><div class="line"> * username &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; if the mapping returns a</div><div class="line"> * database primary key.</div><div class="line"> */</div><div class="line">public void setUsernameBasedPrimaryKey(boolean usernameBasedPrimaryKey) &#123;</div><div class="line">this.usernameBasedPrimaryKey = usernameBasedPrimaryKey;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected boolean isUsernameBasedPrimaryKey() &#123;</div><div class="line">return this.usernameBasedPrimaryKey;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Allows the default query string used to retrieve users based on username to be</div><div class="line"> * overridden, if default table or column names need to be changed. The default query</div><div class="line"> * is &#123;@link #DEF_USERS_BY_USERNAME_QUERY&#125;; when modifying this query, ensure that all</div><div class="line"> * returned columns are mapped back to the same column names as in the default query.</div><div class="line"> * If the &apos;enabled&apos; column does not exist in the source database, a permanent true</div><div class="line"> * value for this column may be returned by using a query similar to</div><div class="line"> *</div><div class="line"> * &lt;pre&gt;</div><div class="line"> * &amp;quot;select username,password,&apos;true&apos; as enabled from users where username = ?&amp;quot;</div><div class="line"> * &lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * @param usersByUsernameQueryString The query string to set</div><div class="line"> */</div><div class="line">public void setUsersByUsernameQuery(String usersByUsernameQueryString) &#123;</div><div class="line">this.usersByUsernameQuery = usersByUsernameQueryString;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected boolean getEnableAuthorities() &#123;</div><div class="line">return this.enableAuthorities;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Enables loading of authorities (roles) from the authorities table. Defaults to true</div><div class="line"> */</div><div class="line">public void setEnableAuthorities(boolean enableAuthorities) &#123;</div><div class="line">this.enableAuthorities = enableAuthorities;</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected boolean getEnableGroups() &#123;</div><div class="line">return this.enableGroups;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Enables support for group authorities. Defaults to false</div><div class="line"> * @param enableGroups</div><div class="line"> */</div><div class="line">public void setEnableGroups(boolean enableGroups) &#123;</div><div class="line">this.enableGroups = enableGroups;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void setMessageSource(MessageSource messageSource) &#123;</div><div class="line">Assert.notNull(messageSource, &quot;messageSource cannot be null&quot;);</div><div class="line">this.messages = new MessageSourceAccessor(messageSource);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="GrantedAuthority"><a href="#GrantedAuthority" class="headerlink" title="GrantedAuthority"></a>GrantedAuthority</h2><p>Authentication的另一个重要方法是 getAuthorities()，获取 该用户有哪些 权限。</p><h2 id="AuthenticationManager"><a href="#AuthenticationManager" class="headerlink" title="AuthenticationManager"></a>AuthenticationManager</h2><p>AuthenticationManager 也是一个接口, 就是 验证 登录的用户 是否 合法，如何合法，则返回一个 authentication， 不合法直接 抛错。</p><h2 id="ProviderManager"><a href="#ProviderManager" class="headerlink" title="ProviderManager"></a>ProviderManager</h2><p>ProviderManager是 实现AuthenticationManager接口的类。表面上是这样。<br>实际上，ProviderManager 将这个认证的 工作 委托给 一列 AuthenticationProvider。 又AuthenticationProvider 来 验证用户。</p><h2 id="AuthenticationProvider"><a href="#AuthenticationProvider" class="headerlink" title="AuthenticationProvider"></a>AuthenticationProvider</h2><p>AuthenticationProvider也是接口。 如何验证用户呢？ 还记得上面的UserDetails吗？</p><h2 id="DaoAuthenticationProvider"><a href="#DaoAuthenticationProvider" class="headerlink" title="DaoAuthenticationProvider"></a>DaoAuthenticationProvider</h2><p>DaoAuthenticationProvider实现了AuthenticationProvider接口，通常 ，使用 DaoAuthenticationProvider 来实现验证用户的。 因为用户名密码 通常存在数据库中。</p><p>使用DaoAuthenticationProvider需要两个信息，</p><ul><li>userDetailsService</li><li>passwordEncoder   加密方式</li></ul><p><a href="https://docs.spring.io/spring-security/site/docs/4.2.3.RELEASE/reference/htmlsingle/#core-services-dao-provider" target="_blank" rel="external">DaoAuthenticationProvider</a></p><h2 id="UserDetailsService实现"><a href="#UserDetailsService实现" class="headerlink" title="UserDetailsService实现"></a>UserDetailsService实现</h2><p>有一种 In-Memory 内存中存储 用户信息的方法 ，但这种 只可以调试 ，是无法在 生产中使用的。</p><p>实际中使用的 ，用户名 和 密码一般是在 数据库中存储的。<br>上面已经贴了一个 JdbcDaoImpl.java 的实现 。</p><p>这里了使用的是原生的 dataSource 。 但如果 代码中使用了 如 Mybatis这样的 dao ，只需要小小改动一下 ，自己实现一下 loadUserByUsername 这个方法即可。</p><p>实现loadUserByUsername 的过程 ，也即是 实现 UserDetails的过程。</p><p>实现UserDetails的 Domain 一般是 存在 数据库中的 记录对应的 pojo。</p><h2 id="Password-Encoding"><a href="#Password-Encoding" class="headerlink" title="Password Encoding"></a>Password Encoding</h2><p>推荐使用 BCryptPasswordEncoder 来作为 加密器。<br>BCryptPasswordEncoder的特点就 加密特别慢， 这样 破解起来就很慢了 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方文档&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-security/site/docs/current/reference/htmlsingle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Security Reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;十大漏洞&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Authentication 是 识别建立一个 Principal ,Principal是一个用户，或者一个人，或者一个设备，就是行为主体， 认证之意，证明你是你。&lt;/p&gt;
&lt;p&gt;Authorization 是决定 这个Principal   能有哪些行为。 授权之意，表示你能做什么。&lt;/p&gt;
&lt;h2 id=&quot;Spring-Security-版本号说明&quot;&gt;&lt;a href=&quot;#Spring-Security-版本号说明&quot; class=&quot;headerlink&quot; title=&quot;Spring Security 版本号说明&quot;&gt;&lt;/a&gt;Spring Security 版本号说明&lt;/h2&gt;&lt;p&gt;版本号分三级 MAJOR.MINOR.PATCH&lt;/p&gt;
&lt;p&gt;MAJOR 的意思是 API有重大修改，不兼容。  如 5.0.0 和 4.2.3 不兼容。&lt;/p&gt;
&lt;p&gt;MINOR 的意思是 小的修改 ，可能不兼容。&lt;/p&gt;
&lt;p&gt;PATCH 绝对兼容。比如 4.2.3 和 4.2.1&lt;/p&gt;
&lt;h2 id=&quot;maven-依赖&quot;&gt;&lt;a href=&quot;#maven-依赖&quot; class=&quot;headerlink&quot; title=&quot;maven 依赖&quot;&gt;&lt;/a&gt;maven 依赖&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-security-web&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;version&amp;gt;5.0.0.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.security&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-security-config&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;version&amp;gt;5.0.0.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际的开发中 可能不会 显示的 写这个依赖 ，比如 如果用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-cloud-starter-security&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会包含这个依赖。&lt;/p&gt;
&lt;h2 id=&quot;开启debug日志&quot;&gt;&lt;a href=&quot;#开启debug日志&quot; class=&quot;headerlink&quot; title=&quot;开启debug日志&quot;&gt;&lt;/a&gt;开启debug日志&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# 开启spring security的 debug日志&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logging:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  level:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    org:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      springframework:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        security: DEBUG&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SecurityContextHolder&quot;&gt;&lt;a href=&quot;#SecurityContextHolder&quot; class=&quot;headerlink&quot; title=&quot;SecurityContextHolder&quot;&gt;&lt;/a&gt;SecurityContextHolder&lt;/h2&gt;&lt;p&gt;This is where we store details of the present security context&lt;/p&gt;
&lt;h2 id=&quot;Authentication中存储-个人信息。&quot;&gt;&lt;a href=&quot;#Authentication中存储-个人信息。&quot; class=&quot;headerlink&quot; title=&quot;Authentication中存储 个人信息。&quot;&gt;&lt;/a&gt;Authentication中存储 个人信息。&lt;/h2&gt;&lt;p&gt;Authentication中存储 个人信息&lt;br&gt;在程序中的任何地方，可以用下面这段代码 来获取 已 认证的 用户信息。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if (principal instanceof UserDetails) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String username = ((UserDetails)principal).getUsername();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String username = principal.toString();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;UserDetails&quot;&gt;&lt;a href=&quot;#UserDetails&quot; class=&quot;headerlink&quot; title=&quot;UserDetails&quot;&gt;&lt;/a&gt;UserDetails&lt;/h2&gt;&lt;p&gt;Authentication 中可以取到 Principal ，这是一个Object ，在Spring Security中Principal 大部分情况都是 UserDetails。&lt;/p&gt;
&lt;p&gt;UserDetails是一个核心接口，它是 SecurityContextHolder 和 你的数据库中 真是用户信息的 一种联系。&lt;/p&gt;
&lt;h2 id=&quot;UserDetailsService&quot;&gt;&lt;a href=&quot;#UserDetailsService&quot; class=&quot;headerlink&quot; title=&quot;UserDetailsService&quot;&gt;&lt;/a&gt;UserDetailsService&lt;/h2&gt;&lt;p&gt;获取UserDetails的方法是  实现UserDetailsService 接口， 这个接口 只有一个方法， 就是通过 String name 获取 UserDetails。&lt;/p&gt;
&lt;p&gt;对于UserDetailsService的实现，官方有一个基于数据库的实现 JdbcDaoImpl ，很有参考的地方。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-security" scheme="http://www.youletter.cn/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>过秦论</title>
    <link href="http://www.youletter.cn/2017/12/11/%E8%BF%87%E7%A7%A6%E8%AE%BA/"/>
    <id>http://www.youletter.cn/2017/12/11/过秦论/</id>
    <published>2017-12-11T02:20:38.000Z</published>
    <updated>2017-12-11T02:22:48.381Z</updated>
    
    <content type="html"><![CDATA[<p>贾谊 </p><p>秦孝公据崤函之固，拥雍州之地，君臣固守以窥周室，有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。当是时也，商君佐之，内立法度，务耕织，修守战之具，外连衡而斗诸侯。于是秦人拱手而取西河之外。</p><p>孝公既没，惠文、武、昭襄蒙故业，因遗策，南取汉中，西举巴、蜀，东割膏腴之地，北收要害之郡。诸侯恐惧，会盟而谋弱秦，不爱珍器重宝肥饶之地，以致天下之士，合从缔交，相与为一。当此之时，齐有孟尝，赵有平原，楚有春申，魏有信陵。此四君者，皆明智而忠信，宽厚而爱人，尊贤而重士，约从离衡，兼韩、魏、燕、楚、齐、赵、宋、卫、中山之众。于是六国之士，有宁越、徐尚、苏秦、杜赫之属为之谋，齐明、周最、陈轸、召滑、楼缓、翟景、苏厉、乐毅之徒通其意，吴起、孙膑、带佗、倪良、王廖、田忌、廉颇、赵奢之伦制其兵。尝以十倍之地，百万之众，叩关而攻秦。秦人开关延敌，九国之师，逡巡而不敢进。秦无亡矢遗镞之费，而天下诸侯已困矣。于是从散约败，争割地而赂秦。秦有余力而制其弊，追亡逐北，伏尸百万，流血漂橹；因利乘便，宰割天下，分裂山河。强国请服，弱国入朝。</p><p>延及孝文王、庄襄王，享国之日浅，国家无事。</p><p>及至始皇，奋六世之余烈，振长策而御宇内，吞二周而亡诸侯，履至尊而制六合，执敲扑而鞭笞天下，威振四海。南取百越之地，以为桂林、象郡；百越之君，俯首系颈，委命下吏。乃使蒙恬北筑长城而守藩篱，却匈奴七百余里；胡人不敢南下而牧马，士不敢弯弓而报怨。于是废先王之道，焚百家之言，以愚黔首；隳名城，杀豪杰；收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民。然后践华为城，因河为池，据亿丈之城，临不测之渊，以为固。良将劲弩守要害之处，信臣精卒陈利兵而谁何。天下已定，始皇之心，自以为关中之固，金城千里，子孙帝王万世之业也。</p><p>秦王既没，余威震于殊俗。然陈涉瓮牖绳枢之子，氓隶之人，而迁徙之徒也；才能不及中人，非有仲尼，墨翟之贤，陶朱、猗顿之富；蹑足行伍之间，而倔起阡陌之中，率疲弊之卒，将数百之众，转而攻秦；斩木为兵，揭竿为旗，天下云集响应，赢粮而景从。山东豪俊遂并起而亡秦族矣。</p><p>且夫天下非小弱也，雍州之地，崤函之固，自若也。陈涉之位，非尊于齐、楚、燕、赵、韩、魏、宋、卫、中山之君也；锄懮棘矜，非铦于钩戟长铩也；谪戍之众，非抗于九国之师也；深谋远虑，行军用兵之道，非及向时之士也。然而成败异变，功业相反，何也？试使山东之国与陈涉度长絜大，比权量力，则不可同年而语矣。然秦以区区之地，致万乘之势，序八州而朝同列，百有余年矣；然后以六合之家，崤函为宫；一夫作难而七庙隳，身死人手，为天下笑者，何也？仁义不施而攻守之势异也。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贾谊 &lt;/p&gt;
&lt;p&gt;秦孝公据崤函之固，拥雍州之地，君臣固守以窥周室，有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。当是时也，商君佐之，内立法度，务耕织，修守战之具，外连衡而斗诸侯。于是秦人拱手而取西河之外。&lt;/p&gt;
&lt;p&gt;孝公既没，惠文、武、昭襄蒙故业，因遗策，南取汉中，西举巴、蜀，东割膏腴之地，北收要害之郡。诸侯恐惧，会盟而谋弱秦，不爱珍器重宝肥饶之地，以致天下之士，合从缔交，相与为一。当此之时，齐有孟尝，赵有平原，楚有春申，魏有信陵。此四君者，皆明智而忠信，宽厚而爱人，尊贤而重士，约从离衡，兼韩、魏、燕、楚、齐、赵、宋、卫、中山之众。于是六国之士，有宁越、徐尚、苏秦、杜赫之属为之谋，齐明、周最、陈轸、召滑、楼缓、翟景、苏厉、乐毅之徒通其意，吴起、孙膑、带佗、倪良、王廖、田忌、廉颇、赵奢之伦制其兵。尝以十倍之地，百万之众，叩关而攻秦。秦人开关延敌，九国之师，逡巡而不敢进。秦无亡矢遗镞之费，而天下诸侯已困矣。于是从散约败，争割地而赂秦。秦有余力而制其弊，追亡逐北，伏尸百万，流血漂橹；因利乘便，宰割天下，分裂山河。强国请服，弱国入朝。&lt;/p&gt;
&lt;p&gt;延及孝文王、庄襄王，享国之日浅，国家无事。&lt;/p&gt;
&lt;p&gt;及至始皇，奋六世之余烈，振长策而御宇内，吞二周而亡诸侯，履至尊而制六合，执敲扑而鞭笞天下，威振四海。南取百越之地，以为桂林、象郡；百越之君，俯首系颈，委命下吏。乃使蒙恬北筑长城而守藩篱，却匈奴七百余里；胡人不敢南下而牧马，士不敢弯弓而报怨。于是废先王之道，焚百家之言，以愚黔首；隳名城，杀豪杰；收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民。然后践华为城，因河为池，据亿丈之城，临不测之渊，以为固。良将劲弩守要害之处，信臣精卒陈利兵而谁何。天下已定，始皇之心，自以为关中之固，金城千里，子孙帝王万世之业也。&lt;/p&gt;
&lt;p&gt;秦王既没，余威震于殊俗。然陈涉瓮牖绳枢之子，氓隶之人，而迁徙之徒也；才能不及中人，非有仲尼，墨翟之贤，陶朱、猗顿之富；蹑足行伍之间，而倔起阡陌之中，率疲弊之卒，将数百之众，转而攻秦；斩木为兵，揭竿为旗，天下云集响应，赢粮而景从。山东豪俊遂并起而亡秦族矣。&lt;/p&gt;
&lt;p&gt;且夫天下非小弱也，雍州之地，崤函之固，自若也。陈涉之位，非尊于齐、楚、燕、赵、韩、魏、宋、卫、中山之君也；锄懮棘矜，非铦于钩戟长铩也；谪戍之众，非抗于九国之师也；深谋远虑，行军用兵之道，非及向时之士也。然而成败异变，功业相反，何也？试使山东之国与陈涉度长絜大，比权量力，则不可同年而语矣。然秦以区区之地，致万乘之势，序八州而朝同列，百有余年矣；然后以六合之家，崤函为宫；一夫作难而七庙隳，身死人手，为天下笑者，何也？仁义不施而攻守之势异也。&lt;/p&gt;
    
    </summary>
    
    
      <category term="文学" scheme="http://www.youletter.cn/tags/%E6%96%87%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot 测试-mock resttemplate</title>
    <link href="http://www.youletter.cn/2017/12/09/spring-boot-%E6%B5%8B%E8%AF%95-mock-resttemplate/"/>
    <id>http://www.youletter.cn/2017/12/09/spring-boot-测试-mock-resttemplate/</id>
    <published>2017-12-09T09:53:10.000Z</published>
    <updated>2017-12-09T10:29:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>example<br>在spring boot中 进行 restTemplate的模拟 替换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest(classes = SomeApplication.class)</div><div class="line">public class SomeServiceTest</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    @InjectMocks</div><div class="line">    SomeService someService;</div><div class="line"></div><div class="line">    @Mock</div><div class="line">    RestTemplate restTemplate;</div><div class="line">    </div><div class="line">    @Test</div><div class="line">    public void isVipkidTest() &#123;</div><div class="line">    </div><div class="line">doReturn(makeResp()).when(restTemplate).exchange(</div><div class="line">    Matchers.any(URI.class),</div><div class="line">    Matchers.any(HttpMethod.class),</div><div class="line">    Matchers.any(HttpEntity.class),</div><div class="line">    Matchers.any(Class.class)</div><div class="line">);</div><div class="line">    </div><div class="line">someService.me();</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;example&lt;br&gt;在spring boot中 进行 restTemplate的模拟 替换。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@RunWith(SpringRunner.class)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@SpringBootTest(classes = SomeApplication.class)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class SomeServiceTest&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Autowired&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @InjectMocks&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    SomeService someService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Mock&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    RestTemplate restTemplate;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Test&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void isVipkidTest() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		doReturn(makeResp()).when(restTemplate).exchange(&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    Matchers.any(URI.class),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    Matchers.any(HttpMethod.class),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    Matchers.any(HttpEntity.class),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    Matchers.any(Class.class)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		someService.me();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统漫游</title>
    <link href="http://www.youletter.cn/2017/12/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/"/>
    <id>http://www.youletter.cn/2017/12/07/计算机系统漫游/</id>
    <published>2017-12-07T02:03:56.000Z</published>
    <updated>2017-12-07T03:10:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ascii码"><a href="#ascii码" class="headerlink" title="ascii码"></a>ascii码</h1><p>现在计算机系统采用ascii标准来表示 文本字符。 c语言的源文件就是用ascii字符编写的。</p><p>8个bit位 为一组，称为字节。 每个字节都是一个整数值，对应着一个 字符。</p><h1 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h1><p>只有ascii字符构成的文件 称为 文本文件， 其他文件称为二进制文件。</p><h1 id="为什么会乱码"><a href="#为什么会乱码" class="headerlink" title="为什么会乱码"></a>为什么会乱码</h1><p>因为二进制文件，不是全是字符构成的， 当你用 文本编辑器打开 这样的文件的时， 依然按照字符来解读，但是部分二进制无法找到对应的字符， 编辑器不知道如何显示这些 非ascii码的东西，所以就乱码显示。</p><h1 id="数字的机器表示"><a href="#数字的机器表示" class="headerlink" title="数字的机器表示"></a>数字的机器表示</h1><p>数字的机器表示和 实际的整数和实数是不同的，它们是对真值的有限近似值。</p><h1 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h1><p>C编译器和Fortran编译器 产生的 汇编语言是一样的。</p><h1 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h1><p>编译系统将 源文件 -&gt; 可执行文件</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>进程使得 操作系统可以 同时运行多个程序。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>文件就是字节序列， 每个I/O设备，键盘，显示器，网络都是文件。</p><h1 id="系统之间利用网络通信"><a href="#系统之间利用网络通信" class="headerlink" title="系统之间利用网络通信"></a>系统之间利用网络通信</h1><p>通过网络接口，字节从一台电脑传递到了另一他电脑，开启了Internet。从此单机也变得更有用。</p><h1 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h1><p>Hello everybody out there using minix -</p><p>I’m doing a (free) operating system (just a hobby, won’t be big and professional like gnu) for 386(486) AT clones. This has been brewing since april, and is starting to get ready. I’d like any feedback on things people like/dislike in minix, as my OS resembles it somewhat (same physical layout of the file-system (due to practical reasons) among other things).</p><p>I’ve currently ported bash(1.08) and gcc(1.40), and things seem to work. This implies that I’ll get something practical within a few months, and I’d like to know what features most people would want. Any suggestions are welcome, but I won’t promise I’ll implement them :-)</p><p>Linus (torvalds@kruuna.helsinki.fi)</p><p>PS. Yes - it’s free of any minix code, and it has a multi-threaded fs. It is NOT portable (uses 386 task switching etc), and it probably never will support anything other than AT-harddisks, as that’s all I have :-(.<br>— Linus Torvalds[14]</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ascii码&quot;&gt;&lt;a href=&quot;#ascii码&quot; class=&quot;headerlink&quot; title=&quot;ascii码&quot;&gt;&lt;/a&gt;ascii码&lt;/h1&gt;&lt;p&gt;现在计算机系统采用ascii标准来表示 文本字符。 c语言的源文件就是用ascii字符编写的。&lt;/p&gt;
&lt;p&gt;8个bit位 为一组，称为字节。 每个字节都是一个整数值，对应着一个 字符。&lt;/p&gt;
&lt;h1 id=&quot;文本文件&quot;&gt;&lt;a href=&quot;#文本文件&quot; class=&quot;headerlink&quot; title=&quot;文本文件&quot;&gt;&lt;/a&gt;文本文件&lt;/h1&gt;&lt;p&gt;只有ascii字符构成的文件 称为 文本文件， 其他文件称为二进制文件。&lt;/p&gt;
&lt;h1 id=&quot;为什么会乱码&quot;&gt;&lt;a href=&quot;#为什么会乱码&quot; class=&quot;headerlink&quot; title=&quot;为什么会乱码&quot;&gt;&lt;/a&gt;为什么会乱码&lt;/h1&gt;&lt;p&gt;因为二进制文件，不是全是字符构成的， 当你用 文本编辑器打开 这样的文件的时， 依然按照字符来解读，但是部分二进制无法找到对应的字符， 编辑器不知道如何显示这些 非ascii码的东西，所以就乱码显示。&lt;/p&gt;
&lt;h1 id=&quot;数字的机器表示&quot;&gt;&lt;a href=&quot;#数字的机器表示&quot; class=&quot;headerlink&quot; title=&quot;数字的机器表示&quot;&gt;&lt;/a&gt;数字的机器表示&lt;/h1&gt;&lt;p&gt;数字的机器表示和 实际的整数和实数是不同的，它们是对真值的有限近似值。&lt;/p&gt;
&lt;h1 id=&quot;汇编语言&quot;&gt;&lt;a href=&quot;#汇编语言&quot; class=&quot;headerlink&quot; title=&quot;汇编语言&quot;&gt;&lt;/a&gt;汇编语言&lt;/h1&gt;&lt;p&gt;C编译器和Fortran编译器 产生的 汇编语言是一样的。&lt;/p&gt;
&lt;h1 id=&quot;编译系统&quot;&gt;&lt;a href=&quot;#编译系统&quot; class=&quot;headerlink&quot; title=&quot;编译系统&quot;&gt;&lt;/a&gt;编译系统&lt;/h1&gt;&lt;p&gt;编译系统将 源文件 -&amp;gt; 可执行文件&lt;/p&gt;
&lt;h1 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h1&gt;&lt;p&gt;进程使得 操作系统可以 同时运行多个程序。&lt;/p&gt;
&lt;h1 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;p&gt;文件就是字节序列， 每个I/O设备，键盘，显示器，网络都是文件。&lt;/p&gt;
&lt;h1 id=&quot;系统之间利用网络通信&quot;&gt;&lt;a href=&quot;#系统之间利用网络通信&quot; class=&quot;headerlink&quot; title=&quot;系统之间利用网络通信&quot;&gt;&lt;/a&gt;系统之间利用网络通信&lt;/h1&gt;&lt;p&gt;通过网络接口，字节从一台电脑传递到了另一他电脑，开启了Internet。从此单机也变得更有用。&lt;/p&gt;
&lt;h1 id=&quot;故事开始&quot;&gt;&lt;a href=&quot;#故事开始&quot; class=&quot;headerlink&quot; title=&quot;故事开始&quot;&gt;&lt;/a&gt;故事开始&lt;/h1&gt;&lt;p&gt;Hello everybody out there using minix -&lt;/p&gt;
&lt;p&gt;I’m doing a (free) operating system (just a hobby, won’t be big and professional like gnu) for 386(486) AT clones. This has been brewing since april, and is starting to get ready. I’d like any feedback on things people like/dislike in minix, as my OS resembles it somewhat (same physical layout of the file-system (due to practical reasons) among other things).&lt;/p&gt;
&lt;p&gt;I’ve currently ported bash(1.08) and gcc(1.40), and things seem to work. This implies that I’ll get something practical within a few months, and I’d like to know what features most people would want. Any suggestions are welcome, but I won’t promise I’ll implement them :-)&lt;/p&gt;
&lt;p&gt;Linus (torvalds@kruuna.helsinki.fi)&lt;/p&gt;
&lt;p&gt;PS. Yes - it’s free of any minix code, and it has a multi-threaded fs. It is NOT portable (uses 386 task switching etc), and it probably never will support anything other than AT-harddisks, as that’s all I have :-(.&lt;br&gt;— Linus Torvalds[14]&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机系统" scheme="http://www.youletter.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Json本身</title>
    <link href="http://www.youletter.cn/2017/12/06/Json%E6%9C%AC%E8%BA%AB/"/>
    <id>http://www.youletter.cn/2017/12/06/Json本身/</id>
    <published>2017-12-06T14:18:24.000Z</published>
    <updated>2017-12-06T14:40:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://json.org/" target="_blank" rel="external">Introducing JSON</a></p><p><a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf" target="_blank" rel="external">ECMA262</a></p><p>Json 已然成了互联网信息交换的标准方式，但由于json太简单了，不用学习也可以使用。</p><p>正因为很简单 ，才可以很快学一下。</p><p>json中的值一共有7种</p><ul><li>字符串</li><li>数字</li><li>数组</li><li>true</li><li>false</li><li>null</li><li>对象</li></ul><h1 id="对象object是什么"><a href="#对象object是什么" class="headerlink" title="对象object是什么"></a>对象object是什么</h1><p>{}<br>或者<br>{ members }</p><h1 id="members是什么"><a href="#members是什么" class="headerlink" title="members是什么"></a>members是什么</h1><p>pair<br>或者<br>pair , members</p><h1 id="pair是什么"><a href="#pair是什么" class="headerlink" title="pair是什么"></a>pair是什么</h1><p>string : value</p><h1 id="array是什么"><a href="#array是什么" class="headerlink" title="array是什么"></a>array是什么</h1><p>[] 或者<br>[members]</p><h1 id="elements是什么"><a href="#elements是什么" class="headerlink" title="elements是什么"></a>elements是什么</h1><p>value<br>或者<br>value , elements</p><h1 id="value是什么"><a href="#value是什么" class="headerlink" title="value是什么"></a>value是什么</h1><p>string<br>number<br>object<br>array<br>true<br>false<br>null</p><hr><h1 id="string是什么"><a href="#string是什么" class="headerlink" title="string是什么"></a>string是什么</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&quot;&quot;或者</div><div class="line">&quot; chars &quot;</div></pre></td></tr></table></figure><h1 id="chars是什么"><a href="#chars是什么" class="headerlink" title="chars是什么"></a>chars是什么</h1><p>char或者<br>char chars</p><h1 id="char是什么"><a href="#char是什么" class="headerlink" title="char是什么"></a>char是什么</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">任何Unicode字符，除了  &quot; , /, \ , 控制字符</div></pre></td></tr></table></figure><h1 id="什么是number"><a href="#什么是number" class="headerlink" title="什么是number"></a>什么是number</h1><p>int，小数，e</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://json.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Introducing JSON&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ECMA262&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Json 已然成了互联网信息交换的标准方式，但由于json太简单了，不用学习也可以使用。&lt;/p&gt;
&lt;p&gt;正因为很简单 ，才可以很快学一下。&lt;/p&gt;
&lt;p&gt;json中的值一共有7种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字符串&lt;/li&gt;
&lt;li&gt;数字&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;true&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;对象object是什么&quot;&gt;&lt;a href=&quot;#对象object是什么&quot; class=&quot;headerlink&quot; title=&quot;对象object是什么&quot;&gt;&lt;/a&gt;对象object是什么&lt;/h1&gt;&lt;p&gt;{}&lt;br&gt;或者&lt;br&gt;{ members }&lt;/p&gt;
&lt;h1 id=&quot;members是什么&quot;&gt;&lt;a href=&quot;#members是什么&quot; class=&quot;headerlink&quot; title=&quot;members是什么&quot;&gt;&lt;/a&gt;members是什么&lt;/h1&gt;&lt;p&gt;pair&lt;br&gt;或者&lt;br&gt;pair , members&lt;/p&gt;
&lt;h1 id=&quot;pair是什么&quot;&gt;&lt;a href=&quot;#pair是什么&quot; class=&quot;headerlink&quot; title=&quot;pair是什么&quot;&gt;&lt;/a&gt;pair是什么&lt;/h1&gt;&lt;p&gt;string : value&lt;/p&gt;
&lt;h1 id=&quot;array是什么&quot;&gt;&lt;a href=&quot;#array是什么&quot; class=&quot;headerlink&quot; title=&quot;array是什么&quot;&gt;&lt;/a&gt;array是什么&lt;/h1&gt;&lt;p&gt;[] 或者&lt;br&gt;[members]&lt;/p&gt;
&lt;h1 id=&quot;elements是什么&quot;&gt;&lt;a href=&quot;#elements是什么&quot; class=&quot;headerlink&quot; title=&quot;elements是什么&quot;&gt;&lt;/a&gt;elements是什么&lt;/h1&gt;&lt;p&gt;value&lt;br&gt;或者&lt;br&gt;value , elements&lt;/p&gt;
&lt;h1 id=&quot;value是什么&quot;&gt;&lt;a href=&quot;#value是什么&quot; class=&quot;headerlink&quot; title=&quot;value是什么&quot;&gt;&lt;/a&gt;value是什么&lt;/h1&gt;&lt;p&gt;string&lt;br&gt;number&lt;br&gt;object&lt;br&gt;array&lt;br&gt;true&lt;br&gt;false&lt;br&gt;null&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;string是什么&quot;&gt;&lt;a href=&quot;#string是什么&quot; class=&quot;headerlink&quot; title=&quot;string是什么&quot;&gt;&lt;/a&gt;string是什么&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;quot;或者&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot; chars &amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;chars是什么&quot;&gt;&lt;a href=&quot;#chars是什么&quot; class=&quot;headerlink&quot; title=&quot;chars是什么&quot;&gt;&lt;/a&gt;chars是什么&lt;/h1&gt;&lt;p&gt;char或者&lt;br&gt;char chars&lt;/p&gt;
&lt;h1 id=&quot;char是什么&quot;&gt;&lt;a href=&quot;#char是什么&quot; class=&quot;headerlink&quot; title=&quot;char是什么&quot;&gt;&lt;/a&gt;char是什么&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;任何Unicode字符，除了  &amp;quot; , /, \ , 控制字符&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;什么是number&quot;&gt;&lt;a href=&quot;#什么是number&quot; class=&quot;headerlink&quot; title=&quot;什么是number&quot;&gt;&lt;/a&gt;什么是number&lt;/h1&gt;&lt;p&gt;int，小数，e&lt;/p&gt;
    
    </summary>
    
    
      <category term="json" scheme="http://www.youletter.cn/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Java对象的序列化和反序列化example</title>
    <link href="http://www.youletter.cn/2017/12/06/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96example/"/>
    <id>http://www.youletter.cn/2017/12/06/Java对象的序列化和反序列化example/</id>
    <published>2017-12-06T14:14:09.000Z</published>
    <updated>2017-12-06T14:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>#参考<br><a href="http://youletter.cn/2017/11/16/4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%B0%86String%E8%BD%AC%E4%B8%BAJSON/" target="_blank" rel="external">Java中4种方法将String转为JSON</a></p><h1 id="gson"><a href="#gson" class="headerlink" title="gson"></a>gson</h1><p>序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">KpkToken token = new KpkToken();</div><div class="line">token.setAccess_token(&quot;1234&quot;);</div><div class="line">token.setClientName(&quot;kpk&quot;);</div><div class="line"></div><div class="line"></div><div class="line">Gson g = new Gson();</div><div class="line">String s1 = g.toJson(token);</div><div class="line">System.out.println(s1);</div></pre></td></tr></table></figure><h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><p>序列化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">KpkToken token = new KpkToken();</div><div class="line">token.setAccess_token(&quot;1234&quot;);</div><div class="line">token.setClientName(&quot;kpk&quot;);</div><div class="line"></div><div class="line">ObjectMapper mapper = new ObjectMapper();</div><div class="line">String s2 = mapper.writeValueAsString(token);</div><div class="line">System.out.println(s2);</div></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#参考&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/11/16/4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%B0%86String%E8%BD%AC%E4%B8%BAJSON/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java中4种方法将String转为JSON&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;gson&quot;&gt;&lt;a href=&quot;#gson&quot; class=&quot;headerlink&quot; title=&quot;gson&quot;&gt;&lt;/a&gt;gson&lt;/h1&gt;&lt;p&gt;序列化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;KpkToken token = new KpkToken();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;token.setAccess_token(&amp;quot;1234&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;token.setClientName(&amp;quot;kpk&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Gson g = new Gson();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s1 = g.toJson(token);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(s1);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Jackson&quot;&gt;&lt;a href=&quot;#Jackson&quot; class=&quot;headerlink&quot; title=&quot;Jackson&quot;&gt;&lt;/a&gt;Jackson&lt;/h1&gt;&lt;p&gt;序列化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;KpkToken token = new KpkToken();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;token.setAccess_token(&amp;quot;1234&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;token.setClientName(&amp;quot;kpk&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ObjectMapper mapper = new ObjectMapper();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String s2 = mapper.writeValueAsString(token);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;System.out.println(s2);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.youletter.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot中修改默认的HttpMessageConverter为GsonHttpMessageConverter</title>
    <link href="http://www.youletter.cn/2017/12/06/spring-boot%E4%B8%AD%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84HttpMessageConverter%E4%B8%BAGsonHttpMessageConverter/"/>
    <id>http://www.youletter.cn/2017/12/06/spring-boot中修改默认的HttpMessageConverter为GsonHttpMessageConverter/</id>
    <published>2017-12-06T09:15:04.000Z</published>
    <updated>2017-12-06T14:03:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring boot的 rest接口中，如果 返回一个对象，那么，Spring-boot会自动将对象序列化，然后返回json。</p><p>这个用的一直很好，直到 一次，我修改 getter方法的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class KpkToken2 &#123;</div><div class="line">    String access_token;</div><div class="line">    String ClientName;</div><div class="line"></div><div class="line">    public String getAccessToken() &#123;</div><div class="line">        return access_token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getA1() &#123;</div><div class="line">        return access_token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getA2() &#123;</div><div class="line">        return access_token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccess_token(String access_token) &#123;</div><div class="line">        this.access_token = access_token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setAccessToken(String access_token) &#123;</div><div class="line">        this.access_token = access_token;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getClientName() &#123;</div><div class="line">        return ClientName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setClientName(String clientName) &#123;</div><div class="line">        ClientName = clientName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如上这个 java对象， 用 Gson 和 jackson 序列化后的结果不一样。</p><p>用Gson 序列化后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;access_token&quot;:&quot;1234&quot;,</div><div class="line">    &quot;ClientName&quot;:&quot;kpk&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用jackson 序列化后的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;clientName&quot;:&quot;kpk&quot;,</div><div class="line">    &quot;a1&quot;:&quot;1234&quot;,</div><div class="line">    &quot;accxxxxxxdfndfjdkdessToken&quot;:&quot;1234&quot;,</div><div class="line">    &quot;a2&quot;:&quot;1234&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从结果可以看出 ：<br>Gson 序列化时， 是按照 对象中的 field来 确定 json中的key的。<br>而 jackson 序列化时，是根据getter方法来确定 json中的key的。</p><p>所以，当写好字段之后， 用IDEA直接 生成setter/getter 方法后 ，这时，Gson和Jackson的序列化结果是一样的。 但是如果你的 getter方法名字 自己修改过。那么 jackson 序列化后的 结果就 随着 getter方法的名字而改变了。 这一点需要注意。</p><h1 id="spring-boot中默认的HttpMessageConverter"><a href="#spring-boot中默认的HttpMessageConverter" class="headerlink" title="spring-boot中默认的HttpMessageConverter"></a>spring-boot中默认的HttpMessageConverter</h1><p>我们发现，在RestController中直接返回对象， 得到的是序列化的结果 ，spring-boot中默认的  转化器是 MappingJackson2HttpMessageConverter， 也就是用jackson来序列化的。 如果修改成gson的呢？</p><p>直接上代码， 在你的项目中，增加这个配置文件， 就可以将默认的HttpMessageConverter 换成gson了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableWebMvc</div><div class="line">public class AppConfig extends WebMvcConfigurerAdapter &#123;</div><div class="line">    @Override</div><div class="line">    public void configureMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123;</div><div class="line">        GsonHttpMessageConverter msgConverter = new GsonHttpMessageConverter();</div><div class="line">        Gson gson = new GsonBuilder().setPrettyPrinting().create();</div><div class="line">        msgConverter.setGson(gson);</div><div class="line">        converters.add(msgConverter);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="EnableWebMvc"><a href="#EnableWebMvc" class="headerlink" title="EnableWebMvc"></a>EnableWebMvc</h1><p>这里面用到一个注解， 这是当需要修改 spring mvn的默认配置时，可以这样来重写一些设置。 即重写WebMvcConfigurerAdapter中的接口。</p><a id="more"></a><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.concretepage.com/spring-4/spring-4-mvc-gsonhttpmessageconverter-example-with-configuremessageconverters" target="_blank" rel="external">Spring 4 MVC GsonHttpMessageConverter Example with configureMessageConverters()</a></p><p><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/EnableWebMvc.html" target="_blank" rel="external">EnableWebMvc</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Spring boot的 rest接口中，如果 返回一个对象，那么，Spring-boot会自动将对象序列化，然后返回json。&lt;/p&gt;
&lt;p&gt;这个用的一直很好，直到 一次，我修改 getter方法的名字&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;public class KpkToken2 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    String ClientName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String getAccessToken() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String getA1() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String getA2() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void setAccess_token(String access_token) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.access_token = access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void setAccessToken(String access_token) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        this.access_token = access_token;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public String getClientName() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return ClientName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void setClientName(String clientName) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ClientName = clientName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上这个 java对象， 用 Gson 和 jackson 序列化后的结果不一样。&lt;/p&gt;
&lt;p&gt;用Gson 序列化后的结果&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;access_token&amp;quot;:&amp;quot;1234&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ClientName&amp;quot;:&amp;quot;kpk&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用jackson 序列化后的结果&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;clientName&amp;quot;:&amp;quot;kpk&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;a1&amp;quot;:&amp;quot;1234&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;accxxxxxxdfndfjdkdessToken&amp;quot;:&amp;quot;1234&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;a2&amp;quot;:&amp;quot;1234&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从结果可以看出 ：&lt;br&gt;Gson 序列化时， 是按照 对象中的 field来 确定 json中的key的。&lt;br&gt;而 jackson 序列化时，是根据getter方法来确定 json中的key的。&lt;/p&gt;
&lt;p&gt;所以，当写好字段之后， 用IDEA直接 生成setter/getter 方法后 ，这时，Gson和Jackson的序列化结果是一样的。 但是如果你的 getter方法名字 自己修改过。那么 jackson 序列化后的 结果就 随着 getter方法的名字而改变了。 这一点需要注意。&lt;/p&gt;
&lt;h1 id=&quot;spring-boot中默认的HttpMessageConverter&quot;&gt;&lt;a href=&quot;#spring-boot中默认的HttpMessageConverter&quot; class=&quot;headerlink&quot; title=&quot;spring-boot中默认的HttpMessageConverter&quot;&gt;&lt;/a&gt;spring-boot中默认的HttpMessageConverter&lt;/h1&gt;&lt;p&gt;我们发现，在RestController中直接返回对象， 得到的是序列化的结果 ，spring-boot中默认的  转化器是 MappingJackson2HttpMessageConverter， 也就是用jackson来序列化的。 如果修改成gson的呢？&lt;/p&gt;
&lt;p&gt;直接上代码， 在你的项目中，增加这个配置文件， 就可以将默认的HttpMessageConverter 换成gson了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@Configuration&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@EnableWebMvc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class AppConfig extends WebMvcConfigurerAdapter &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void configureMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?&amp;gt;&amp;gt; converters) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        GsonHttpMessageConverter msgConverter = new GsonHttpMessageConverter();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Gson gson = new GsonBuilder().setPrettyPrinting().create();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        msgConverter.setGson(gson);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        converters.add(msgConverter);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;EnableWebMvc&quot;&gt;&lt;a href=&quot;#EnableWebMvc&quot; class=&quot;headerlink&quot; title=&quot;EnableWebMvc&quot;&gt;&lt;/a&gt;EnableWebMvc&lt;/h1&gt;&lt;p&gt;这里面用到一个注解， 这是当需要修改 spring mvn的默认配置时，可以这样来重写一些设置。 即重写WebMvcConfigurerAdapter中的接口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="json" scheme="http://www.youletter.cn/tags/json/"/>
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
      <category term="gson" scheme="http://www.youletter.cn/tags/gson/"/>
    
  </entry>
  
  <entry>
    <title>http header不区分大小写</title>
    <link href="http://www.youletter.cn/2017/12/06/http-header%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
    <id>http://www.youletter.cn/2017/12/06/http-header不区分大小写/</id>
    <published>2017-12-06T02:54:45.000Z</published>
    <updated>2017-12-06T05:53:18.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POST /user/vsignup HTTP/1.1</div><div class="line">Host: 10.1.5.25:10009</div><div class="line">X-ABC-moumou: 12345</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Cache-Control: no-cache</div><div class="line">Postman-Token: bc7eab2d-fd38-9bd5-2c24-e7428d81b1da</div><div class="line"></div><div class="line">mobile=18513174001&amp;channel=1200&amp;</div></pre></td></tr></table></figure><p>header字段 由 字段名: 字段值 组成。<br>字段名是 不区分大小写的。</p><p>参考：<br><a href="https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive" target="_blank" rel="external">https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive</a></p><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2" target="_blank" rel="external">https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;POST /user/vsignup HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Host: 10.1.5.25:10009&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;X-ABC-moumou: 12345&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: application/x-www-form-urlencoded&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cache-Control: no-cache&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Postman-Token: bc7eab2d-fd38-9bd5-2c24-e7428d81b1da&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mobile=18513174001&amp;amp;channel=1200&amp;amp;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;header字段 由 字段名: 字段值 组成。&lt;br&gt;字段名是 不区分大小写的。&lt;/p&gt;
&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://www.youletter.cn/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>spring-boot logging</title>
    <link href="http://www.youletter.cn/2017/12/05/spring-boot-logging/"/>
    <id>http://www.youletter.cn/2017/12/05/spring-boot-logging/</id>
    <published>2017-12-05T01:18:49.000Z</published>
    <updated>2017-12-05T02:36:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文 使用工程 上传至github<br><a href="https://github.com/kunpengku/spring-logging-example" target="_blank" rel="external">spring-logging-example</a></p><p>pom</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><ul><li>在 spring-boot-starter-web中 包含 <ul><li>org.springframework.boot:spring-boot-starter 包含<ul><li>org.springframework.boot:spring-boot-starter-logging 包含<ul><li>ch.qos.logback:logback-classic:1.1.11</li><li>org.slf4j:jcl-over-slf4j:1.7.25</li><li>org.slf4j:jul-to-slf4j:1.7.25</li><li>org.slf4j:log4j-over-slf4j:1.7.25</li></ul></li></ul></li></ul></li></ul><p>所以只要引用spring-boot-starter-web 一个即可。 这就是 starter的意思。</p><h1 id="SLF4J-是接口-，而不是实现。"><a href="#SLF4J-是接口-，而不是实现。" class="headerlink" title="SLF4J 是接口 ，而不是实现。"></a>SLF4J 是接口 ，而不是实现。</h1><p>默认情况下，Spring-boot的日志级别是这样的，<br>logging.level.org.springframework.web可以打印 debug以上的日志 ，<br>其他的 库只能打印 WARN以上的日志。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logging.level.root=WARN</div><div class="line">logging.level.org.springframework.web=DEBUG</div><div class="line">logging.level.org.hibernate=ERROR</div></pre></td></tr></table></figure><p>如果想要看到更多日志 可以把root设置为DEBUG,这样日志会非常多。<br>在application.yml中的设置 有最强的效果。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.level.root=WARN</div></pre></td></tr></table></figure><p>可以在logback.xml中主动 指定某个logger 打印某种日志 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;logger name=&quot;chapters.configuration&quot; level=&quot;INFO&quot; /&gt;</div></pre></td></tr></table></figure><p>如果某个appender 只想 接收某个级别以上的日志  ，可以 增加一个 filter，<br>如下，只接受warn以上的日志，就可以排除 info的日志了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;</div><div class="line">    &lt;file&gt;myApp.log&lt;/file&gt;</div><div class="line"></div><div class="line">    &lt;encoder&gt;</div><div class="line">        &lt;pattern&gt;%date %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;</div><div class="line">    &lt;/encoder&gt;</div><div class="line"></div><div class="line">    &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</div><div class="line">        &lt;level&gt;warn&lt;/level&gt;</div><div class="line">    &lt;/filter&gt;</div><div class="line">&lt;/appender&gt;</div></pre></td></tr></table></figure><p>如果想把自己工程的 日志打印到某一个文件中，可以单独对 logger进行设置。<br>设置日志的去处 和 打印的级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line"></div><div class="line">    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">        &lt;!-- encoders are assigned the type</div><div class="line">             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default --&gt;</div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line"></div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;appender name=&quot;FILE&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;</div><div class="line">        &lt;file&gt;myApp.log&lt;/file&gt;</div><div class="line"></div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%date %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line"></div><div class="line">        &lt;!--&lt;logger name=&quot;&quot; level=&quot;INFO&quot; /&gt;--&gt;</div><div class="line">        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</div><div class="line">            &lt;level&gt;warn&lt;/level&gt;</div><div class="line">        &lt;/filter&gt;</div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;appender name=&quot;FILE2&quot; class=&quot;ch.qos.logback.core.FileAppender&quot;&gt;</div><div class="line">        &lt;file&gt;myApp2.log&lt;/file&gt;</div><div class="line"></div><div class="line">        &lt;encoder&gt;</div><div class="line">            &lt;pattern&gt;%date %level [%thread] %logger&#123;10&#125; [%file:%line] %msg%n&lt;/pattern&gt;</div><div class="line">        &lt;/encoder&gt;</div><div class="line"></div><div class="line">    &lt;/appender&gt;</div><div class="line"></div><div class="line">    &lt;logger name=&quot;com.kunpengku.test_log.Controller&quot; level=&quot;DEBUG&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;FILE2&quot; /&gt;</div><div class="line">    &lt;/logger&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;root level=&quot;INFO&quot;&gt;</div><div class="line">        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class="line">        &lt;appender-ref ref=&quot;FILE&quot; /&gt;</div><div class="line">    &lt;/root&gt;</div><div class="line"></div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文 使用工程 上传至github&lt;br&gt;&lt;a href=&quot;https://github.com/kunpengku/spring-logging-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spring-logging-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;pom&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在 spring-boot-starter-web中 包含 &lt;ul&gt;
&lt;li&gt;org.springframework.boot:spring-boot-starter 包含&lt;ul&gt;
&lt;li&gt;org.springframework.boot:spring-boot-starter-logging 包含&lt;ul&gt;
&lt;li&gt;ch.qos.logback:logback-classic:1.1.11&lt;/li&gt;
&lt;li&gt;org.slf4j:jcl-over-slf4j:1.7.25&lt;/li&gt;
&lt;li&gt;org.slf4j:jul-to-slf4j:1.7.25&lt;/li&gt;
&lt;li&gt;org.slf4j:log4j-over-slf4j:1.7.25&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以只要引用spring-boot-starter-web 一个即可。 这就是 starter的意思。&lt;/p&gt;
&lt;h1 id=&quot;SLF4J-是接口-，而不是实现。&quot;&gt;&lt;a href=&quot;#SLF4J-是接口-，而不是实现。&quot; class=&quot;headerlink&quot; title=&quot;SLF4J 是接口 ，而不是实现。&quot;&gt;&lt;/a&gt;SLF4J 是接口 ，而不是实现。&lt;/h1&gt;&lt;p&gt;默认情况下，Spring-boot的日志级别是这样的，&lt;br&gt;logging.level.org.springframework.web可以打印 debug以上的日志 ，&lt;br&gt;其他的 库只能打印 WARN以上的日志。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;logging.level.root=WARN&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logging.level.org.springframework.web=DEBUG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logging.level.org.hibernate=ERROR&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想要看到更多日志 可以把root设置为DEBUG,这样日志会非常多。&lt;br&gt;在application.yml中的设置 有最强的效果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-boot参考（三） 配置</title>
    <link href="http://www.youletter.cn/2017/12/03/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%89%EF%BC%89-%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.youletter.cn/2017/12/03/Spring-boot参考（三）-配置/</id>
    <published>2017-12-03T06:34:04.000Z</published>
    <updated>2017-12-03T06:35:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h1><p>开启debug开关可以查看更多的信息</p><p>java -jar myproject-0.0.1-SNAPSHOT.jar –debug<br>或者<br>在application.yml 中<br>debug: true</p><h1 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h1><p>banner.txt在classpath下增加这个文件，可以替换掉启动Spring的 图案。</p><p><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-banner" target="_blank" rel="external">Customizing the Banner</a></p><p>配置文件就是 环境变量。</p><h1 id="在程序启动时-执行一些方法"><a href="#在程序启动时-执行一些方法" class="headerlink" title="在程序启动时 执行一些方法"></a>在程序启动时 执行一些方法</h1><p>实现 ApplicationRunner or CommandLineRunner 接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class MyBean2 implements ApplicationRunner &#123;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void run(ApplicationArguments args) throws Exception &#123;</div><div class="line">        System.out.println(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>or</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class MyBean implements CommandLineRunner &#123;</div><div class="line"></div><div class="line">    public void run(String... args) &#123;</div><div class="line">        // Do something...</div><div class="line">        System.out.println(&quot;hello&quot;);</div><div class="line">        System.out.println(args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h1 id="修改程序退出的-返回值"><a href="#修改程序退出的-返回值" class="headerlink" title="修改程序退出的 返回值"></a>修改程序退出的 返回值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">public class ExitCodeApplication &#123;</div><div class="line"></div><div class="line">@Bean</div><div class="line">public ExitCodeGenerator exitCodeGenerator() &#123;</div><div class="line">return () -&gt; 42;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">System.exit(SpringApplication</div><div class="line">.exit(SpringApplication.run(ExitCodeApplication.class, args)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Spring boot 配置参数的 加载顺序</p><ol><li>Devtools global settings properties on your home directory<br>(~/.spring-boot-devtools.properties when devtools is active).</li><li><p>@TestPropertySource annotations on your tests.</p></li><li><p>@SpringBootTest#properties annotation attribute on your tests.</p></li><li><p>Command line arguments. </p></li><li>Properties from SPRING_APPLICATION_JSON<br>(inline JSON embedded in an environment variable or system</li><li>ServletConfig init parameters. </li><li>ServletContext init parameters. </li><li>JNDI attributes from java:comp/env.  </li><li>Java System properties (System.getProperties()).  </li><li>OS environment variables.  </li><li>A RandomValuePropertySource that only has properties in random.*.</li><li><p>Profile-specific application properties outside of your packaged jar<br>(application-{profile}.properties and YAML variants).</p></li><li><p>Profile-specific application properties packaged inside your jar<br>(application-{profile}.properties and YAML variants). </p></li><li>Application properties outside of your packaged jar (application.properties and YAML variants). </li><li>Application properties packaged inside your jar<br>(application.properties and YAML variants). </li><li>@PropertySource<br>annotations on your @Configuration classes. </li><li>Default properties<br>(specified using SpringApplication.setDefaultProperties).</li></ol><h1 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my.secret=$&#123;random.value&#125;</div><div class="line">my.number=$&#123;random.int&#125;</div><div class="line">my.bignumber=$&#123;random.long&#125;</div><div class="line">my.uuid=$&#123;random.uuid&#125;</div><div class="line">my.number.less.than.ten=$&#123;random.int(10)&#125;</div><div class="line">my.number.in.range=$&#123;random.int[1024,65536]&#125;</div></pre></td></tr></table></figure><h1 id="配置-SpringApplication"><a href="#配置-SpringApplication" class="headerlink" title="配置 SpringApplication"></a>配置 SpringApplication</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication app = new SpringApplication(MySpringConfiguration.class);</div><div class="line">app.setBannerMode(Banner.Mode.OFF);</div><div class="line">app.run(args);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>默认会从 application.properties 这个文件中读取配置 </p><p>这个文件放在</p><ul><li>A /config subdirectory of the current directory.</li><li>The current directory</li><li>A classpath /config package</li><li>The classpath root<br>这几个位置都可以。</li></ul><h1 id="类型安全的-配置-ConfigurationProperties"><a href="#类型安全的-配置-ConfigurationProperties" class="headerlink" title="类型安全的 配置 ConfigurationProperties"></a>类型安全的 配置 ConfigurationProperties</h1><p>@Value(“${property}”) 可能会造成类型的不安全， 所以提供了<br>ConfigurationProperties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@ConfigurationProperties(&quot;foo&quot;)</div><div class="line">public class FooProperties &#123;</div><div class="line"></div><div class="line">private boolean enabled;</div><div class="line"></div><div class="line">private InetAddress remoteAddress;</div><div class="line"></div><div class="line">private final Security security = new Security();</div><div class="line"></div><div class="line">public boolean isEnabled() &#123; ... &#125;</div><div class="line"></div><div class="line">public void setEnabled(boolean enabled) &#123; ... &#125;</div><div class="line"></div><div class="line">public InetAddress getRemoteAddress() &#123; ... &#125;</div><div class="line"></div><div class="line">public void setRemoteAddress(InetAddress remoteAddress) &#123; ... &#125;</div><div class="line"></div><div class="line">public Security getSecurity() &#123; ... &#125;</div><div class="line"></div><div class="line">public static class Security &#123;</div><div class="line"></div><div class="line">private String username;</div><div class="line"></div><div class="line">private String password;</div><div class="line"></div><div class="line">private List&lt;String&gt; roles = new ArrayList&lt;&gt;(Collections.singleton(&quot;USER&quot;));</div><div class="line"></div><div class="line">public String getUsername() &#123; ... &#125;</div><div class="line"></div><div class="line">public void setUsername(String username) &#123; ... &#125;</div><div class="line"></div><div class="line">public String getPassword() &#123; ... &#125;</div><div class="line"></div><div class="line">public void setPassword(String password) &#123; ... &#125;</div><div class="line"></div><div class="line">public List&lt;String&gt; getRoles() &#123; ... &#125;</div><div class="line"></div><div class="line">public void setRoles(List&lt;String&gt; roles) &#123; ... &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ConfigurationProperties 需要设置setter方法。</p><h1 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active=dev,hsqldb</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;debug&quot;&gt;&lt;a href=&quot;#debug&quot; class=&quot;headerlink&quot; title=&quot;debug&quot;&gt;&lt;/a&gt;debug&lt;/h1&gt;&lt;p&gt;开启debug开关可以查看更多的信息&lt;/p&gt;
&lt;p&gt;java -jar myproject-0.0.1-SNAPSHOT.jar –debug&lt;br&gt;或者&lt;br&gt;在application.yml 中&lt;br&gt;debug: true&lt;/p&gt;
&lt;h1 id=&quot;banner&quot;&gt;&lt;a href=&quot;#banner&quot; class=&quot;headerlink&quot; title=&quot;banner&quot;&gt;&lt;/a&gt;banner&lt;/h1&gt;&lt;p&gt;banner.txt在classpath下增加这个文件，可以替换掉启动Spring的 图案。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-banner&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Customizing the Banner&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置文件就是 环境变量。&lt;/p&gt;
&lt;h1 id=&quot;在程序启动时-执行一些方法&quot;&gt;&lt;a href=&quot;#在程序启动时-执行一些方法&quot; class=&quot;headerlink&quot; title=&quot;在程序启动时 执行一些方法&quot;&gt;&lt;/a&gt;在程序启动时 执行一些方法&lt;/h1&gt;&lt;p&gt;实现 ApplicationRunner or CommandLineRunner 接口。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@Component&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class MyBean2 implements ApplicationRunner &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void run(ApplicationArguments args) throws Exception &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@Component&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class MyBean implements CommandLineRunner &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void run(String... args) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Do something...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&amp;quot;hello&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring-boot" scheme="http://www.youletter.cn/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-boot参考（二）</title>
    <link href="http://www.youletter.cn/2017/12/02/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.youletter.cn/2017/12/02/Spring-boot参考（二）/</id>
    <published>2017-12-02T12:40:29.000Z</published>
    <updated>2017-12-02T12:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring-boot参考系列<br><a href="http://youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">Spring-boot参考（一）</a><br><a href="http://youletter.cn/2017/12/02/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">Spring-boot参考（二）</a></p><h1 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h1><p>继承starter parent<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div></pre></td></tr></table></figure></p><p>在parent中，还定义了 其他许多 依赖的版本，如果 想要改变其中某个的话，就应该在properties中 指定其版本，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;spring-data-releasetrain.version&gt;Fowler-SR2&lt;/spring-data-releasetrain.version&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure></p><p>其他支持的属性 可以查看，<a href="https://github.com/spring-projects/spring-boot/blob/v1.5.9.RELEASE/spring-boot-dependencies/pom.xml" target="_blank" rel="external">spring-boot-dependencies</a></p><h2 id="不使用parent-POM"><a href="#不使用parent-POM" class="headerlink" title="不使用parent POM"></a>不使用parent POM</h2><p>可能你不想使用parent，或者已经使用了其他parent。 还有一种方法可以用到 spring boot的依赖，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">     &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;!-- Import dependency management from Spring Boot --&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure></p><p>这是想要改变 spring-boot-dependencies 中的某个 库的版本号 ，应该用下面的方法， 将要改变的部分放在前面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;!-- Override Spring Data release train provided by Spring Boot --&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-data-releasetrain&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Fowler-SR2&lt;/version&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure><p>spring boot 1.5.x 默认支持的JDK 1.6， 如果你想指定 1.8的话，加上一个属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">&lt;/properties&gt;</div></pre></td></tr></table></figure></p><a id="more"></a><h2 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h2><p>spring boot提供一个 maven plugin 来生成一个可执行的包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure><p>默认 mvn package 之后 生成的 文件名是 artifactId + version 如：test1-0.0.1-SNAPSHOT.jar  . 如果想生成的文件名就叫 test1，  可以在build中加一个属性 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">&lt;finalName&gt;test&lt;/finalName&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure><h1 id="Starters"><a href="#Starters" class="headerlink" title="Starters"></a>Starters</h1><p>Starters 是一组 相关的包，这样做是 便于 添加依赖。<br>名字一般是 spring-boot-starter-* 。 </p><p>spring 提供了很多starters 都在 org.springframework.boot GroupId下 ，详细见 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter" target="_blank" rel="external">Spring Boot application starters</a></p><p>spring-boot-starter-actuator 这个包在生产环境很有用，提供一些监控方面的支持</p><h1 id="结构化代码"><a href="#结构化代码" class="headerlink" title="结构化代码"></a>结构化代码</h1><h2 id="1-要有包名"><a href="#1-要有包名" class="headerlink" title="1 要有包名"></a>1 要有包名</h2><h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>这个注解的作用是，指定basePackage，这样Spring就知道去哪里扫描了。</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>被用在一些配置类上， Spring boot 不再鼓励xml的配置方式，而是使用Java代码来配置。 可以写一些单独的类，来进行配置， 这些类上，加上这个注解。</p><h2 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h2><p>使用<br>@EnableAutoConfiguration 或者 @SpringBootApplication，将开启自动配置功能。<br>自动配置的意思就是，如果你的classpath下有redis的包，即使你自己没有 配置redis ，Spring也会自觉的 连接 localhost:6379 ，来实例化一个RedisConnectionFactory。 这有时会很方便，有时很自以为是很讨厌。</p><p>在application.yml 中 设置 debug=true, 在Spring启动时， 会打印出 自动配置了哪些类。</p><p>有时候自动配置很讨厌，可以关闭它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableAutoConfiguration(exclude=&#123;DataSourceAutoConfiguration.class&#125;)</div><div class="line">public class MyConfiguration &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>或者使用spring.autoconfigure.exclude 属性在application.yml中。</p><p>如果Bean只有一个 构造函数， 可以省略 构造函数上的 @Autowired。</p><h1 id="SpringBootApplication-1"><a href="#SpringBootApplication-1" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h1><p>因为 Spring boot的主函数上 总是有 @Configuration, @EnableAutoConfiguration and @ComponentScan 这三个注解， 于是Springboot 提供了一个新的注解 @SpringBootApplication 来等效表示这三个注解。</p><h1 id="如何运行程序"><a href="#如何运行程序" class="headerlink" title="如何运行程序"></a>如何运行程序</h1><h2 id="1，在IDE运行，这样方便调试。"><a href="#1，在IDE运行，这样方便调试。" class="headerlink" title="1，在IDE运行，这样方便调试。"></a>1，在IDE运行，这样方便调试。</h2><h2 id="2-打成jar包"><a href="#2-打成jar包" class="headerlink" title="2 , 打成jar包"></a>2 , 打成jar包</h2><p>java -jar target/myproject-0.0.1-SNAPSHOT.jar</p><p>在生产环境时， 需要再多加一些参数，修改内存，堆栈之类。</p><h2 id="3-用mvn运行"><a href="#3-用mvn运行" class="headerlink" title="3 用mvn运行"></a>3 用mvn运行</h2><p>mvn spring-boot:run</p><h1 id="自动重启"><a href="#自动重启" class="headerlink" title="自动重启"></a>自动重启</h1><p>在开发时候 ，修改一个地方，往往需要重新启动。<br>增加下面这个依赖，可以自动监听 classpath下的文件，有变动时，自动重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</div><div class="line">&lt;optional&gt;true&lt;/optional&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>IDEA中，出发重启的方法是，修改完文件后 Build -&gt; Make Project。 </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring-boot参考系列&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring-boot参考（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/12/02/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring-boot参考（二）&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;依赖管理&quot;&gt;&lt;a href=&quot;#依赖管理&quot; class=&quot;headerlink&quot; title=&quot;依赖管理&quot;&gt;&lt;/a&gt;依赖管理&lt;/h1&gt;&lt;p&gt;继承starter parent&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在parent中，还定义了 其他许多 依赖的版本，如果 想要改变其中某个的话，就应该在properties中 指定其版本，如：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;spring-data-releasetrain.version&amp;gt;Fowler-SR2&amp;lt;/spring-data-releasetrain.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其他支持的属性 可以查看，&lt;a href=&quot;https://github.com/spring-projects/spring-boot/blob/v1.5.9.RELEASE/spring-boot-dependencies/pom.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;spring-boot-dependencies&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;不使用parent-POM&quot;&gt;&lt;a href=&quot;#不使用parent-POM&quot; class=&quot;headerlink&quot; title=&quot;不使用parent POM&quot;&gt;&lt;/a&gt;不使用parent POM&lt;/h2&gt;&lt;p&gt;可能你不想使用parent，或者已经使用了其他parent。 还有一种方法可以用到 spring boot的依赖，即：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;!-- Import dependency management from Spring Boot --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是想要改变 spring-boot-dependencies 中的某个 库的版本号 ，应该用下面的方法， 将要改变的部分放在前面：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;!-- Override Spring Data release train provided by Spring Boot --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-data-releasetrain&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;version&amp;gt;Fowler-SR2&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;version&amp;gt;1.5.9.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;spring boot 1.5.x 默认支持的JDK 1.6， 如果你想指定 1.8的话，加上一个属性&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring initializr使用</title>
    <link href="http://www.youletter.cn/2017/12/02/Spring-initializr%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.youletter.cn/2017/12/02/Spring-initializr使用/</id>
    <published>2017-12-02T00:54:21.000Z</published>
    <updated>2017-12-02T00:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring initializr 是Spring 官方提供的一个很好的工具，用来初始化一个Spring boot 的项目。</p><p>有两种方式可以使用Spring initializr来创建一个项目</p><ul><li><p><a href="http://start.spring.io/" target="_blank" rel="external">http://start.spring.io/</a> 登录该网站，填写项目信息，选择依赖后，点击 Generate Project，然后下载一个该项目的压缩包。下一步是将这个压缩包解压，然后在Idea中，File-&gt;New-&gt;Project from existing sources,选择好文件夹后， 点击OK，在Import Project中，选择Import project from external model， 默认是用Maven工程，选择Maven，点击Next，下面看情况，一路Next，JDK选择JDK8，到Finish，点击Finish。工程就建立好。 刚开始，可能会下载 很多依赖，稍等一会。这样工程就建立好了。</p></li><li><p>另一种方法，其实 Spring initializr 已经默认集成到Idea中了，直接 File-&gt;New-&gt;Project, 在左侧就能看到Spring initializr， 点击Next 就可以选择组件。 但是，由于某些原因，<a href="http://start.spring.io" target="_blank" rel="external">http://start.spring.io</a> 这个网站上不去 ，所以，直接就超时失败了。</p></li></ul><p>包括在用第一种方法<a href="http://start.spring.io" target="_blank" rel="external">http://start.spring.io</a> 登录该网站时，可能也是需要科学上网的。</p><p>来源： <a href="www.youletter.cn">由来</a><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring initializr 是Spring 官方提供的一个很好的工具，用来初始化一个Spring boot 的项目。&lt;/p&gt;
&lt;p&gt;有两种方式可以使用Spring initializr来创建一个项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://start.spring.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://start.spring.io/&lt;/a&gt; 登录该网站，填写项目信息，选择依赖后，点击 Generate Project，然后下载一个该项目的压缩包。下一步是将这个压缩包解压，然后在Idea中，File-&amp;gt;New-&amp;gt;Project from existing sources,选择好文件夹后， 点击OK，在Import Project中，选择Import project from external model， 默认是用Maven工程，选择Maven，点击Next，下面看情况，一路Next，JDK选择JDK8，到Finish，点击Finish。工程就建立好。 刚开始，可能会下载 很多依赖，稍等一会。这样工程就建立好了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;另一种方法，其实 Spring initializr 已经默认集成到Idea中了，直接 File-&amp;gt;New-&amp;gt;Project, 在左侧就能看到Spring initializr， 点击Next 就可以选择组件。 但是，由于某些原因，&lt;a href=&quot;http://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://start.spring.io&lt;/a&gt; 这个网站上不去 ，所以，直接就超时失败了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;包括在用第一种方法&lt;a href=&quot;http://start.spring.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://start.spring.io&lt;/a&gt; 登录该网站时，可能也是需要科学上网的。&lt;/p&gt;
&lt;p&gt;来源： &lt;a href=&quot;www.youletter.cn&quot;&gt;由来&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Spring-boot" scheme="http://www.youletter.cn/tags/Spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>jenkins(一)-安装</title>
    <link href="http://www.youletter.cn/2017/12/01/jenkins-%E4%B8%80-%E5%AE%89%E8%A3%85/"/>
    <id>http://www.youletter.cn/2017/12/01/jenkins-一-安装/</id>
    <published>2017-12-01T15:24:02.000Z</published>
    <updated>2017-12-01T15:24:25.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="jenkins" scheme="http://www.youletter.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>spring data redis(一 对象序列化存入redis)</title>
    <link href="http://www.youletter.cn/2017/11/30/spring-data-redis-%E4%B8%80/"/>
    <id>http://www.youletter.cn/2017/11/30/spring-data-redis-一/</id>
    <published>2017-11-30T03:16:28.000Z</published>
    <updated>2017-12-01T02:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>spring data redis 是Spring对Redis支持的解决方案。<br>对于Spring boot 只要增加下面这个 依赖即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>这个包 整合了jedis 和 Spring-data-redis 两个主要的包。</p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h2><p>使用redis首先要连接redis， RedisConnection 和 RedisConnectionFactory 是两个主要的接口。</p><h1 id="RedisConnection"><a href="#RedisConnection" class="headerlink" title="RedisConnection"></a>RedisConnection</h1><p>RedisConnection为Redis通信提供构建块，因为它处理与Redis后端的通信。<br>RedisConnection提供了底层的方法，可以与redis通信，这些方法的 输入和返回都是二进制的值，即 byte [],  直接使用RedisConnection的话，需要 在调用方法时，自己处理 序列化和反序列化的问题。 比如 get()是， 需要把 String类型的key先 转成byte[] 的。</p><h1 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h1><p>与此对应，RedisTemplate提供比较 high-level的，更抽象的方法。比如 RedisTemplate可以在配置中，指定 key 和 value的 序列化方法 ，这样在 应用的地方， 就不用考虑 序列化的问题了。 后面会有具体的例子，来比较两者的区别。</p><h1 id="RedisConnectionFactory"><a href="#RedisConnectionFactory" class="headerlink" title="RedisConnectionFactory"></a>RedisConnectionFactory</h1><p>RedisConnection 是用 RedisConnectionFactory来创建的。<br>RedisConnectionFactory也是一个 抽象的接口 ，在1.7以前，支持4种流行的 开源redis java客户端。 1.7以后，支持两种 ，即JedisConnectionFactory 和 LettuceConnectionFactory。 默认是JedisConnectionFactory。</p><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:jedis" target="_blank" rel="external">Configuring Jedis connector</a></p><p>在Spring boot中，只要有spring-boot-starter-data-redis 这个依赖， 启动程序后，会自用生成RedisConnectionFactory, StringRedisTemplate , RedisTemplate 这三个类的示例，直接可以Autoware。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-connecting-to-redis" target="_blank" rel="external">Sprint boot Connecting to Redis</a><br>但如果想要控制更多信息，还是需要自己写Config文件，来自己示例化他们。</p><p>本文例子所使用的 工程，已经放在github上 <a href="https://github.com/kunpengku/spring-redis-example" target="_blank" rel="external">https://github.com/kunpengku/spring-redis-example</a></p><a id="more"></a><h1 id="示例准备"><a href="#示例准备" class="headerlink" title="示例准备"></a>示例准备</h1><ul><li>本机运行一个redis， localhost:6379</li><li>pom.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">&lt;groupId&gt;com.kunpengku&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;redis01&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">&lt;name&gt;redis01&lt;/name&gt;</div><div class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;properties&gt;</div><div class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;build&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><h1 id="示例1，-key是String，value是String，使用RedisConnection，-从redis获取value"><a href="#示例1，-key是String，value是String，使用RedisConnection，-从redis获取value" class="headerlink" title="示例1， key是String，value是String，使用RedisConnection， 从redis获取value"></a>示例1， key是String，value是String，使用RedisConnection， 从redis获取value</h1><p>spring boot会自动示例化RedisConnectionFactory， 但不会自动示例化RedisConnection， 所以需要写一个配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class RedisConfig &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    RedisConnectionFactory redisConnectionFactory;</div><div class="line"></div><div class="line">    @Bean(&quot;conn&quot;)</div><div class="line">    RedisConnection getConn()&#123;</div><div class="line">        return redisConnectionFactory.getConnection();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而且，给这个Bean起了一个名字 conn。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html" target="_blank" rel="external">深入分析 Java 中的中文编码问题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;conn&quot;)</div><div class="line">RedisConnection connection;</div><div class="line"></div><div class="line">// key String ，value String ， get</div><div class="line">@RequestMapping(&quot;/test1&quot;)</div><div class="line">public void test1() throws UnsupportedEncodingException &#123;</div><div class="line">    String s = &quot;name&quot;;</div><div class="line">    byte[] ret = connection.get(s.getBytes(&quot;UTF8&quot;));</div><div class="line">    String s2 = new String(ret);</div><div class="line">    System.out.println(s2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用的是 RedisConnection的get方法。 这个方法的 输入和 输出都是 byte[]<br>这就是说它比较底层的原因。</p><p>先用命令行 去 给 “name” 这个key 设置一个东西 ，试一下能不能取出。 很简单。</p><h1 id="示例2-key是String，value是String，使用RedisConnection，-向redis-存入-value"><a href="#示例2-key是String，value是String，使用RedisConnection，-向redis-存入-value" class="headerlink" title="示例2 key是String，value是String，使用RedisConnection， 向redis 存入 value"></a>示例2 key是String，value是String，使用RedisConnection， 向redis 存入 value</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// key String and  value String   \ set</div><div class="line">@RequestMapping(&quot;/test2&quot;)</div><div class="line">public String test2() throws UnsupportedEncodingException &#123;</div><div class="line">    String key = &quot;name2&quot;;</div><div class="line">    String value = &quot;fupeng&quot;;</div><div class="line">    connection.set(key.getBytes(&quot;UTF8&quot;), value.getBytes(&quot;UTF8&quot;));</div><div class="line"></div><div class="line">    byte[] ret = connection.get(key.getBytes(&quot;UTF8&quot;));</div><div class="line">    String s3 = new String(ret);</div><div class="line">    System.out.println(s3);</div><div class="line"></div><div class="line">    return s3;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二个例子用的是 RedisConnection 的 set方法， 传入两个参数，同样都是 byte[]</p><h1 id="示例3-key是String，value是Object，使用RedisConnection，-向redis-存入-Java对象"><a href="#示例3-key是String，value是Object，使用RedisConnection，-向redis-存入-Java对象" class="headerlink" title="示例3 key是String，value是Object，使用RedisConnection， 向redis 存入 Java对象"></a>示例3 key是String，value是Object，使用RedisConnection， 向redis 存入 Java对象</h1><p>对于POJO对象，可以将对象 序列化成json string，然后再反序列化成对象。 但是对于 复杂的对象，或者一些 没有setter/getter的 ，别人的对象，这时json序列化之后，将来没办法 反序列化 成一个对象。 对于这种场景，就需要 直接 向redis存入 对象 java序列化后的 字节。 以便未来能重建成对象。</p><p>需要序列化的对象，必须实现 Serializable 接口。<br>例子中 我要向redis存的是Apple对象, Apple有一个属性是 Mac对象。<br>Apple.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Apple implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1;</div><div class="line"></div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line">    Mac mac;</div><div class="line"></div><div class="line">    public Apple(String name, int age, Mac mac) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">        this.mac = mac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Apple&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, age=&quot; + age + &quot;, mac=&quot; + mac + &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Mac.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Mac implements Serializable&#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1;</div><div class="line"></div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line"></div><div class="line">    public Mac(String name, int age) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用RedisConnection 存入Java对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// key String and value Object   | set</div><div class="line">@RequestMapping(&quot;/test3&quot;)</div><div class="line">public void test3() throws UnsupportedEncodingException &#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    Mac mac = new Mac(&quot;mac&quot;, 12);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 90, mac);</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte[] apple_byte = serializer.serialize(apple);</div><div class="line">    connection.set(key.getBytes(&quot;UTF8&quot;), apple_byte);</div><div class="line"></div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>想要存入java对象，需要对 对象进行序列化，有多重序列化的函数</p><ul><li>StringRedisSerializer</li><li>JdkSerializationRedisSerializer</li><li>Jackson2JsonRedisSerializer</li></ul><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer" target="_blank" rel="external">官方文档介绍 Serializers</a></p><p>例子中采用JdkSerializationRedisSerializer 来对 Apple进行序列化。</p><p>调用方法之后，可以从 redis-cli中查看这个值, 是字节，而非字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get name3</div><div class="line">&quot;\xac\xed\x00\x05sr\x00\&quot;com.kunpengku.redis01.domain.Apple\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03I\x00\x03ageL\x00\x03mact\x00\&quot;Lcom/kunpengku/redis01/domain/Mac;L\x00\x04namet\x00\x12Ljava/lang/String;xp\x00\x00\x00Zsr\x00 com.kunpengku.redis01.domain.Mac\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x02I\x00\x03ageL\x00\x04nameq\x00~\x00\x02xp\x00\x00\x00\x0ct\x00\x03macq\x00~\x00\x06&quot;</div></pre></td></tr></table></figure><h1 id="示例4-key是String，value是Object，使用RedisConnection，-从redis-读出-Java对象"><a href="#示例4-key是String，value是Object，使用RedisConnection，-从redis-读出-Java对象" class="headerlink" title="示例4 key是String，value是Object，使用RedisConnection， 从redis 读出 Java对象"></a>示例4 key是String，value是Object，使用RedisConnection， 从redis 读出 Java对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object   | get</div><div class="line">@RequestMapping(&quot;/test4&quot;)</div><div class="line">public void test4() &#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte[] apple_byte = connection.get(key.getBytes());</div><div class="line"></div><div class="line">    Apple apple = (Apple) serializer.deserialize(apple_byte);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">    return;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过debug 可以看到，apple 已经 反序列化成功。</p><p>示例1-4 使用的是RedisConnection直接与redis交流。RedisConnection被认为是比较底层的接口。因为每次都要处理序列化的问题。</p><p>框架还提供了RedisTemplate，这是比较抽象，high-level的接口。</p><h1 id="示例5-同示例1-key是String，value是String，使用RedisTemplate，-从redis获取value"><a href="#示例5-同示例1-key是String，value是String，使用RedisTemplate，-从redis获取value" class="headerlink" title="示例5 同示例1 key是String，value是String，使用RedisTemplate， 从redis获取value"></a>示例5 同示例1 key是String，value是String，使用RedisTemplate， 从redis获取value</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">StringRedisTemplate stringRedisTemplate;</div><div class="line">// StringRedisTemplate 这个是 自动 示例化的，对于key和value都是 string 的情况，可以直接用.</div><div class="line"></div><div class="line"></div><div class="line">// key String and  value String \ get</div><div class="line">@RequestMapping(&quot;/test1&quot;)</div><div class="line">public String test1()&#123;</div><div class="line">    String key = &quot;name1&quot;;</div><div class="line">    String ret  =  stringRedisTemplate.opsForValue().get(key);</div><div class="line">    System.out.println(ret);</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里使用的是StringRedisTemplate， 它是RedisTemplate的一个子类，定制化的，针对于 key和value都是String的情况。 这个类在Spring boot中会自动示例化，所以直接 注入即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public StringRedisTemplate() &#123;</div><div class="line">RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line">setKeySerializer(stringSerializer);</div><div class="line">setValueSerializer(stringSerializer);</div><div class="line">setHashKeySerializer(stringSerializer);</div><div class="line">setHashValueSerializer(stringSerializer);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从这个类的构造函数可以看出 ，他里面的key，value等都用了 同样的序列化方法 ：StringRedisSerializer，这是针对String的序列化方法，使用UTF8编码。</p><h1 id="示例6-同示例2-，用RedisTemplate实现，key是String，value是String，-将字符串存入redis"><a href="#示例6-同示例2-，用RedisTemplate实现，key是String，value是String，-将字符串存入redis" class="headerlink" title="示例6 同示例2 ，用RedisTemplate实现，key是String，value是String， 将字符串存入redis"></a>示例6 同示例2 ，用RedisTemplate实现，key是String，value是String， 将字符串存入redis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// key String and  value String \ set</div><div class="line">@RequestMapping(&quot;/test2&quot;)</div><div class="line">public void test2()&#123;</div><div class="line">    String key = &quot;name2&quot;;</div><div class="line">    stringRedisTemplate.opsForValue().set(key, &quot;fupeng&quot;);</div><div class="line"></div><div class="line">    String ret  =  stringRedisTemplate.opsForValue().get(&quot;name2&quot;);</div><div class="line">    System.out.println(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例7-同示例3，用RedisTemplate实现，-key是String，value是对象。-将对象存入-redis"><a href="#示例7-同示例3，用RedisTemplate实现，-key是String，value是对象。-将对象存入-redis" class="headerlink" title="示例7 同示例3，用RedisTemplate实现， key是String，value是对象。 将对象存入 redis"></a>示例7 同示例3，用RedisTemplate实现， key是String，value是对象。 将对象存入 redis</h1><p>这是需要在配置文件中，生成一个RedisTemplate<string, object=""> 的bean，<br>关键是设置 key和value的 序列化方法。</string,></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Bean(&quot;forObject&quot;)</div><div class="line">RedisTemplate createRedisTemplate(RedisConnectionFactory factory</div><div class="line">        ) &#123;</div><div class="line">    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">    JdkSerializationRedisSerializer redisSerializer = new JdkSerializationRedisSerializer();</div><div class="line">    RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line"></div><div class="line">    template.setConnectionFactory(factory);</div><div class="line">    template.setKeySerializer(stringSerializer);</div><div class="line">    template.setValueSerializer(redisSerializer);</div><div class="line">    return template;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>存入Java对象，这时候set方法 直接传对象即可，不用再这里序列化。（其实是把这个设置给 统一做了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;forObject&quot;)</div><div class="line">RedisTemplate redisTemplate;</div><div class="line"></div><div class="line">// key String and  value Object  \ set</div><div class="line">@RequestMapping(&quot;/test3&quot;)</div><div class="line">public void test3()&#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    Mac mac = new Mac(&quot;mac&quot;,12);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 90, mac);</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate</div><div class="line">            .opsForValue();</div><div class="line">    valueOperations.set(key, apple);</div><div class="line"></div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例8-同示例4，用RedisTemplate实现，-key是String，value是对象。-从redis中取回对象"><a href="#示例8-同示例4，用RedisTemplate实现，-key是String，value是对象。-从redis中取回对象" class="headerlink" title="示例8 同示例4，用RedisTemplate实现， key是String，value是对象。 从redis中取回对象"></a>示例8 同示例4，用RedisTemplate实现， key是String，value是对象。 从redis中取回对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test4&quot;)</div><div class="line">public void test4()&#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate</div><div class="line">            .opsForValue();</div><div class="line">    Apple apple = (Apple) valueOperations.get(key);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果想用RedisTemplate ，依然返回byte [] ，怎么设置呢？</p><h1 id="示例-9-使用RedisTemplate，value是对象，返回byte-向redis存入对象"><a href="#示例-9-使用RedisTemplate，value是对象，返回byte-向redis存入对象" class="headerlink" title="示例 9  使用RedisTemplate，value是对象，返回byte[], 向redis存入对象"></a>示例 9  使用RedisTemplate，value是对象，返回byte[], 向redis存入对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Bean(&quot;forObject_byte&quot;)</div><div class="line">RedisTemplate createRedisTemplate2(RedisConnectionFactory factory</div><div class="line">) &#123;</div><div class="line">    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">    JdkSerializationRedisSerializer redisSerializer = new JdkSerializationRedisSerializer();</div><div class="line">    RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line"></div><div class="line">    template.setConnectionFactory(factory);</div><div class="line">    template.setKeySerializer(stringSerializer);</div><div class="line">    template.setEnableDefaultSerializer(false);</div><div class="line">    return template;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先需要 重新建 一个RedisTemplate<string, object="">， 为了让返回 byte[]， 需要<br>设置 <code>template.setEnableDefaultSerializer(false);</code></string,></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;forObject_byte&quot;)</div><div class="line">RedisTemplate redisTemplate_byte;</div><div class="line"></div><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test5&quot;)</div><div class="line">public void test5()&#123;</div><div class="line">    String key = &quot;name4&quot;;</div><div class="line"></div><div class="line">    Mac mac = new Mac(&quot;mac&quot;,88);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 66, mac);</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer redisSerializer =</div><div class="line">            new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte [] data = redisSerializer.serialize(apple);</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate_byte</div><div class="line">            .opsForValue();</div><div class="line"></div><div class="line">    valueOperations.set(key, data);</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例-10-使用RedisTemplate，value是对象，返回byte-从redis取回对象"><a href="#示例-10-使用RedisTemplate，value是对象，返回byte-从redis取回对象" class="headerlink" title="示例 10  使用RedisTemplate，value是对象，返回byte[], 从redis取回对象"></a>示例 10  使用RedisTemplate，value是对象，返回byte[], 从redis取回对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test6&quot;)</div><div class="line">public void test6()&#123;</div><div class="line">    String key = &quot;name4&quot;;</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate_byte</div><div class="line">            .opsForValue();</div><div class="line"></div><div class="line">    Object o = valueOperations.get(key);</div><div class="line">    byte [] apple_byte = (byte[]) o;</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer redisSerializer =</div><div class="line">            new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    Apple apple = (Apple) redisSerializer.deserialize(apple_byte);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为什么会有 RedisTemplate 还需要返回 byte[] 这样奇怪的需求呢？ 想想吧。</p><p>可能要混用RedisTemplate和 RedisConnection。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>redis中存的是 byte[]<br>java中使用的是对象<br>当二者要沟通的时候， 一定会有序列化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring data redis 是Spring对Redis支持的解决方案。&lt;br&gt;对于Spring boot 只要增加下面这个 依赖即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个包 整合了jedis 和 Spring-data-redis 两个主要的包。&lt;/p&gt;
&lt;h1 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h1&gt;&lt;h2 id=&quot;连接Redis&quot;&gt;&lt;a href=&quot;#连接Redis&quot; class=&quot;headerlink&quot; title=&quot;连接Redis&quot;&gt;&lt;/a&gt;连接Redis&lt;/h2&gt;&lt;p&gt;使用redis首先要连接redis， RedisConnection 和 RedisConnectionFactory 是两个主要的接口。&lt;/p&gt;
&lt;h1 id=&quot;RedisConnection&quot;&gt;&lt;a href=&quot;#RedisConnection&quot; class=&quot;headerlink&quot; title=&quot;RedisConnection&quot;&gt;&lt;/a&gt;RedisConnection&lt;/h1&gt;&lt;p&gt;RedisConnection为Redis通信提供构建块，因为它处理与Redis后端的通信。&lt;br&gt;RedisConnection提供了底层的方法，可以与redis通信，这些方法的 输入和返回都是二进制的值，即 byte [],  直接使用RedisConnection的话，需要 在调用方法时，自己处理 序列化和反序列化的问题。 比如 get()是， 需要把 String类型的key先 转成byte[] 的。&lt;/p&gt;
&lt;h1 id=&quot;RedisTemplate&quot;&gt;&lt;a href=&quot;#RedisTemplate&quot; class=&quot;headerlink&quot; title=&quot;RedisTemplate&quot;&gt;&lt;/a&gt;RedisTemplate&lt;/h1&gt;&lt;p&gt;与此对应，RedisTemplate提供比较 high-level的，更抽象的方法。比如 RedisTemplate可以在配置中，指定 key 和 value的 序列化方法 ，这样在 应用的地方， 就不用考虑 序列化的问题了。 后面会有具体的例子，来比较两者的区别。&lt;/p&gt;
&lt;h1 id=&quot;RedisConnectionFactory&quot;&gt;&lt;a href=&quot;#RedisConnectionFactory&quot; class=&quot;headerlink&quot; title=&quot;RedisConnectionFactory&quot;&gt;&lt;/a&gt;RedisConnectionFactory&lt;/h1&gt;&lt;p&gt;RedisConnection 是用 RedisConnectionFactory来创建的。&lt;br&gt;RedisConnectionFactory也是一个 抽象的接口 ，在1.7以前，支持4种流行的 开源redis java客户端。 1.7以后，支持两种 ，即JedisConnectionFactory 和 LettuceConnectionFactory。 默认是JedisConnectionFactory。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:jedis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring Jedis connector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Spring boot中，只要有spring-boot-starter-data-redis 这个依赖， 启动程序后，会自用生成RedisConnectionFactory, StringRedisTemplate , RedisTemplate 这三个类的示例，直接可以Autoware。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-connecting-to-redis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sprint boot Connecting to Redis&lt;/a&gt;&lt;br&gt;但如果想要控制更多信息，还是需要自己写Config文件，来自己示例化他们。&lt;/p&gt;
&lt;p&gt;本文例子所使用的 工程，已经放在github上 &lt;a href=&quot;https://github.com/kunpengku/spring-redis-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kunpengku/spring-redis-example&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://www.youletter.cn/tags/redis/"/>
    
      <category term="spring-data" scheme="http://www.youletter.cn/tags/spring-data/"/>
    
      <category term="序列化" scheme="http://www.youletter.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring-boot参考（一）</title>
    <link href="http://www.youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.youletter.cn/2017/11/30/Spring-boot参考（一）/</id>
    <published>2017-11-30T02:10:34.000Z</published>
    <updated>2017-12-02T12:44:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><p>Spring-boot参考系列<br><a href="http://youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/" target="_blank" rel="external">Spring-boot参考（一）</a><br><a href="http://youletter.cn/2017/12/02/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89/" target="_blank" rel="external">Spring-boot参考（二）</a></p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="external">官方文档地址</a></p><p>我们(Spring-boot)对Spring平台和第三方库有自己的看法，言外之意Spring-boot有大量的默认配置。所以，用户什么配置都没有，依然可以启动。然后在开发过程中，只修改那些默认配置不能满足需要的地方。</p><h3 id="Spring-boot的目标："><a href="#Spring-boot的目标：" class="headerlink" title="Spring-boot的目标："></a>Spring-boot的目标：</h3><ul><li>为所有Spring开发提供一个更快，更广泛的入门体验。</li><li>开箱即用，但是随着需求开始偏离默认值，便于修改。</li><li>提供大量 项目通用的一系列非功能性组件（如嵌入式服务器，安全性，指标，运行状况检查和外部配置）。</li><li>绝对不会生成代码，也不需要XML配置。</li></ul><a id="more"></a><h3 id="JDK要求"><a href="#JDK要求" class="headerlink" title="JDK要求"></a>JDK要求</h3><p>Spring Boot 1.5.9.RELEASE 要求 Java 7 和 Spring Framework 4.3.13.RELEASE 以上<br>Spring Boot 2.0.0.BUILD-SNAPSHOT 要求 Java 8 和 Spring Framework 5.0.2.RELEASE 以上，<br>目前 Spring boot 还不是稳定版，生产环境还应是使用1.5.x。</p><h3 id="内嵌Tomcat"><a href="#内嵌Tomcat" class="headerlink" title="内嵌Tomcat"></a>内嵌Tomcat</h3><ul><li>Tomcat8 3.1  </li><li>Jetty9.3 3.1</li><li>Undertow1.3 3.1  </li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>推荐使用Maven或Gradle来安装Spring boot依赖的jar包</p><p>Maven3.2以上</p><p>一个典型的pom文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;myproject&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line"></div><div class="line">    &lt;!-- Inherit defaults from Spring Boot --&gt;</div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;!-- Add typical dependencies for a web application --&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;!-- 这个插件，可以帮助 打一个可执行的jar包 --&gt;</div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p><p>Spring boot依赖org.springframework.boot 这个GroupId，一般需要继承 spring-boot-starter-parent。</p><p>Spring 还提供了一个 命令行的工具 ，也叫Spring 。感觉用处不大。</p><p>查看这个网页 <a href="https://github.com/spring-projects/spring-boot/wiki" target="_blank" rel="external">project wiki</a> 可以找到Spring boot的更新情况和值得关注的事。</p><p><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide" target="_blank" rel="external">Spring Boot 1.5向2.0迁移指南</a></p><h1 id="开发第一个Spring-boot的程序"><a href="#开发第一个Spring-boot的程序" class="headerlink" title="开发第一个Spring boot的程序"></a>开发第一个Spring boot的程序</h1><p><a href="https://start.spring.io/" target="_blank" rel="external">SPRING INITIALIZR</a>可以快速生成一个工程。</p><p>Maven 默认会编译 src/main/java下的文件。</p><p>FirstHelloApplication.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.kunpengku.firsthello;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">@EnableAutoConfiguration</div><div class="line">public class FirstHelloApplication &#123;</div><div class="line"></div><div class="line">@RequestMapping(&quot;/&quot;)</div><div class="line">String home() &#123;</div><div class="line">return &quot;Hello World!&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(FirstHelloApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一个helloworld 写完了。</p><p>mvn spring-boot:run 使用命令启动程序</p><p>或者在Idea 中启动程序。 然后访问 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 就能看到 hello world。</p><h1 id="第一个注解-RestController"><a href="#第一个注解-RestController" class="headerlink" title="第一个注解@RestController"></a>第一个注解@RestController</h1><p>这个注解说明 这个类是一个@Controller，当有请求来的时候，会考虑它。</p><p>@RequestMapping 这个注解则指定 某个 路由，有哪个方法来出来。</p><h2 id="EnableAutoConfiguration-注解"><a href="#EnableAutoConfiguration-注解" class="headerlink" title="@EnableAutoConfiguration 注解"></a>@EnableAutoConfiguration 注解</h2><p>Spring会根据你添加的jar包，来”guess”配置。</p><p>Starters 设计就是和 Auto-Configuration 一起工作的。</p><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><ul><li>命令行 mvn spring-boot:run</li><li>Idea 在main方法上 ，右键 -&gt; “run FirstHelloApplication” </li></ul><p>Spring boot 会自动启动内置的 Tomcat 服务器。<br>启动以后，访问 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 即可看到<br>Hello World!</p><h2 id="生成一个可执行的jar包"><a href="#生成一个可执行的jar包" class="headerlink" title="生成一个可执行的jar包"></a>生成一个可执行的jar包</h2><p>在生产环境，需要一个可执行的jar包来运行。<br>为了生成这个jar包，我们的pom文件中有这么一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure><p>而且在继承的spring-boot-starter-parent中，已经包含了 <code>&lt;executions&gt;</code> 配置了 repackage 目标.<br>关于插件的详细文档: <a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/maven-plugin/usage.html" target="_blank" rel="external">Spring Boot Maven Plugin</a></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">fupeng@bogon:~/java/spring-cloud/first-hello$ mvn package</div><div class="line">[INFO] Scanning for projects...</div><div class="line">[INFO]</div><div class="line">[INFO] </div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line">-------------------------------------------------------</div><div class="line"> T E S T S</div><div class="line">-------------------------------------------------------</div><div class="line">Running com.kunpengku.firsthello.FirstHelloApplicationTests</div><div class="line">Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.kunpengku.firsthello.FirstHelloApplicationTests</div><div class="line"></div><div class="line">Results :</div><div class="line"></div><div class="line">Tests run: 0, Failures: 0, Errors: 0, Skipped: 0</div><div class="line"></div><div class="line">[INFO]</div><div class="line">[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ first-hello ---</div><div class="line">[INFO] Building jar: /Users/fupeng/java/spring-cloud/first-hello/target/first-hello-0.0.1-SNAPSHOT.jar</div><div class="line">[INFO]</div><div class="line">[INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ first-hello ---</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 5.242 s</div><div class="line">[INFO] Finished at: 2017-11-30T10:28:24+08:00</div><div class="line">[INFO] Final Memory: 26M/210M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure><p>使用 java -jar 命令运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">java -jar target/first-hello-0.0.1-SNAPSHOT.jar</div><div class="line"></div><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.5.9.RELEASE)</div><div class="line"></div><div class="line">2017-11-30 10:33:17.425  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : Starting FirstHelloApplication v0.0.1-SNAPSHOT on bogon with PID 64214 (/Users/fupeng/java/spring-cloud/first-hello/target/first-hello-0.0.1-SNAPSHOT.jar started by fupeng in /Users/fupeng/java/spring-cloud/first-hello)</div><div class="line">2017-11-30 10:33:17.436  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : No active profile set, falling back to default profiles: default</div><div class="line">2017-11-30 10:33:17.533  INFO 64214 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@45ff54e6: startup date [Thu Nov 30 10:33:17 CST 2017]; root of context hierarchy</div><div class="line">2017-11-30 10:33:19.669  INFO 64214 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</div><div class="line">2017-11-30 10:33:19.692  INFO 64214 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</div><div class="line">2017-11-30 10:33:19.695  INFO 64214 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</div><div class="line">2017-11-30 10:33:19.856  INFO 64214 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</div><div class="line">2017-11-30 10:33:19.857  INFO 64214 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2327 ms</div><div class="line">2017-11-30 10:33:20.054  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</div><div class="line">2017-11-30 10:33:20.060  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;characterEncodingFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;httpPutFormContentFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;requestContextFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.524  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@45ff54e6: startup date [Thu Nov 30 10:33:17 CST 2017]; root of context hierarchy</div><div class="line">2017-11-30 10:33:20.688  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/]&#125;&quot; onto java.lang.String com.kunpengku.firsthello.FirstHelloApplication.home()</div><div class="line">2017-11-30 10:33:20.695  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</div><div class="line">2017-11-30 10:33:20.696  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</div><div class="line">2017-11-30 10:33:20.757  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:20.757  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:20.848  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:21.093  INFO 64214 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</div><div class="line">2017-11-30 10:33:21.183  INFO 64214 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</div><div class="line">2017-11-30 10:33:21.190  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : Started FirstHelloApplication in 4.357 seconds (JVM running for 5.354)</div><div class="line">^[[O2017-11-30 10:33:28.220  INFO 64214 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</div><div class="line">2017-11-30 10:33:28.220  INFO 64214 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</div><div class="line">2017-11-30 10:33:28.243  INFO 64214 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 23 ms</div></pre></td></tr></table></figure><p>本文的 工程放到github上<br><a href="https://github.com/kunpengku/first-hello" target="_blank" rel="external">first-hello</a></p><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="external">更多Spring-boot例子</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.&lt;/p&gt;
&lt;p&gt;Spring-boot参考系列&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring-boot参考（一）&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/12/02/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%BA%8C%EF%BC%89/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring-boot参考（二）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们(Spring-boot)对Spring平台和第三方库有自己的看法，言外之意Spring-boot有大量的默认配置。所以，用户什么配置都没有，依然可以启动。然后在开发过程中，只修改那些默认配置不能满足需要的地方。&lt;/p&gt;
&lt;h3 id=&quot;Spring-boot的目标：&quot;&gt;&lt;a href=&quot;#Spring-boot的目标：&quot; class=&quot;headerlink&quot; title=&quot;Spring-boot的目标：&quot;&gt;&lt;/a&gt;Spring-boot的目标：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为所有Spring开发提供一个更快，更广泛的入门体验。&lt;/li&gt;
&lt;li&gt;开箱即用，但是随着需求开始偏离默认值，便于修改。&lt;/li&gt;
&lt;li&gt;提供大量 项目通用的一系列非功能性组件（如嵌入式服务器，安全性，指标，运行状况检查和外部配置）。&lt;/li&gt;
&lt;li&gt;绝对不会生成代码，也不需要XML配置。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-cloud(一)概览</title>
    <link href="http://www.youletter.cn/2017/11/29/spring-cloud-%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.youletter.cn/2017/11/29/spring-cloud-简介/</id>
    <published>2017-11-29T13:24:25.000Z</published>
    <updated>2017-11-29T04:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring cloud是一个工具的集合，这些工具在分布式系统中都会用到。比如 配置管理，服务发现，断路器，智能路由，代理，tokens，全局锁，leader选举，分布式session，集群状态。Spring cloud可以帮助开发者快速实现这些内容，而且无论是在个人电脑上，机房，或者云平台，这些组件都可以工作的很好。</p><p>Spring cloud构建在Spring boot之上，这些库都有许多默认的配置，所以你可以快速的跑起服务来，然后等到需要的时候，再去修改配置，或者有自己的解决方案。</p><p>发行版其实只有一个artifact 就是 spring-cloud-dependencies</p><p>在Spring cloud推荐的方式是 使用一个dependency management system,如Maven</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR4&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure><p>spring-cloud有不同的版本。</p><ul><li><p>Angel</p></li><li><p>Brixton</p></li><li><p>Camden</p></li><li><p>Dalston</p></li><li><p>Edgware</p></li><li><p>Finchley</p></li></ul><p>spring-cloud并不是一个jar包，而是一个jar包组合，或者说是一个配方。不同版本之间的区别主要是 使用的 组件的版本不同。如：<br>Dalston 基于 Spring Boot 1.5.x.<br>Brixton 基于 Spring Boot 1.3.x.等</p><a id="more"></a><ul><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Angel-Release-Notes" target="_blank" rel="external">Spring Cloud Angel Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Brixton-Release-Notes" target="_blank" rel="external">Spring Cloud Brixton Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Camden-Release-Notes" target="_blank" rel="external">Spring Cloud Camden Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes" target="_blank" rel="external">Spring Cloud Dalston Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes" target="_blank" rel="external">Spring Cloud Edgware Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes" target="_blank" rel="external">Spring Cloud Finchley Release Notes</a></li></ul><p>spring cloud包含很多项目 ，就像一列火车一样。<br>Spring cloud 关注于开箱即用的体验，关注一下内容</p><ul><li>Distributed/versioned configuration</li><li>Service registration and discovery</li><li>Routing</li><li>Service-to-service calls</li><li>Load balancing</li><li>Circuit Breakers</li><li>Global locks</li><li>Leadership election and cluster state</li><li>Distributed messaging</li></ul><p>这些是分布式服务 ，区别于单体服务的一些共性的特征和 需要增加的模块。Spring cloud为了让增加这些东西变得简单，常常，你是需要增加一个注解就搞定了 。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class Application &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(Application.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>增加EnableDiscoveryClient 一个注解之后，该Spring boot的程序，就具备了 服务发现的功能。</p><h1 id="包含的主要项目有"><a href="#包含的主要项目有" class="headerlink" title="包含的主要项目有"></a>包含的主要项目有</h1><h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>中心配置中心。（本人用的不多）</p><h2 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h2><p>服务发现，整合了Netflix OSS的组件（Eureka, Hystrix, Zuul, Archaius等）</p><p>Eureka是服务发现，Zuul网关、路由，Hystrix断路器。</p><h2 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h2><p>服务之间传递消息的服务。</p><h2 id="Spring-Cloud-Cloud-Foundry-Service-Broker"><a href="#Spring-Cloud-Cloud-Foundry-Service-Broker" class="headerlink" title="Spring Cloud Cloud Foundry Service Broker"></a>Spring Cloud Cloud Foundry Service Broker</h2><p>Provides a starting point for building a service broker that manages a Cloud Foundry managed service.</p><h2 id="Spring-Cloud-Cluster"><a href="#Spring-Cloud-Cluster" class="headerlink" title="Spring Cloud Cluster"></a>Spring Cloud Cluster</h2><p>Leadership election and common stateful patterns with an abstraction and implementation for Zookeeper, Redis, Hazelcast, Consul.</p><h2 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h2><p>Service discovery and configuration management with Hashicorp Consul.</p><h2 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h2><p>Provides support for load-balanced OAuth2 rest client and authentication header relays in a Zuul proxy.</p><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h2><p>Distributed tracing for Spring Cloud applications, compatible with Zipkin, HTrace and log-based (e.g. ELK) tracing.</p><h2 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h2><p>A cloud-native orchestration service for composable microservice applications on modern runtimes. Easy-to-use DSL, drag-and-drop GUI, and REST-APIs together simplifies the overall orchestration of microservice based data pipelines.</p><h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>A lightweight event-driven microservices framework to quickly build applications that can connect to external systems. Simple declarative model to send and receive messages using Apache Kafka or RabbitMQ between Spring Boot apps.</p><h2 id="Spring-Cloud-Stream-App-Starters"><a href="#Spring-Cloud-Stream-App-Starters" class="headerlink" title="Spring Cloud Stream App Starters"></a>Spring Cloud Stream App Starters</h2><p>Spring Cloud Stream App Starters are Spring Boot based Spring Integration applications that provide integration with external systems.</p><h2 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h2><p>A short-lived microservices framework to quickly build applications that perform finite amounts of data processing. Simple declarative for adding both functional and non-functional features to Spring Boot apps.</p><h2 id="Spring-Cloud-Task-App-Starters"><a href="#Spring-Cloud-Task-App-Starters" class="headerlink" title="Spring Cloud Task App Starters"></a>Spring Cloud Task App Starters</h2><p>Spring Cloud Task App Starters are Spring Boot applications that may be any process including Spring Batch jobs that do not run forever, and they end/stop after a finite period of data processing.</p><h2 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h2><p>Service discovery and configuration management with Apache Zookeeper.</p><h2 id="Spring-Cloud-for-Amazon-Web-Services"><a href="#Spring-Cloud-for-Amazon-Web-Services" class="headerlink" title="Spring Cloud for Amazon Web Services"></a>Spring Cloud for Amazon Web Services</h2><p>Easy integration with hosted Amazon Web Services. It offers a convenient way to interact with AWS provided services using well-known Spring idioms and APIs, such as the messaging or caching API. Developers can build their application around the hosted services without having to care about infrastructure or maintenance.</p><h2 id="Spring-Cloud-Connectors"><a href="#Spring-Cloud-Connectors" class="headerlink" title="Spring Cloud Connectors"></a>Spring Cloud Connectors</h2><p>Makes it easy for PaaS applications in a variety of platforms to connect to backend services like databases and message brokers (the project formerly known as “Spring Cloud”).</p><h2 id="Spring-Cloud-Starters"><a href="#Spring-Cloud-Starters" class="headerlink" title="Spring Cloud Starters"></a>Spring Cloud Starters</h2><p>Spring Boot-style starter projects to ease dependency management for consumers of Spring Cloud. (Discontinued as a project and merged with the other projects after Angel.SR2.)</p><h2 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a>Spring Cloud CLI</h2><p>Spring Boot CLI plugin for creating Spring Cloud component applications quickly in Groovy</p><h2 id="Spring-Cloud-Contract"><a href="#Spring-Cloud-Contract" class="headerlink" title="Spring Cloud Contract"></a>Spring Cloud Contract</h2><p>Spring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contracts approach.</p><h2 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h2><p>Spring Cloud Gateway is an intelligent and programmable router based on Project Reactor.</p><h2 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a><a href="https://cloud.spring.io/spring-cloud-cloudfoundry/" target="_blank" rel="external">Spring Cloud for Cloud Foundry</a></h2><p>Cloud Foundry 是Spring的母公司Pivotal的私有云服务 <a href="https://www.cloudfoundry.org/" target="_blank" rel="external">Cloud Foundry</a>。 这个项目是用来便于和 Cloud Foundry 整合的，国内Cloud Foundry用的不多，故，忽略。</p><h1 id="Release-Trains-发行版火车"><a href="#Release-Trains-发行版火车" class="headerlink" title="Release Trains 发行版火车"></a>Release Trains 发行版火车</h1><p>Spring Cloud是一个由独立项目组成的综合项目，原则上，每个独立项目有不同的发行节奏。为了管理产品组合，会有一个 BOM（物料清单）与 子项目的一系列依赖关系一起发布。这一点比较不同的是，版本是一个名字，而不是版本号。这是为了避免和子项目混淆。</p><p>这些版本的名字，是按照字母顺序排列的，所以看见版本的名字，就能知道它的时间顺序。<br>这些名字都是采用 伦敦地铁站的名字，如Angel，Brixton。</p><p>当一个版本的子项目中的版本积累了许多更新，或者某个子项目有一些严重bug必须升级时，这是会推出一个service releases，简称SRX，X是一个数字。<br>比如Dalston的第一版是  Dalston.RELEASE, 后来更新就叫Dalston.SR1,再更新就是<br>Dalston.SR2。 目前到了Dalston.SR4。 这个版本被标记为GA的版本，所以应该采用GA的版本。</p><p><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a><br>官网有一个 各个 版本 所包含的 子项目的 版本的清单。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Finchley 是最新的版本，构建与 Spring Boot 2.0.x, 并且不期待工作在 Spring Boot 1.5.x.</p><p>Dalston 和 Edgware 构建与 Spring Boot 1.5.x, 不期待工作在 Spring Boot 2.0.x.</p><p>The Camden 构建于 Spring Boot 1.4.x, 但也在 1.5.x 上测试。</p><p>注意： Brixton 和 Angel 已经在2017年7月标记为 end-of-life (EOL) 。</p><p>Brixton 构建于 Spring Boot 1.3.x, 也在 1.4.x 测试过。</p><p><a href="https://github.com/spring-projects/spring-cloud/wiki" target="_blank" rel="external">官方github地址</a></p><p><a href="https://projects.spring.io/spring-cloud/" target="_blank" rel="external">spring-cloud官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring cloud是一个工具的集合，这些工具在分布式系统中都会用到。比如 配置管理，服务发现，断路器，智能路由，代理，tokens，全局锁，leader选举，分布式session，集群状态。Spring cloud可以帮助开发者快速实现这些内容，而且无论是在个人电脑上，机房，或者云平台，这些组件都可以工作的很好。&lt;/p&gt;
&lt;p&gt;Spring cloud构建在Spring boot之上，这些库都有许多默认的配置，所以你可以快速的跑起服务来，然后等到需要的时候，再去修改配置，或者有自己的解决方案。&lt;/p&gt;
&lt;p&gt;发行版其实只有一个artifact 就是 spring-cloud-dependencies&lt;/p&gt;
&lt;p&gt;在Spring cloud推荐的方式是 使用一个dependency management system,如Maven&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.5.6.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;version&amp;gt;Dalston.SR4&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;spring-cloud有不同的版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Angel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Brixton&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dalston&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edgware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finchley&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;spring-cloud并不是一个jar包，而是一个jar包组合，或者说是一个配方。不同版本之间的区别主要是 使用的 组件的版本不同。如：&lt;br&gt;Dalston 基于 Spring Boot 1.5.x.&lt;br&gt;Brixton 基于 Spring Boot 1.3.x.等&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-cloud" scheme="http://www.youletter.cn/tags/spring-cloud/"/>
    
  </entry>
  
</feed>

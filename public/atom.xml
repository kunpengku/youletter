<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>由来</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.youletter.cn/"/>
  <updated>2017-12-01T02:54:52.000Z</updated>
  <id>http://www.youletter.cn/</id>
  
  <author>
    <name>kunpengku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring data redis(一 对象序列化存入redis)</title>
    <link href="http://www.youletter.cn/2017/11/30/spring-data-redis-%E4%B8%80/"/>
    <id>http://www.youletter.cn/2017/11/30/spring-data-redis-一/</id>
    <published>2017-11-30T03:16:28.000Z</published>
    <updated>2017-12-01T02:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>spring data redis 是Spring对Redis支持的解决方案。<br>对于Spring boot 只要增加下面这个 依赖即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>这个包 整合了jedis 和 Spring-data-redis 两个主要的包。</p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="连接Redis"><a href="#连接Redis" class="headerlink" title="连接Redis"></a>连接Redis</h2><p>使用redis首先要连接redis， RedisConnection 和 RedisConnectionFactory 是两个主要的接口。</p><h1 id="RedisConnection"><a href="#RedisConnection" class="headerlink" title="RedisConnection"></a>RedisConnection</h1><p>RedisConnection为Redis通信提供构建块，因为它处理与Redis后端的通信。<br>RedisConnection提供了底层的方法，可以与redis通信，这些方法的 输入和返回都是二进制的值，即 byte [],  直接使用RedisConnection的话，需要 在调用方法时，自己处理 序列化和反序列化的问题。 比如 get()是， 需要把 String类型的key先 转成byte[] 的。</p><h1 id="RedisTemplate"><a href="#RedisTemplate" class="headerlink" title="RedisTemplate"></a>RedisTemplate</h1><p>与此对应，RedisTemplate提供比较 high-level的，更抽象的方法。比如 RedisTemplate可以在配置中，指定 key 和 value的 序列化方法 ，这样在 应用的地方， 就不用考虑 序列化的问题了。 后面会有具体的例子，来比较两者的区别。</p><h1 id="RedisConnectionFactory"><a href="#RedisConnectionFactory" class="headerlink" title="RedisConnectionFactory"></a>RedisConnectionFactory</h1><p>RedisConnection 是用 RedisConnectionFactory来创建的。<br>RedisConnectionFactory也是一个 抽象的接口 ，在1.7以前，支持4种流行的 开源redis java客户端。 1.7以后，支持两种 ，即JedisConnectionFactory 和 LettuceConnectionFactory。 默认是JedisConnectionFactory。</p><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:jedis" target="_blank" rel="external">Configuring Jedis connector</a></p><p>在Spring boot中，只要有spring-boot-starter-data-redis 这个依赖， 启动程序后，会自用生成RedisConnectionFactory, StringRedisTemplate , RedisTemplate 这三个类的示例，直接可以Autoware。</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-connecting-to-redis" target="_blank" rel="external">Sprint boot Connecting to Redis</a><br>但如果想要控制更多信息，还是需要自己写Config文件，来自己示例化他们。</p><p>本文例子所使用的 工程，已经放在github上 <a href="https://github.com/kunpengku/spring-redis-example" target="_blank" rel="external">https://github.com/kunpengku/spring-redis-example</a></p><a id="more"></a><h1 id="示例准备"><a href="#示例准备" class="headerlink" title="示例准备"></a>示例准备</h1><ul><li>本机运行一个redis， localhost:6379</li><li>pom.xml</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">&lt;groupId&gt;com.kunpengku&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;redis01&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">&lt;name&gt;redis01&lt;/name&gt;</div><div class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;properties&gt;</div><div class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;build&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><h1 id="示例1，-key是String，value是String，使用RedisConnection，-从redis获取value"><a href="#示例1，-key是String，value是String，使用RedisConnection，-从redis获取value" class="headerlink" title="示例1， key是String，value是String，使用RedisConnection， 从redis获取value"></a>示例1， key是String，value是String，使用RedisConnection， 从redis获取value</h1><p>spring boot会自动示例化RedisConnectionFactory， 但不会自动示例化RedisConnection， 所以需要写一个配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class RedisConfig &#123;</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    RedisConnectionFactory redisConnectionFactory;</div><div class="line"></div><div class="line">    @Bean(&quot;conn&quot;)</div><div class="line">    RedisConnection getConn()&#123;</div><div class="line">        return redisConnectionFactory.getConnection();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>而且，给这个Bean起了一个名字 conn。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html" target="_blank" rel="external">深入分析 Java 中的中文编码问题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;conn&quot;)</div><div class="line">RedisConnection connection;</div><div class="line"></div><div class="line">// key String ，value String ， get</div><div class="line">@RequestMapping(&quot;/test1&quot;)</div><div class="line">public void test1() throws UnsupportedEncodingException &#123;</div><div class="line">    String s = &quot;name&quot;;</div><div class="line">    byte[] ret = connection.get(s.getBytes(&quot;UTF8&quot;));</div><div class="line">    String s2 = new String(ret);</div><div class="line">    System.out.println(s2);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用的是 RedisConnection的get方法。 这个方法的 输入和 输出都是 byte[]<br>这就是说它比较底层的原因。</p><p>先用命令行 去 给 “name” 这个key 设置一个东西 ，试一下能不能取出。 很简单。</p><h1 id="示例2-key是String，value是String，使用RedisConnection，-向redis-存入-value"><a href="#示例2-key是String，value是String，使用RedisConnection，-向redis-存入-value" class="headerlink" title="示例2 key是String，value是String，使用RedisConnection， 向redis 存入 value"></a>示例2 key是String，value是String，使用RedisConnection， 向redis 存入 value</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// key String and  value String   \ set</div><div class="line">@RequestMapping(&quot;/test2&quot;)</div><div class="line">public String test2() throws UnsupportedEncodingException &#123;</div><div class="line">    String key = &quot;name2&quot;;</div><div class="line">    String value = &quot;fupeng&quot;;</div><div class="line">    connection.set(key.getBytes(&quot;UTF8&quot;), value.getBytes(&quot;UTF8&quot;));</div><div class="line"></div><div class="line">    byte[] ret = connection.get(key.getBytes(&quot;UTF8&quot;));</div><div class="line">    String s3 = new String(ret);</div><div class="line">    System.out.println(s3);</div><div class="line"></div><div class="line">    return s3;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第二个例子用的是 RedisConnection 的 set方法， 传入两个参数，同样都是 byte[]</p><h1 id="示例3-key是String，value是Object，使用RedisConnection，-向redis-存入-Java对象"><a href="#示例3-key是String，value是Object，使用RedisConnection，-向redis-存入-Java对象" class="headerlink" title="示例3 key是String，value是Object，使用RedisConnection， 向redis 存入 Java对象"></a>示例3 key是String，value是Object，使用RedisConnection， 向redis 存入 Java对象</h1><p>对于POJO对象，可以将对象 序列化成json string，然后再反序列化成对象。 但是对于 复杂的对象，或者一些 没有setter/getter的 ，别人的对象，这时json序列化之后，将来没办法 反序列化 成一个对象。 对于这种场景，就需要 直接 向redis存入 对象 java序列化后的 字节。 以便未来能重建成对象。</p><p>需要序列化的对象，必须实现 Serializable 接口。<br>例子中 我要向redis存的是Apple对象, Apple有一个属性是 Mac对象。<br>Apple.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class Apple implements Serializable &#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1;</div><div class="line"></div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line">    Mac mac;</div><div class="line"></div><div class="line">    public Apple(String name, int age, Mac mac) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">        this.mac = mac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Apple&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, age=&quot; + age + &quot;, mac=&quot; + mac + &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Mac.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Mac implements Serializable&#123;</div><div class="line"></div><div class="line">    private static final long serialVersionUID = 1;</div><div class="line"></div><div class="line">    String name;</div><div class="line">    int age;</div><div class="line"></div><div class="line">    public Mac(String name, int age) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用RedisConnection 存入Java对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// key String and value Object   | set</div><div class="line">@RequestMapping(&quot;/test3&quot;)</div><div class="line">public void test3() throws UnsupportedEncodingException &#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    Mac mac = new Mac(&quot;mac&quot;, 12);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 90, mac);</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte[] apple_byte = serializer.serialize(apple);</div><div class="line">    connection.set(key.getBytes(&quot;UTF8&quot;), apple_byte);</div><div class="line"></div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>想要存入java对象，需要对 对象进行序列化，有多重序列化的函数</p><ul><li>StringRedisSerializer</li><li>JdkSerializationRedisSerializer</li><li>Jackson2JsonRedisSerializer</li></ul><p><a href="https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:serializer" target="_blank" rel="external">官方文档介绍 Serializers</a></p><p>例子中采用JdkSerializationRedisSerializer 来对 Apple进行序列化。</p><p>调用方法之后，可以从 redis-cli中查看这个值, 是字节，而非字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get name3</div><div class="line">&quot;\xac\xed\x00\x05sr\x00\&quot;com.kunpengku.redis01.domain.Apple\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03I\x00\x03ageL\x00\x03mact\x00\&quot;Lcom/kunpengku/redis01/domain/Mac;L\x00\x04namet\x00\x12Ljava/lang/String;xp\x00\x00\x00Zsr\x00 com.kunpengku.redis01.domain.Mac\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x02I\x00\x03ageL\x00\x04nameq\x00~\x00\x02xp\x00\x00\x00\x0ct\x00\x03macq\x00~\x00\x06&quot;</div></pre></td></tr></table></figure><h1 id="示例4-key是String，value是Object，使用RedisConnection，-从redis-读出-Java对象"><a href="#示例4-key是String，value是Object，使用RedisConnection，-从redis-读出-Java对象" class="headerlink" title="示例4 key是String，value是Object，使用RedisConnection， 从redis 读出 Java对象"></a>示例4 key是String，value是Object，使用RedisConnection， 从redis 读出 Java对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object   | get</div><div class="line">@RequestMapping(&quot;/test4&quot;)</div><div class="line">public void test4() &#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte[] apple_byte = connection.get(key.getBytes());</div><div class="line"></div><div class="line">    Apple apple = (Apple) serializer.deserialize(apple_byte);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">    return;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过debug 可以看到，apple 已经 反序列化成功。</p><p>示例1-4 使用的是RedisConnection直接与redis交流。RedisConnection被认为是比较底层的接口。因为每次都要处理序列化的问题。</p><p>框架还提供了RedisTemplate，这是比较抽象，high-level的接口。</p><h1 id="示例5-同示例1-key是String，value是String，使用RedisTemplate，-从redis获取value"><a href="#示例5-同示例1-key是String，value是String，使用RedisTemplate，-从redis获取value" class="headerlink" title="示例5 同示例1 key是String，value是String，使用RedisTemplate， 从redis获取value"></a>示例5 同示例1 key是String，value是String，使用RedisTemplate， 从redis获取value</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">StringRedisTemplate stringRedisTemplate;</div><div class="line">// StringRedisTemplate 这个是 自动 示例化的，对于key和value都是 string 的情况，可以直接用.</div><div class="line"></div><div class="line"></div><div class="line">// key String and  value String \ get</div><div class="line">@RequestMapping(&quot;/test1&quot;)</div><div class="line">public String test1()&#123;</div><div class="line">    String key = &quot;name1&quot;;</div><div class="line">    String ret  =  stringRedisTemplate.opsForValue().get(key);</div><div class="line">    System.out.println(ret);</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里使用的是StringRedisTemplate， 它是RedisTemplate的一个子类，定制化的，针对于 key和value都是String的情况。 这个类在Spring boot中会自动示例化，所以直接 注入即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public StringRedisTemplate() &#123;</div><div class="line">RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line">setKeySerializer(stringSerializer);</div><div class="line">setValueSerializer(stringSerializer);</div><div class="line">setHashKeySerializer(stringSerializer);</div><div class="line">setHashValueSerializer(stringSerializer);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>从这个类的构造函数可以看出 ，他里面的key，value等都用了 同样的序列化方法 ：StringRedisSerializer，这是针对String的序列化方法，使用UTF8编码。</p><h1 id="示例6-同示例2-，用RedisTemplate实现，key是String，value是String，-将字符串存入redis"><a href="#示例6-同示例2-，用RedisTemplate实现，key是String，value是String，-将字符串存入redis" class="headerlink" title="示例6 同示例2 ，用RedisTemplate实现，key是String，value是String， 将字符串存入redis"></a>示例6 同示例2 ，用RedisTemplate实现，key是String，value是String， 将字符串存入redis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// key String and  value String \ set</div><div class="line">@RequestMapping(&quot;/test2&quot;)</div><div class="line">public void test2()&#123;</div><div class="line">    String key = &quot;name2&quot;;</div><div class="line">    stringRedisTemplate.opsForValue().set(key, &quot;fupeng&quot;);</div><div class="line"></div><div class="line">    String ret  =  stringRedisTemplate.opsForValue().get(&quot;name2&quot;);</div><div class="line">    System.out.println(ret);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例7-同示例3，用RedisTemplate实现，-key是String，value是对象。-将对象存入-redis"><a href="#示例7-同示例3，用RedisTemplate实现，-key是String，value是对象。-将对象存入-redis" class="headerlink" title="示例7 同示例3，用RedisTemplate实现， key是String，value是对象。 将对象存入 redis"></a>示例7 同示例3，用RedisTemplate实现， key是String，value是对象。 将对象存入 redis</h1><p>这是需要在配置文件中，生成一个RedisTemplate<string, object=""> 的bean，<br>关键是设置 key和value的 序列化方法。</string,></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Bean(&quot;forObject&quot;)</div><div class="line">RedisTemplate createRedisTemplate(RedisConnectionFactory factory</div><div class="line">        ) &#123;</div><div class="line">    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">    JdkSerializationRedisSerializer redisSerializer = new JdkSerializationRedisSerializer();</div><div class="line">    RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line"></div><div class="line">    template.setConnectionFactory(factory);</div><div class="line">    template.setKeySerializer(stringSerializer);</div><div class="line">    template.setValueSerializer(redisSerializer);</div><div class="line">    return template;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>存入Java对象，这时候set方法 直接传对象即可，不用再这里序列化。（其实是把这个设置给 统一做了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;forObject&quot;)</div><div class="line">RedisTemplate redisTemplate;</div><div class="line"></div><div class="line">// key String and  value Object  \ set</div><div class="line">@RequestMapping(&quot;/test3&quot;)</div><div class="line">public void test3()&#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line">    Mac mac = new Mac(&quot;mac&quot;,12);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 90, mac);</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate</div><div class="line">            .opsForValue();</div><div class="line">    valueOperations.set(key, apple);</div><div class="line"></div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例8-同示例4，用RedisTemplate实现，-key是String，value是对象。-从redis中取回对象"><a href="#示例8-同示例4，用RedisTemplate实现，-key是String，value是对象。-从redis中取回对象" class="headerlink" title="示例8 同示例4，用RedisTemplate实现， key是String，value是对象。 从redis中取回对象"></a>示例8 同示例4，用RedisTemplate实现， key是String，value是对象。 从redis中取回对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test4&quot;)</div><div class="line">public void test4()&#123;</div><div class="line">    String key = &quot;name3&quot;;</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate</div><div class="line">            .opsForValue();</div><div class="line">    Apple apple = (Apple) valueOperations.get(key);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果想用RedisTemplate ，依然返回byte [] ，怎么设置呢？</p><h1 id="示例-9-使用RedisTemplate，value是对象，返回byte-向redis存入对象"><a href="#示例-9-使用RedisTemplate，value是对象，返回byte-向redis存入对象" class="headerlink" title="示例 9  使用RedisTemplate，value是对象，返回byte[], 向redis存入对象"></a>示例 9  使用RedisTemplate，value是对象，返回byte[], 向redis存入对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Bean(&quot;forObject_byte&quot;)</div><div class="line">RedisTemplate createRedisTemplate2(RedisConnectionFactory factory</div><div class="line">) &#123;</div><div class="line">    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();</div><div class="line">    JdkSerializationRedisSerializer redisSerializer = new JdkSerializationRedisSerializer();</div><div class="line">    RedisSerializer&lt;String&gt; stringSerializer = new StringRedisSerializer();</div><div class="line"></div><div class="line">    template.setConnectionFactory(factory);</div><div class="line">    template.setKeySerializer(stringSerializer);</div><div class="line">    template.setEnableDefaultSerializer(false);</div><div class="line">    return template;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先需要 重新建 一个RedisTemplate<string, object="">， 为了让返回 byte[]， 需要<br>设置 <code>template.setEnableDefaultSerializer(false);</code></string,></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Autowired</div><div class="line">@Qualifier(&quot;forObject_byte&quot;)</div><div class="line">RedisTemplate redisTemplate_byte;</div><div class="line"></div><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test5&quot;)</div><div class="line">public void test5()&#123;</div><div class="line">    String key = &quot;name4&quot;;</div><div class="line"></div><div class="line">    Mac mac = new Mac(&quot;mac&quot;,88);</div><div class="line">    Apple apple = new Apple(&quot;mac&quot;, 66, mac);</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer redisSerializer =</div><div class="line">            new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    byte [] data = redisSerializer.serialize(apple);</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate_byte</div><div class="line">            .opsForValue();</div><div class="line"></div><div class="line">    valueOperations.set(key, data);</div><div class="line">    System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="示例-10-使用RedisTemplate，value是对象，返回byte-从redis取回对象"><a href="#示例-10-使用RedisTemplate，value是对象，返回byte-从redis取回对象" class="headerlink" title="示例 10  使用RedisTemplate，value是对象，返回byte[], 从redis取回对象"></a>示例 10  使用RedisTemplate，value是对象，返回byte[], 从redis取回对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// key String and  value Object  \ get</div><div class="line">@RequestMapping(&quot;/test6&quot;)</div><div class="line">public void test6()&#123;</div><div class="line">    String key = &quot;name4&quot;;</div><div class="line"></div><div class="line">    ValueOperations&lt;String, Object&gt; valueOperations = redisTemplate_byte</div><div class="line">            .opsForValue();</div><div class="line"></div><div class="line">    Object o = valueOperations.get(key);</div><div class="line">    byte [] apple_byte = (byte[]) o;</div><div class="line"></div><div class="line">    JdkSerializationRedisSerializer redisSerializer =</div><div class="line">            new JdkSerializationRedisSerializer();</div><div class="line"></div><div class="line">    Apple apple = (Apple) redisSerializer.deserialize(apple_byte);</div><div class="line"></div><div class="line">    System.out.println(apple);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为什么会有 RedisTemplate 还需要返回 byte[] 这样奇怪的需求呢？ 想想吧。</p><p>可能要混用RedisTemplate和 RedisConnection。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>redis中存的是 byte[]<br>java中使用的是对象<br>当二者要沟通的时候， 一定会有序列化。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;spring data redis 是Spring对Redis支持的解决方案。&lt;br&gt;对于Spring boot 只要增加下面这个 依赖即可。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个包 整合了jedis 和 Spring-data-redis 两个主要的包。&lt;/p&gt;
&lt;h1 id=&quot;一些概念&quot;&gt;&lt;a href=&quot;#一些概念&quot; class=&quot;headerlink&quot; title=&quot;一些概念&quot;&gt;&lt;/a&gt;一些概念&lt;/h1&gt;&lt;h2 id=&quot;连接Redis&quot;&gt;&lt;a href=&quot;#连接Redis&quot; class=&quot;headerlink&quot; title=&quot;连接Redis&quot;&gt;&lt;/a&gt;连接Redis&lt;/h2&gt;&lt;p&gt;使用redis首先要连接redis， RedisConnection 和 RedisConnectionFactory 是两个主要的接口。&lt;/p&gt;
&lt;h1 id=&quot;RedisConnection&quot;&gt;&lt;a href=&quot;#RedisConnection&quot; class=&quot;headerlink&quot; title=&quot;RedisConnection&quot;&gt;&lt;/a&gt;RedisConnection&lt;/h1&gt;&lt;p&gt;RedisConnection为Redis通信提供构建块，因为它处理与Redis后端的通信。&lt;br&gt;RedisConnection提供了底层的方法，可以与redis通信，这些方法的 输入和返回都是二进制的值，即 byte [],  直接使用RedisConnection的话，需要 在调用方法时，自己处理 序列化和反序列化的问题。 比如 get()是， 需要把 String类型的key先 转成byte[] 的。&lt;/p&gt;
&lt;h1 id=&quot;RedisTemplate&quot;&gt;&lt;a href=&quot;#RedisTemplate&quot; class=&quot;headerlink&quot; title=&quot;RedisTemplate&quot;&gt;&lt;/a&gt;RedisTemplate&lt;/h1&gt;&lt;p&gt;与此对应，RedisTemplate提供比较 high-level的，更抽象的方法。比如 RedisTemplate可以在配置中，指定 key 和 value的 序列化方法 ，这样在 应用的地方， 就不用考虑 序列化的问题了。 后面会有具体的例子，来比较两者的区别。&lt;/p&gt;
&lt;h1 id=&quot;RedisConnectionFactory&quot;&gt;&lt;a href=&quot;#RedisConnectionFactory&quot; class=&quot;headerlink&quot; title=&quot;RedisConnectionFactory&quot;&gt;&lt;/a&gt;RedisConnectionFactory&lt;/h1&gt;&lt;p&gt;RedisConnection 是用 RedisConnectionFactory来创建的。&lt;br&gt;RedisConnectionFactory也是一个 抽象的接口 ，在1.7以前，支持4种流行的 开源redis java客户端。 1.7以后，支持两种 ，即JedisConnectionFactory 和 LettuceConnectionFactory。 默认是JedisConnectionFactory。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-data/redis/docs/current/reference/html/#redis:connectors:jedis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring Jedis connector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Spring boot中，只要有spring-boot-starter-data-redis 这个依赖， 启动程序后，会自用生成RedisConnectionFactory, StringRedisTemplate , RedisTemplate 这三个类的示例，直接可以Autoware。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-connecting-to-redis&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sprint boot Connecting to Redis&lt;/a&gt;&lt;br&gt;但如果想要控制更多信息，还是需要自己写Config文件，来自己示例化他们。&lt;/p&gt;
&lt;p&gt;本文例子所使用的 工程，已经放在github上 &lt;a href=&quot;https://github.com/kunpengku/spring-redis-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kunpengku/spring-redis-example&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://www.youletter.cn/tags/redis/"/>
    
      <category term="spring-data" scheme="http://www.youletter.cn/tags/spring-data/"/>
    
      <category term="序列化" scheme="http://www.youletter.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring-boot参考（一）</title>
    <link href="http://www.youletter.cn/2017/11/30/Spring-boot%E5%8F%82%E8%80%83%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.youletter.cn/2017/11/30/Spring-boot参考（一）/</id>
    <published>2017-11-30T02:10:34.000Z</published>
    <updated>2017-11-30T02:50:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="external">官方文档地址</a></p><p>我们(Spring-boot)对Spring平台和第三方库有自己的看法，言外之意Spring-boot有大量的默认配置。所以，用户什么配置都没有，依然可以启动。然后在开发过程中，只修改那些默认配置不能满足需要的地方。</p><h3 id="Spring-boot的目标："><a href="#Spring-boot的目标：" class="headerlink" title="Spring-boot的目标："></a>Spring-boot的目标：</h3><ul><li>为所有Spring开发提供一个更快，更广泛的入门体验。</li><li>开箱即用，但是随着需求开始偏离默认值，便于修改。</li><li>提供大量 项目通用的一系列非功能性组件（如嵌入式服务器，安全性，指标，运行状况检查和外部配置）。</li><li>绝对不会生成代码，也不需要XML配置。</li></ul><a id="more"></a><h3 id="JDK要求"><a href="#JDK要求" class="headerlink" title="JDK要求"></a>JDK要求</h3><p>Spring Boot 1.5.9.RELEASE 要求 Java 7 和 Spring Framework 4.3.13.RELEASE 以上<br>Spring Boot 2.0.0.BUILD-SNAPSHOT 要求 Java 8 和 Spring Framework 5.0.2.RELEASE 以上，<br>目前 Spring boot 还不是稳定版，生产环境还应是使用1.5.x。</p><h3 id="内嵌Tomcat"><a href="#内嵌Tomcat" class="headerlink" title="内嵌Tomcat"></a>内嵌Tomcat</h3><ul><li>Tomcat8 3.1  </li><li>Jetty9.3 3.1</li><li>Undertow1.3 3.1  </li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>推荐使用Maven或Gradle来安装Spring boot依赖的jar包</p><p>Maven3.2以上</p><p>一个典型的pom文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;myproject&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line"></div><div class="line">    &lt;!-- Inherit defaults from Spring Boot --&gt;</div><div class="line">    &lt;parent&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">    &lt;/parent&gt;</div><div class="line"></div><div class="line">    &lt;!-- Add typical dependencies for a web application --&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line"></div><div class="line">    &lt;!-- 这个插件，可以帮助 打一个可执行的jar包 --&gt;</div><div class="line">    &lt;build&gt;</div><div class="line">        &lt;plugins&gt;</div><div class="line">            &lt;plugin&gt;</div><div class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;/plugin&gt;</div><div class="line">        &lt;/plugins&gt;</div><div class="line">    &lt;/build&gt;</div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure></p><p>Spring boot依赖org.springframework.boot 这个GroupId，一般需要继承 spring-boot-starter-parent。</p><p>Spring 还提供了一个 命令行的工具 ，也叫Spring 。感觉用处不大。</p><p>查看这个网页 <a href="https://github.com/spring-projects/spring-boot/wiki" target="_blank" rel="external">project wiki</a> 可以找到Spring boot的更新情况和值得关注的事。</p><p><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.0-Migration-Guide" target="_blank" rel="external">Spring Boot 1.5向2.0迁移指南</a></p><h1 id="开发第一个Spring-boot的程序"><a href="#开发第一个Spring-boot的程序" class="headerlink" title="开发第一个Spring boot的程序"></a>开发第一个Spring boot的程序</h1><p><a href="https://start.spring.io/" target="_blank" rel="external">SPRING INITIALIZR</a>可以快速生成一个工程。</p><p>Maven 默认会编译 src/main/java下的文件。</p><p>FirstHelloApplication.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.kunpengku.firsthello;</div><div class="line"></div><div class="line">import org.springframework.boot.SpringApplication;</div><div class="line">import org.springframework.boot.autoconfigure.EnableAutoConfiguration;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line">import org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line">@RestController</div><div class="line">@EnableAutoConfiguration</div><div class="line">public class FirstHelloApplication &#123;</div><div class="line"></div><div class="line">@RequestMapping(&quot;/&quot;)</div><div class="line">String home() &#123;</div><div class="line">return &quot;Hello World!&quot;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(FirstHelloApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一个helloworld 写完了。</p><p>mvn spring-boot:run 使用命令启动程序</p><p>或者在Idea 中启动程序。 然后访问 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 就能看到 hello world。</p><h1 id="第一个注解-RestController"><a href="#第一个注解-RestController" class="headerlink" title="第一个注解@RestController"></a>第一个注解@RestController</h1><p>这个注解说明 这个类是一个@Controller，当有请求来的时候，会考虑它。</p><p>@RequestMapping 这个注解则指定 某个 路由，有哪个方法来出来。</p><h2 id="EnableAutoConfiguration-注解"><a href="#EnableAutoConfiguration-注解" class="headerlink" title="@EnableAutoConfiguration 注解"></a>@EnableAutoConfiguration 注解</h2><p>Spring会根据你添加的jar包，来”guess”配置。</p><p>Starters 设计就是和 Auto-Configuration 一起工作的。</p><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><ul><li>命令行 mvn spring-boot:run</li><li>Idea 在main方法上 ，右键 -&gt; “run FirstHelloApplication” </li></ul><p>Spring boot 会自动启动内置的 Tomcat 服务器。<br>启动以后，访问 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 即可看到<br>Hello World!</p><h2 id="生成一个可执行的jar包"><a href="#生成一个可执行的jar包" class="headerlink" title="生成一个可执行的jar包"></a>生成一个可执行的jar包</h2><p>在生产环境，需要一个可执行的jar包来运行。<br>为了生成这个jar包，我们的pom文件中有这么一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;build&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure><p>而且在继承的spring-boot-starter-parent中，已经包含了 <code>&lt;executions&gt;</code> 配置了 repackage 目标.<br>关于插件的详细文档: <a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/maven-plugin/usage.html" target="_blank" rel="external">Spring Boot Maven Plugin</a></p><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">fupeng@bogon:~/java/spring-cloud/first-hello$ mvn package</div><div class="line">[INFO] Scanning for projects...</div><div class="line">[INFO]</div><div class="line">[INFO] </div><div class="line">...</div><div class="line"></div><div class="line"></div><div class="line">-------------------------------------------------------</div><div class="line"> T E S T S</div><div class="line">-------------------------------------------------------</div><div class="line">Running com.kunpengku.firsthello.FirstHelloApplicationTests</div><div class="line">Tests run: 0, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.kunpengku.firsthello.FirstHelloApplicationTests</div><div class="line"></div><div class="line">Results :</div><div class="line"></div><div class="line">Tests run: 0, Failures: 0, Errors: 0, Skipped: 0</div><div class="line"></div><div class="line">[INFO]</div><div class="line">[INFO] --- maven-jar-plugin:2.6:jar (default-jar) @ first-hello ---</div><div class="line">[INFO] Building jar: /Users/fupeng/java/spring-cloud/first-hello/target/first-hello-0.0.1-SNAPSHOT.jar</div><div class="line">[INFO]</div><div class="line">[INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ first-hello ---</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 5.242 s</div><div class="line">[INFO] Finished at: 2017-11-30T10:28:24+08:00</div><div class="line">[INFO] Final Memory: 26M/210M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure><p>使用 java -jar 命令运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">java -jar target/first-hello-0.0.1-SNAPSHOT.jar</div><div class="line"></div><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.5.9.RELEASE)</div><div class="line"></div><div class="line">2017-11-30 10:33:17.425  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : Starting FirstHelloApplication v0.0.1-SNAPSHOT on bogon with PID 64214 (/Users/fupeng/java/spring-cloud/first-hello/target/first-hello-0.0.1-SNAPSHOT.jar started by fupeng in /Users/fupeng/java/spring-cloud/first-hello)</div><div class="line">2017-11-30 10:33:17.436  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : No active profile set, falling back to default profiles: default</div><div class="line">2017-11-30 10:33:17.533  INFO 64214 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@45ff54e6: startup date [Thu Nov 30 10:33:17 CST 2017]; root of context hierarchy</div><div class="line">2017-11-30 10:33:19.669  INFO 64214 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</div><div class="line">2017-11-30 10:33:19.692  INFO 64214 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]</div><div class="line">2017-11-30 10:33:19.695  INFO 64214 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.23</div><div class="line">2017-11-30 10:33:19.856  INFO 64214 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</div><div class="line">2017-11-30 10:33:19.857  INFO 64214 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 2327 ms</div><div class="line">2017-11-30 10:33:20.054  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</div><div class="line">2017-11-30 10:33:20.060  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;characterEncodingFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;httpPutFormContentFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.061  INFO 64214 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;requestContextFilter&apos; to: [/*]</div><div class="line">2017-11-30 10:33:20.524  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@45ff54e6: startup date [Thu Nov 30 10:33:17 CST 2017]; root of context hierarchy</div><div class="line">2017-11-30 10:33:20.688  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/]&#125;&quot; onto java.lang.String com.kunpengku.firsthello.FirstHelloApplication.home()</div><div class="line">2017-11-30 10:33:20.695  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</div><div class="line">2017-11-30 10:33:20.696  INFO 64214 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</div><div class="line">2017-11-30 10:33:20.757  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:20.757  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:20.848  INFO 64214 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-11-30 10:33:21.093  INFO 64214 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</div><div class="line">2017-11-30 10:33:21.183  INFO 64214 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</div><div class="line">2017-11-30 10:33:21.190  INFO 64214 --- [           main] c.k.firsthello.FirstHelloApplication     : Started FirstHelloApplication in 4.357 seconds (JVM running for 5.354)</div><div class="line">^[[O2017-11-30 10:33:28.220  INFO 64214 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</div><div class="line">2017-11-30 10:33:28.220  INFO 64214 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</div><div class="line">2017-11-30 10:33:28.243  INFO 64214 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 23 ms</div></pre></td></tr></table></figure><p>本文的 工程放到github上<br><a href="https://github.com/kunpengku/first-hello" target="_blank" rel="external">first-hello</a></p><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="external">更多Spring-boot例子</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Copies of this document may be made for your own use and for distribution to others, provided that you do not charge any fee for such copies and further provided that each copy contains this Copyright Notice, whether distributed in print or electronically.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们(Spring-boot)对Spring平台和第三方库有自己的看法，言外之意Spring-boot有大量的默认配置。所以，用户什么配置都没有，依然可以启动。然后在开发过程中，只修改那些默认配置不能满足需要的地方。&lt;/p&gt;
&lt;h3 id=&quot;Spring-boot的目标：&quot;&gt;&lt;a href=&quot;#Spring-boot的目标：&quot; class=&quot;headerlink&quot; title=&quot;Spring-boot的目标：&quot;&gt;&lt;/a&gt;Spring-boot的目标：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;为所有Spring开发提供一个更快，更广泛的入门体验。&lt;/li&gt;
&lt;li&gt;开箱即用，但是随着需求开始偏离默认值，便于修改。&lt;/li&gt;
&lt;li&gt;提供大量 项目通用的一系列非功能性组件（如嵌入式服务器，安全性，指标，运行状况检查和外部配置）。&lt;/li&gt;
&lt;li&gt;绝对不会生成代码，也不需要XML配置。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring-cloud(一)概览</title>
    <link href="http://www.youletter.cn/2017/11/29/spring-cloud-%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.youletter.cn/2017/11/29/spring-cloud-简介/</id>
    <published>2017-11-29T13:24:25.000Z</published>
    <updated>2017-11-29T04:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Spring cloud是一个工具的集合，这些工具在分布式系统中都会用到。比如 配置管理，服务发现，断路器，智能路由，代理，tokens，全局锁，leader选举，分布式session，集群状态。Spring cloud可以帮助开发者快速实现这些内容，而且无论是在个人电脑上，机房，或者云平台，这些组件都可以工作的很好。</p><p>Spring cloud构建在Spring boot之上，这些库都有许多默认的配置，所以你可以快速的跑起服务来，然后等到需要的时候，再去修改配置，或者有自己的解决方案。</p><p>发行版其实只有一个artifact 就是 spring-cloud-dependencies</p><p>在Spring cloud推荐的方式是 使用一个dependency management system,如Maven</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.6.RELEASE&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Dalston.SR4&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure><p>spring-cloud有不同的版本。</p><ul><li><p>Angel</p></li><li><p>Brixton</p></li><li><p>Camden</p></li><li><p>Dalston</p></li><li><p>Edgware</p></li><li><p>Finchley</p></li></ul><p>spring-cloud并不是一个jar包，而是一个jar包组合，或者说是一个配方。不同版本之间的区别主要是 使用的 组件的版本不同。如：<br>Dalston 基于 Spring Boot 1.5.x.<br>Brixton 基于 Spring Boot 1.3.x.等</p><a id="more"></a><ul><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Angel-Release-Notes" target="_blank" rel="external">Spring Cloud Angel Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Brixton-Release-Notes" target="_blank" rel="external">Spring Cloud Brixton Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Camden-Release-Notes" target="_blank" rel="external">Spring Cloud Camden Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes" target="_blank" rel="external">Spring Cloud Dalston Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes" target="_blank" rel="external">Spring Cloud Edgware Release Notes</a></li><li><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes" target="_blank" rel="external">Spring Cloud Finchley Release Notes</a></li></ul><p>spring cloud包含很多项目 ，就像一列火车一样。<br>Spring cloud 关注于开箱即用的体验，关注一下内容</p><ul><li>Distributed/versioned configuration</li><li>Service registration and discovery</li><li>Routing</li><li>Service-to-service calls</li><li>Load balancing</li><li>Circuit Breakers</li><li>Global locks</li><li>Leadership election and cluster state</li><li>Distributed messaging</li></ul><p>这些是分布式服务 ，区别于单体服务的一些共性的特征和 需要增加的模块。Spring cloud为了让增加这些东西变得简单，常常，你是需要增加一个注解就搞定了 。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@SpringBootApplication</div><div class="line">@EnableDiscoveryClient</div><div class="line">public class Application &#123;</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">SpringApplication.run(Application.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>增加EnableDiscoveryClient 一个注解之后，该Spring boot的程序，就具备了 服务发现的功能。</p><h1 id="包含的主要项目有"><a href="#包含的主要项目有" class="headerlink" title="包含的主要项目有"></a>包含的主要项目有</h1><h2 id="Spring-Cloud-Config"><a href="#Spring-Cloud-Config" class="headerlink" title="Spring Cloud Config"></a>Spring Cloud Config</h2><p>中心配置中心。（本人用的不多）</p><h2 id="Spring-Cloud-Netflix"><a href="#Spring-Cloud-Netflix" class="headerlink" title="Spring Cloud Netflix"></a>Spring Cloud Netflix</h2><p>服务发现，整合了Netflix OSS的组件（Eureka, Hystrix, Zuul, Archaius等）</p><p>Eureka是服务发现，Zuul网关、路由，Hystrix断路器。</p><h2 id="Spring-Cloud-Bus"><a href="#Spring-Cloud-Bus" class="headerlink" title="Spring Cloud Bus"></a>Spring Cloud Bus</h2><p>服务之间传递消息的服务。</p><h2 id="Spring-Cloud-Cloud-Foundry-Service-Broker"><a href="#Spring-Cloud-Cloud-Foundry-Service-Broker" class="headerlink" title="Spring Cloud Cloud Foundry Service Broker"></a>Spring Cloud Cloud Foundry Service Broker</h2><p>Provides a starting point for building a service broker that manages a Cloud Foundry managed service.</p><h2 id="Spring-Cloud-Cluster"><a href="#Spring-Cloud-Cluster" class="headerlink" title="Spring Cloud Cluster"></a>Spring Cloud Cluster</h2><p>Leadership election and common stateful patterns with an abstraction and implementation for Zookeeper, Redis, Hazelcast, Consul.</p><h2 id="Spring-Cloud-Consul"><a href="#Spring-Cloud-Consul" class="headerlink" title="Spring Cloud Consul"></a>Spring Cloud Consul</h2><p>Service discovery and configuration management with Hashicorp Consul.</p><h2 id="Spring-Cloud-Security"><a href="#Spring-Cloud-Security" class="headerlink" title="Spring Cloud Security"></a>Spring Cloud Security</h2><p>Provides support for load-balanced OAuth2 rest client and authentication header relays in a Zuul proxy.</p><h2 id="Spring-Cloud-Sleuth"><a href="#Spring-Cloud-Sleuth" class="headerlink" title="Spring Cloud Sleuth"></a>Spring Cloud Sleuth</h2><p>Distributed tracing for Spring Cloud applications, compatible with Zipkin, HTrace and log-based (e.g. ELK) tracing.</p><h2 id="Spring-Cloud-Data-Flow"><a href="#Spring-Cloud-Data-Flow" class="headerlink" title="Spring Cloud Data Flow"></a>Spring Cloud Data Flow</h2><p>A cloud-native orchestration service for composable microservice applications on modern runtimes. Easy-to-use DSL, drag-and-drop GUI, and REST-APIs together simplifies the overall orchestration of microservice based data pipelines.</p><h2 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h2><p>A lightweight event-driven microservices framework to quickly build applications that can connect to external systems. Simple declarative model to send and receive messages using Apache Kafka or RabbitMQ between Spring Boot apps.</p><h2 id="Spring-Cloud-Stream-App-Starters"><a href="#Spring-Cloud-Stream-App-Starters" class="headerlink" title="Spring Cloud Stream App Starters"></a>Spring Cloud Stream App Starters</h2><p>Spring Cloud Stream App Starters are Spring Boot based Spring Integration applications that provide integration with external systems.</p><h2 id="Spring-Cloud-Task"><a href="#Spring-Cloud-Task" class="headerlink" title="Spring Cloud Task"></a>Spring Cloud Task</h2><p>A short-lived microservices framework to quickly build applications that perform finite amounts of data processing. Simple declarative for adding both functional and non-functional features to Spring Boot apps.</p><h2 id="Spring-Cloud-Task-App-Starters"><a href="#Spring-Cloud-Task-App-Starters" class="headerlink" title="Spring Cloud Task App Starters"></a>Spring Cloud Task App Starters</h2><p>Spring Cloud Task App Starters are Spring Boot applications that may be any process including Spring Batch jobs that do not run forever, and they end/stop after a finite period of data processing.</p><h2 id="Spring-Cloud-Zookeeper"><a href="#Spring-Cloud-Zookeeper" class="headerlink" title="Spring Cloud Zookeeper"></a>Spring Cloud Zookeeper</h2><p>Service discovery and configuration management with Apache Zookeeper.</p><h2 id="Spring-Cloud-for-Amazon-Web-Services"><a href="#Spring-Cloud-for-Amazon-Web-Services" class="headerlink" title="Spring Cloud for Amazon Web Services"></a>Spring Cloud for Amazon Web Services</h2><p>Easy integration with hosted Amazon Web Services. It offers a convenient way to interact with AWS provided services using well-known Spring idioms and APIs, such as the messaging or caching API. Developers can build their application around the hosted services without having to care about infrastructure or maintenance.</p><h2 id="Spring-Cloud-Connectors"><a href="#Spring-Cloud-Connectors" class="headerlink" title="Spring Cloud Connectors"></a>Spring Cloud Connectors</h2><p>Makes it easy for PaaS applications in a variety of platforms to connect to backend services like databases and message brokers (the project formerly known as “Spring Cloud”).</p><h2 id="Spring-Cloud-Starters"><a href="#Spring-Cloud-Starters" class="headerlink" title="Spring Cloud Starters"></a>Spring Cloud Starters</h2><p>Spring Boot-style starter projects to ease dependency management for consumers of Spring Cloud. (Discontinued as a project and merged with the other projects after Angel.SR2.)</p><h2 id="Spring-Cloud-CLI"><a href="#Spring-Cloud-CLI" class="headerlink" title="Spring Cloud CLI"></a>Spring Cloud CLI</h2><p>Spring Boot CLI plugin for creating Spring Cloud component applications quickly in Groovy</p><h2 id="Spring-Cloud-Contract"><a href="#Spring-Cloud-Contract" class="headerlink" title="Spring Cloud Contract"></a>Spring Cloud Contract</h2><p>Spring Cloud Contract is an umbrella project holding solutions that help users in successfully implementing the Consumer Driven Contracts approach.</p><h2 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h2><p>Spring Cloud Gateway is an intelligent and programmable router based on Project Reactor.</p><h2 id="Spring-Cloud-for-Cloud-Foundry"><a href="#Spring-Cloud-for-Cloud-Foundry" class="headerlink" title="Spring Cloud for Cloud Foundry"></a><a href="https://cloud.spring.io/spring-cloud-cloudfoundry/" target="_blank" rel="external">Spring Cloud for Cloud Foundry</a></h2><p>Cloud Foundry 是Spring的母公司Pivotal的私有云服务 <a href="https://www.cloudfoundry.org/" target="_blank" rel="external">Cloud Foundry</a>。 这个项目是用来便于和 Cloud Foundry 整合的，国内Cloud Foundry用的不多，故，忽略。</p><h1 id="Release-Trains-发行版火车"><a href="#Release-Trains-发行版火车" class="headerlink" title="Release Trains 发行版火车"></a>Release Trains 发行版火车</h1><p>Spring Cloud是一个由独立项目组成的综合项目，原则上，每个独立项目有不同的发行节奏。为了管理产品组合，会有一个 BOM（物料清单）与 子项目的一系列依赖关系一起发布。这一点比较不同的是，版本是一个名字，而不是版本号。这是为了避免和子项目混淆。</p><p>这些版本的名字，是按照字母顺序排列的，所以看见版本的名字，就能知道它的时间顺序。<br>这些名字都是采用 伦敦地铁站的名字，如Angel，Brixton。</p><p>当一个版本的子项目中的版本积累了许多更新，或者某个子项目有一些严重bug必须升级时，这是会推出一个service releases，简称SRX，X是一个数字。<br>比如Dalston的第一版是  Dalston.RELEASE, 后来更新就叫Dalston.SR1,再更新就是<br>Dalston.SR2。 目前到了Dalston.SR4。 这个版本被标记为GA的版本，所以应该采用GA的版本。</p><p><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a><br>官网有一个 各个 版本 所包含的 子项目的 版本的清单。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>Finchley 是最新的版本，构建与 Spring Boot 2.0.x, 并且不期待工作在 Spring Boot 1.5.x.</p><p>Dalston 和 Edgware 构建与 Spring Boot 1.5.x, 不期待工作在 Spring Boot 2.0.x.</p><p>The Camden 构建于 Spring Boot 1.4.x, 但也在 1.5.x 上测试。</p><p>注意： Brixton 和 Angel 已经在2017年7月标记为 end-of-life (EOL) 。</p><p>Brixton 构建于 Spring Boot 1.3.x, 也在 1.4.x 测试过。</p><p><a href="https://github.com/spring-projects/spring-cloud/wiki" target="_blank" rel="external">官方github地址</a></p><p><a href="https://projects.spring.io/spring-cloud/" target="_blank" rel="external">spring-cloud官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring cloud是一个工具的集合，这些工具在分布式系统中都会用到。比如 配置管理，服务发现，断路器，智能路由，代理，tokens，全局锁，leader选举，分布式session，集群状态。Spring cloud可以帮助开发者快速实现这些内容，而且无论是在个人电脑上，机房，或者云平台，这些组件都可以工作的很好。&lt;/p&gt;
&lt;p&gt;Spring cloud构建在Spring boot之上，这些库都有许多默认的配置，所以你可以快速的跑起服务来，然后等到需要的时候，再去修改配置，或者有自己的解决方案。&lt;/p&gt;
&lt;p&gt;发行版其实只有一个artifact 就是 spring-cloud-dependencies&lt;/p&gt;
&lt;p&gt;在Spring cloud推荐的方式是 使用一个dependency management system,如Maven&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.5.6.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;version&amp;gt;Dalston.SR4&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;spring-cloud-starter-config&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;spring-cloud有不同的版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Angel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Brixton&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dalston&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edgware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finchley&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;spring-cloud并不是一个jar包，而是一个jar包组合，或者说是一个配方。不同版本之间的区别主要是 使用的 组件的版本不同。如：&lt;br&gt;Dalston 基于 Spring Boot 1.5.x.&lt;br&gt;Brixton 基于 Spring Boot 1.3.x.等&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-cloud" scheme="http://www.youletter.cn/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>软件版本中的黑话(行话)</title>
    <link href="http://www.youletter.cn/2017/11/28/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E9%BB%91%E8%AF%9D-%E8%A1%8C%E8%AF%9D/"/>
    <id>http://www.youletter.cn/2017/11/28/软件版本中的黑话-行话/</id>
    <published>2017-11-28T08:46:05.000Z</published>
    <updated>2017-11-28T09:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Spring Cloud Sleuth</div><div class="line"></div><div class="line">2017/01/30 - Released version 1.2.0.M1 (issues)</div><div class="line">2017/03/17 - Released version 1.2.0.RC1 (issues)</div><div class="line">2017/04/11 - Released version 1.2.0.RELEASE (issues)</div><div class="line">Notable changes:</div><div class="line"></div><div class="line">Baggage API</div><div class="line">Annotation based span creation / continuation</div><div class="line">Spring Cloud Stream</div><div class="line"></div><div class="line">2017/01/11 - Released version Chelsea.M1 (blog)</div><div class="line">2017/03/13 - Released version Chelsea.RC1 (blog) (release notes)</div><div class="line">2017/04/04 - Released version Chelsea.RELEASE (release notes)</div><div class="line">2017/03/13 - Released version Chelsea.SR1 (release notes)</div></pre></td></tr></table></figure><p>如上，在Spring的各种版本中，总是带一些 RC1， M1， RELEASE， SR1， GA的方言，看着就这么专业（懵逼）</p><ul><li><p>GA = General availability (a release) ==  稳定版</p></li><li><p>RC = Release candidate;  很接近GA版本，可能有一些小bug，修复后就是发行版。</p></li><li><p>M = Milestone build 里程碑版本，完成了TODO list上的很多功能,项目进入一个新的里程碑。 但并不是完整的功能，所有会有M1 M2 M4等等。</p></li><li>SR4 = Service Release 4 在Spring cloud看到这样的简写 Dalston SR4 </li></ul><a id="more"></a><p>参考：</p><p><a href="https://spring.io/blog/2017/10/03/spring-cloud-dalston-sr4-is-now-available" target="_blank" rel="external">Spring Cloud Dalston SR4 Is Now Available</a></p><p><a href="https://en.wikipedia.org/wiki/Software_release_life_cycle" target="_blank" rel="external">https://en.wikipedia.org/wiki/Software_release_life_cycle</a></p><p><a href="https://stackoverflow.com/questions/2107484/what-is-the-difference-between-springs-ga-rc-and-m2-releases" target="_blank" rel="external">What is the difference between Spring’s GA, RC and M2 releases?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Spring Cloud Sleuth&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/01/30 - Released version 1.2.0.M1 (issues)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/03/17 - Released version 1.2.0.RC1 (issues)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/04/11 - Released version 1.2.0.RELEASE (issues)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Notable changes:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Baggage API&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Annotation based span creation / continuation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Spring Cloud Stream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/01/11 - Released version Chelsea.M1 (blog)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/03/13 - Released version Chelsea.RC1 (blog) (release notes)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/04/04 - Released version Chelsea.RELEASE (release notes)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017/03/13 - Released version Chelsea.SR1 (release notes)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上，在Spring的各种版本中，总是带一些 RC1， M1， RELEASE， SR1， GA的方言，看着就这么专业（懵逼）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GA = General availability (a release) ==  稳定版&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RC = Release candidate;  很接近GA版本，可能有一些小bug，修复后就是发行版。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;M = Milestone build 里程碑版本，完成了TODO list上的很多功能,项目进入一个新的里程碑。 但并不是完整的功能，所有会有M1 M2 M4等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;SR4 = Service Release 4 在Spring cloud看到这样的简写 Dalston SR4 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="maven" scheme="http://www.youletter.cn/tags/maven/"/>
    
      <category term="release" scheme="http://www.youletter.cn/tags/release/"/>
    
  </entry>
  
  <entry>
    <title>git命令</title>
    <link href="http://www.youletter.cn/2017/11/27/git%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.youletter.cn/2017/11/27/git命令/</id>
    <published>2017-11-27T03:16:05.000Z</published>
    <updated>2017-11-28T09:10:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>列出所有全局配置<br>git config –global -l </p><p>删除某个配置<br>git config –global –unset http.proxy</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;列出所有全局配置&lt;br&gt;git config –global -l &lt;/p&gt;
&lt;p&gt;删除某个配置&lt;br&gt;git config –global –unset http.proxy&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.youletter.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>程序员words</title>
    <link href="http://www.youletter.cn/2017/11/27/%E7%A8%8B%E5%BA%8F%E5%91%98words/"/>
    <id>http://www.youletter.cn/2017/11/27/程序员words/</id>
    <published>2017-11-27T01:47:21.000Z</published>
    <updated>2017-11-29T04:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>SNAPSHOT 快照<br>BOM (Bill of Materials) 物料清单<br>boilerplate code 样例代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SNAPSHOT 快照&lt;br&gt;BOM (Bill of Materials) 物料清单&lt;br&gt;boilerplate code 样例代码&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>修改Github commit的作者信息</title>
    <link href="http://www.youletter.cn/2017/11/26/%E4%BF%AE%E6%94%B9Github-commit%E7%9A%84%E4%BD%9C%E8%80%85%E4%BF%A1%E6%81%AF/"/>
    <id>http://www.youletter.cn/2017/11/26/修改Github-commit的作者信息/</id>
    <published>2017-11-26T01:11:45.000Z</published>
    <updated>2017-11-26T01:51:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>在git项目的最上层目录，创建脚本 changename.sh<br>把其中的三个变量换成你需要的</p><ul><li>OLD_EMAIL</li><li>CORRECT_NAME</li><li>CORRECT_EMAIL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">git filter-branch --env-filter &apos;</div><div class="line"></div><div class="line">OLD_EMAIL=&quot;your-old-email@example.com&quot;</div><div class="line">CORRECT_NAME=&quot;Your Correct Name&quot;</div><div class="line">CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;</div><div class="line"></div><div class="line">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</div><div class="line">then</div><div class="line">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</div><div class="line">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</div><div class="line">fi</div><div class="line">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</div><div class="line">then</div><div class="line">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</div><div class="line">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</div><div class="line">fi</div><div class="line">&apos; --tag-name-filter cat -- --branches --tags</div></pre></td></tr></table></figure><a id="more"></a><p>执行 sh changename.sh</p><p>你本地的提交记录 作者信息就修改了。 </p><p>然后git push -f 强制推送到远端即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在git项目的最上层目录，创建脚本 changename.sh&lt;br&gt;把其中的三个变量换成你需要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OLD_EMAIL&lt;/li&gt;
&lt;li&gt;CORRECT_NAME&lt;/li&gt;
&lt;li&gt;CORRECT_EMAIL&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#!/bin/sh&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git filter-branch --env-filter &amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;OLD_EMAIL=&amp;quot;your-old-email@example.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CORRECT_NAME=&amp;quot;Your Correct Name&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;CORRECT_EMAIL=&amp;quot;your-correct-email@example.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if [ &amp;quot;$GIT_COMMITTER_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    export GIT_COMMITTER_NAME=&amp;quot;$CORRECT_NAME&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    export GIT_COMMITTER_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;if [ &amp;quot;$GIT_AUTHOR_EMAIL&amp;quot; = &amp;quot;$OLD_EMAIL&amp;quot; ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;then&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    export GIT_AUTHOR_NAME=&amp;quot;$CORRECT_NAME&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    export GIT_AUTHOR_EMAIL=&amp;quot;$CORRECT_EMAIL&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fi&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;apos; --tag-name-filter cat -- --branches --tags&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="github" scheme="http://www.youletter.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>对github设置sock5代理</title>
    <link href="http://www.youletter.cn/2017/11/26/%E5%AF%B9github%E8%AE%BE%E7%BD%AEsock5%E4%BB%A3%E7%90%86/"/>
    <id>http://www.youletter.cn/2017/11/26/对github设置sock5代理/</id>
    <published>2017-11-26T00:50:44.000Z</published>
    <updated>2017-11-26T01:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#只对github.com</div><div class="line">git config --global http.https://github.com.proxy socks5://127.0.0.1:1080</div><div class="line"></div><div class="line">#取消代理</div><div class="line">git config --global --unset http.https://github.com.proxy)</div></pre></td></tr></table></figure><p>速度感人。</p><a id="more"></a><p>参考链接 <a href="https://gist.github.com/laispace/666dd7b27e9116faece6" target="_blank" rel="external">https://gist.github.com/laispace/666dd7b27e9116faece6</a></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#只对github.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global http.https://github.com.proxy socks5://127.0.0.1:1080&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#取消代理&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --unset http.https://github.com.proxy)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;速度感人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://www.youletter.cn/tags/git/"/>
    
      <category term="github" scheme="http://www.youletter.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>applicatoin.yml/application.properties配置样例</title>
    <link href="http://www.youletter.cn/2017/11/25/applicatoin-yml-application-properties%E9%85%8D%E7%BD%AE%E6%A0%B7%E4%BE%8B/"/>
    <id>http://www.youletter.cn/2017/11/25/applicatoin-yml-application-properties配置样例/</id>
    <published>2017-11-25T02:20:16.000Z</published>
    <updated>2017-11-26T01:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">info:</div><div class="line">  name: bu</div><div class="line">  jdk-version: jdk8</div><div class="line">  author: fupeng</div><div class="line">  version: 1.0.0-SNAPSHOT</div><div class="line"></div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: kpk</div><div class="line">  # 数据库配置</div><div class="line">  datasource:</div><div class="line">    url: jdbc:mysql://localhost:3306/bus?useUnicode=true</div><div class="line">    username: root</div><div class="line">    password: 123456</div><div class="line">    driverClassName: com.mysql.jdbc.Driver</div><div class="line">    connectionTestQuery: SELECT 1</div><div class="line">  redis:</div><div class="line">    cluster:</div><div class="line">      nodes:</div><div class="line">        - 127.0.0.1:7000</div><div class="line"></div><div class="line">management:</div><div class="line">  security:</div><div class="line">    enabled: false</div><div class="line"></div><div class="line"></div><div class="line">debug: true</div><div class="line"></div><div class="line"># mybatis配置</div><div class="line">mybatis:</div><div class="line">  mapper-locations: classpath:mapper/*.xml</div><div class="line">  configuration:</div><div class="line">      map-underscore-to-camel-case: true  #加了这个配置之后就可以直接把下划线分隔的库表字段自动转换为camel格式，不再需要ResultMap</div><div class="line"></div><div class="line"># 开启spring securitydebug日志</div><div class="line">logging:</div><div class="line">  level:</div><div class="line">    org:</div><div class="line">      springframework:</div><div class="line">        security: DEBUG</div><div class="line">        </div><div class="line">server:</div><div class="line">  port: 23001</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;application.yml&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
      
    
    </summary>
    
    
      <category term="spring" scheme="http://www.youletter.cn/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>程序员的左手和右手用的一样多吗?</title>
    <link href="http://www.youletter.cn/2017/11/23/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%B7%A6%E6%89%8B%E5%92%8C%E5%8F%B3%E6%89%8B%E7%94%A8%E7%9A%84%E4%B8%80%E6%A0%B7%E5%A4%9A%E5%90%97/"/>
    <id>http://www.youletter.cn/2017/11/23/程序员的左手和右手用的一样多吗/</id>
    <published>2017-11-23T15:26:37.000Z</published>
    <updated>2017-11-23T15:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>程序员的左手和右手用的一样多吗？</p><p>我觉得程序员的左手，连带左臂用的多一点。</p><p>为什么会出现这样的情况？</p><ul><li><p>原因1<br>  可能control+c / control+v 用的比较多，而复制粘贴这个操作用的是左手。<br>  为什么不能用右手做这个动作呢？ 因为右边的control离C和V都比较远。</p></li><li><p>原因2<br>  因为右手要拿鼠标，所以左手需要更多的按键盘。<br>  虽然使用MAC时，更多时候已经不用鼠标了，但是养成的喜欢还是 更多地使用 左边的shift 和 control，alt。</p></li><li><p>原因3<br>  数字键12345在左边， 67890在右边。123使用的频率要高于789。使得左手用的更多。</p></li></ul><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li>左手的使用会更多。</li><li>为了你的身体健康，和更长的职业生涯，对左手/左臂要有更多地放松和锻炼。        <a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员的左手和右手用的一样多吗？&lt;/p&gt;
&lt;p&gt;我觉得程序员的左手，连带左臂用的多一点。&lt;/p&gt;
&lt;p&gt;为什么会出现这样的情况？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原因1&lt;br&gt;  可能control+c / control+v 用的比较多，而复制粘贴这个操作用的是左手。&lt;br&gt;  为什么不能用右手做这个动作呢？ 因为右边的control离C和V都比较远。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原因2&lt;br&gt;  因为右手要拿鼠标，所以左手需要更多的按键盘。&lt;br&gt;  虽然使用MAC时，更多时候已经不用鼠标了，但是养成的喜欢还是 更多地使用 左边的shift 和 control，alt。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原因3&lt;br&gt;  数字键12345在左边， 67890在右边。123使用的频率要高于789。使得左手用的更多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;左手的使用会更多。&lt;/li&gt;
&lt;li&gt;为了你的身体健康，和更长的职业生涯，对左手/左臂要有更多地放松和锻炼。
    
    </summary>
    
    
      <category term="life" scheme="http://www.youletter.cn/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud微服务之Feign</title>
    <link href="http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/"/>
    <id>http://www.youletter.cn/2017/11/23/spring-cloud微服务之Feign/</id>
    <published>2017-11-23T03:01:36.000Z</published>
    <updated>2017-11-24T08:46:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-nexflix-微服务系列"><a href="#spring-nexflix-微服务系列" class="headerlink" title="spring nexflix 微服务系列"></a>spring nexflix 微服务系列</h2><ul><li><a href="http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/">spring-cloud-netflix之服务发现Eureka Server</a></li><li><a href="http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/">spring-cloud-netflix之服务发现Eureka Client</a></li><li><a href="http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/">spring-cloud微服务之Feign</a><h2 id="Feign是什么"><a href="#Feign是什么" class="headerlink" title="Feign是什么"></a>Feign是什么</h2>Feign是一个http的客户端，在微服务的世界中，因为有服务发现（Eureka），如果某个服务A要访问服务B， 可能需要两个步骤</li></ul><ul><li>1 使用Eureka，通过注册的ServiceId，拿到B服务的IP和port</li><li>2 再请求B服务的 接口，如”/getxxx”，这是使用的可能是RestTemplate等。</li></ul><p>Feign就是将上面两步合成一步的工具。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>为了完成这个测试，需要启动3个服务：</p><ul><li>1 Eureka 服务发现 (端口23001)  <a href="https://github.com/kunpengku/b_eureka" target="_blank" rel="external">https://github.com/kunpengku/b_eureka</a></li><li>2 业务服务03  (端口23003)  <a href="https://github.com/kunpengku/bus03" target="_blank" rel="external">https://github.com/kunpengku/bus03</a></li><li>3 业务服务07  (端口23007)  <a href="https://github.com/kunpengku/bus07" target="_blank" rel="external">https://github.com/kunpengku/bus07</a></li></ul><p>我将演示的3个服务，在github上建立3个对象的项目，这样你就可以clone下来在本地同样的试试了。</p><h1 id="1-最简单的情况"><a href="#1-最简单的情况" class="headerlink" title="1 最简单的情况"></a>1 最简单的情况</h1><p>首先演示一种最简单的情况。<br>bus03 提供了一个接口（/bus），返回一句话。<br>bus07 要请求bus03 的这个接口。 所以需要在 bus07上 使用Feign client。</p><p>这是bus03提供的接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusController</span> </span>&#123;</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/bus"</span>)</div><div class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"I am bus 03"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面是直接请求 该接口的结果</p><img src="/2017/11/23/spring-cloud微服务之Feign/bus03.png"><h1 id="2-EnableFeignClients注解"><a href="#2-EnableFeignClients注解" class="headerlink" title="2 EnableFeignClients注解"></a>2 EnableFeignClients注解</h1><p>bus07 想要使用feign访问这个接口，首先需要在 启动类上增加一个注解@EnableFeignClients。</p><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus07Application</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(Bus07Application.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><h1 id="3-定义一个FeignClient接口"><a href="#3-定义一个FeignClient接口" class="headerlink" title="3 定义一个FeignClient接口"></a>3 定义一个FeignClient接口</h1><p>然后需要定义一个接口，在注解FeignClient的name中填写的是 bus03 注册在eureka的application name，一般这个名字就是 bus03配置文件 application.yml中的 spring.application.name。  这个名字可以在 eureka的管理页面找到 <a href="http://localhost:23001/" target="_blank" rel="external">http://localhost:23001/</a> 。</p><p>这个接口不用实现，只需要写和 bus03 对应的接口 Controller中的部分，去掉函数体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"bus03"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bus03Feign</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/bus"</span>)</div><div class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="4-试用"><a href="#4-试用" class="headerlink" title="4 试用"></a>4 试用</h1><p>接下来就可以在 bus07中试试这个Feign怎么样了, 写一个Controller.<br>在这个接口get03中,使用了刚才定义的 Bus03Feign。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B7Controller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    Bus03Feign bus03Feign;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/get03"</span>)</div><div class="line">    <span class="function">String <span class="title">getFrom03</span><span class="params">()</span></span>&#123;</div><div class="line">        String s = bus03Feign.getInfo();</div><div class="line">        System.out.println(s);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面是bus07的返回结果<br><img src="/2017/11/23/spring-cloud微服务之Feign/bus07.png"></p><p>是不是非常方便/简单。</p><p>注意，如果你调用后 报这个错误<br><figure class="highlight plain"><figcaption><span>Load balancer does not have available server for client: bus03</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">```</div><div class="line">这是因为注册Eureka服务发现需要时间，请在30s后再试。</div><div class="line"></div><div class="line"></div><div class="line">现在Feign client就算跑通了，但这次只是一个最简单的get访问，连参数都没有。 通常的接口可能会更复杂，有的要传header，有的需要auth认证，有的传的是json body等。这些具体的各种情况，将会在后面持续更新。</div><div class="line"></div><div class="line"></div><div class="line"># 传header参数</div></pre></td></tr></table></figure></p><pre><code>@RequestMapping(value = &quot;/oauth/get_token&quot; , method = RequestMethod.POST)public String getAppTokenByName(@RequestHeader(&quot;X-Client-ID&quot;) String clientId, @RequestParam(&quot;username&quot;) String username);</code></pre><p>```</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-nexflix-微服务系列&quot;&gt;&lt;a href=&quot;#spring-nexflix-微服务系列&quot; class=&quot;headerlink&quot; title=&quot;spring nexflix 微服务系列&quot;&gt;&lt;/a&gt;spring nexflix 微服务系列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/&quot;&gt;spring-cloud-netflix之服务发现Eureka Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/&quot;&gt;spring-cloud-netflix之服务发现Eureka Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/&quot;&gt;spring-cloud微服务之Feign&lt;/a&gt;&lt;h2 id=&quot;Feign是什么&quot;&gt;&lt;a href=&quot;#Feign是什么&quot; class=&quot;headerlink&quot; title=&quot;Feign是什么&quot;&gt;&lt;/a&gt;Feign是什么&lt;/h2&gt;Feign是一个http的客户端，在微服务的世界中，因为有服务发现（Eureka），如果某个服务A要访问服务B， 可能需要两个步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;1 使用Eureka，通过注册的ServiceId，拿到B服务的IP和port&lt;/li&gt;
&lt;li&gt;2 再请求B服务的 接口，如”/getxxx”，这是使用的可能是RestTemplate等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Feign就是将上面两步合成一步的工具。&lt;/p&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;&lt;p&gt;为了完成这个测试，需要启动3个服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Eureka 服务发现 (端口23001)  &lt;a href=&quot;https://github.com/kunpengku/b_eureka&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kunpengku/b_eureka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 业务服务03  (端口23003)  &lt;a href=&quot;https://github.com/kunpengku/bus03&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kunpengku/bus03&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 业务服务07  (端口23007)  &lt;a href=&quot;https://github.com/kunpengku/bus07&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kunpengku/bus07&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我将演示的3个服务，在github上建立3个对象的项目，这样你就可以clone下来在本地同样的试试了。&lt;/p&gt;
&lt;h1 id=&quot;1-最简单的情况&quot;&gt;&lt;a href=&quot;#1-最简单的情况&quot; class=&quot;headerlink&quot; title=&quot;1 最简单的情况&quot;&gt;&lt;/a&gt;1 最简单的情况&lt;/h1&gt;&lt;p&gt;首先演示一种最简单的情况。&lt;br&gt;bus03 提供了一个接口（/bus），返回一句话。&lt;br&gt;bus07 要请求bus03 的这个接口。 所以需要在 bus07上 使用Feign client。&lt;/p&gt;
&lt;p&gt;这是bus03提供的接口：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@RestController&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BusController&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@RequestMapping&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;/bus&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;getInfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I am bus 03&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是直接请求 该接口的结果&lt;/p&gt;
&lt;img src=&quot;/2017/11/23/spring-cloud微服务之Feign/bus03.png&quot;&gt;
&lt;h1 id=&quot;2-EnableFeignClients注解&quot;&gt;&lt;a href=&quot;#2-EnableFeignClients注解&quot; class=&quot;headerlink&quot; title=&quot;2 EnableFeignClients注解&quot;&gt;&lt;/a&gt;2 EnableFeignClients注解&lt;/h1&gt;&lt;p&gt;bus07 想要使用feign访问这个接口，首先需要在 启动类上增加一个注解@EnableFeignClients。&lt;/p&gt;
&lt;p&gt;依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;spring-cloud-starter-feign&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@EnableEurekaClient&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@EnableFeignClients&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Bus07Application&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		SpringApplication.run(Bus07Application.class, args);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.youletter.cn/tags/java/"/>
    
      <category term="spring" scheme="http://www.youletter.cn/tags/spring/"/>
    
      <category term="cloud" scheme="http://www.youletter.cn/tags/cloud/"/>
    
      <category term="feign" scheme="http://www.youletter.cn/tags/feign/"/>
    
      <category term="eureka" scheme="http://www.youletter.cn/tags/eureka/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-netflix之服务发现Eureka Client</title>
    <link href="http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/"/>
    <id>http://www.youletter.cn/2017/11/18/spring-cloud-netflix之服务发现Eureka-Client/</id>
    <published>2017-11-18T14:38:44.000Z</published>
    <updated>2017-11-24T02:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-nexflix-微服务系列"><a href="#spring-nexflix-微服务系列" class="headerlink" title="spring nexflix 微服务系列"></a>spring nexflix 微服务系列</h2><ul><li><a href="http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/">spring-cloud-netflix之服务发现Eureka Server</a></li><li><a href="http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/">spring-cloud-netflix之服务发现Eureka Client</a></li><li><a href="http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/">spring-cloud微服务之Feign</a></li></ul><p>Eureka 是nexflix提供的 服务发现 解决方案。 当起来一个Eureka Server之后，目的就是让 其他微服务注册到其上面来 。 那么如何 成为一个Eureka 的client呢？</p><h3 id="1-添加pom依赖"><a href="#1-添加pom依赖" class="headerlink" title="1 添加pom依赖"></a>1 添加pom依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">&lt;groupId&gt;com.example&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;demo&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</div><div class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">&lt;name&gt;demo&lt;/name&gt;</div><div class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</div><div class="line"></div><div class="line">&lt;parent&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</div><div class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line"></div><div class="line">&lt;properties&gt;</div><div class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">&lt;spring-cloud.version&gt;Dalston.RELEASE&lt;/spring-cloud.version&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">&lt;scope&gt;test&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</div><div class="line">&lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;scope&gt;import&lt;/scope&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line"></div><div class="line">&lt;build&gt;</div><div class="line">&lt;plugins&gt;</div><div class="line">&lt;plugin&gt;</div><div class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">&lt;/plugin&gt;</div><div class="line">&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div><div class="line"></div><div class="line"></div><div class="line">&lt;/project&gt;</div></pre></td></tr></table></figure><p>其中关键的部分是 一下两段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;properties&gt;</div><div class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</div><div class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</div><div class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</div><div class="line">&lt;spring-cloud.version&gt;Dalston.RELEASE&lt;/spring-cloud.version&gt;</div><div class="line">&lt;/properties&gt;</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>这其实是一组 jar包。 在<artifactid>spring-cloud-starter-eureka</artifactid>之下可以看到具体的许多包。</p><a id="more"></a><h3 id="2-注册到Eureka"><a href="#2-注册到Eureka" class="headerlink" title="2 注册到Eureka"></a>2 注册到Eureka</h3><p>一个Spring boot的服务，如何注册到Eureka呢？需要加上@EnableEurekaClient 这个注解。 另外有一个注解是 @EnableDiscoveryClient。这两个注解有什么区别呢？<br>可以说 Eureka是 服务发现的一种具体实现，还可以有别的 方法实现服务发现。 当可用的 服务发现 只有Eureka时， EnableDiscoveryClient 所指的也 就是EnableEurekaClient。  可以说EnableEurekaClient是EnableDiscoveryClient的一种特例吧</p><p>Example code：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(DemoApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3 配置文件"></a>3 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://localhost:23001/eureka/</div><div class="line">    healthcheck:</div><div class="line">      enabled: true    </div><div class="line">server:</div><div class="line">  port: 23003</div><div class="line"></div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: business01</div></pre></td></tr></table></figure><p>defaultZone 会指定 ，去哪里注册服务。</p><p>默认的，${spring.application.name} 就是 在Eureka 注册的服务名，未来，别的Client在Eureka 只要提${spring.application.name} 这个名字， 也就找到了此服务。</p><p>如果开启了eureka.client.healthcheck.enabled=true,必须增加下面这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4 启动"></a>4 启动</h3><p>经过上面的配置， 就已经注册成为Eureka的client了。 启动之后 ，可以在Eureka的管理端中看到。</p><img src="/2017/11/18/spring-cloud-netflix之服务发现Eureka-Client/client1.png"><h3 id="5-Eureka-原生client"><a href="#5-Eureka-原生client" class="headerlink" title="5 Eureka 原生client"></a>5 Eureka 原生client</h3><p>可以通过Eureka 方便的获取服务的ip和端口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> EurekaClient discoveryClient;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serviceUrl</span><span class="params">()</span> </span>&#123;</div><div class="line">    InstanceInfo instance = discoveryClient.getNextServerFromEureka(<span class="string">"business01"</span>, <span class="keyword">false</span>);</div><div class="line">    <span class="keyword">return</span> instance.getHomePageUrl();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">defaultKaptcha</span><span class="params">()</span></span>&#123;</div><div class="line">    String s = serviceUrl();</div><div class="line">    System.out.println(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>serviceUrl()的返回结果是 <a href="http://192.168.31.44:23003/，" target="_blank" rel="external">http://192.168.31.44:23003/，</a> 这正是 business01 向Eureka注册的信息。避免了直接将ip，端口写在服务中。</p><h3 id="6-Feign-client"><a href="#6-Feign-client" class="headerlink" title="6 Feign client"></a>6 Feign client</h3><p>更进一步，其实也不需要使用原始的Eureka client来单纯的获取 调用服务的ip信息， Feign作为 Http的客户端，可以进一步的封装。对于Feign的用例，放到下一篇中。</p><p>参考文章<br><a href="http://www.itmuch.com/spring-cloud-sum-eureka/" target="_blank" rel="external">http://www.itmuch.com/spring-cloud-sum-eureka/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-nexflix-微服务系列&quot;&gt;&lt;a href=&quot;#spring-nexflix-微服务系列&quot; class=&quot;headerlink&quot; title=&quot;spring nexflix 微服务系列&quot;&gt;&lt;/a&gt;spring nexflix 微服务系列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/&quot;&gt;spring-cloud-netflix之服务发现Eureka Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/&quot;&gt;spring-cloud-netflix之服务发现Eureka Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/&quot;&gt;spring-cloud微服务之Feign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eureka 是nexflix提供的 服务发现 解决方案。 当起来一个Eureka Server之后，目的就是让 其他微服务注册到其上面来 。 那么如何 成为一个Eureka 的client呢？&lt;/p&gt;
&lt;h3 id=&quot;1-添加pom依赖&quot;&gt;&lt;a href=&quot;#1-添加pom依赖&quot; class=&quot;headerlink&quot; title=&quot;1 添加pom依赖&quot;&gt;&lt;/a&gt;1 添加pom依赖&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;groupId&amp;gt;com.example&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;artifactId&amp;gt;demo&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;name&amp;gt;demo&amp;lt;/name&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;description&amp;gt;Demo project for Spring Boot&amp;lt;/description&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;version&amp;gt;1.5.4.RELEASE&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;relativePath/&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/parent&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;spring-cloud.version&amp;gt;Dalston.RELEASE&amp;lt;/spring-cloud.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;artifactId&amp;gt;spring-cloud-dependencies&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;version&amp;gt;$&amp;#123;spring-cloud.version&amp;#125;&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/dependencies&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/dependencyManagement&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;build&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;plugins&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;plugin&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&amp;lt;/plugin&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;/plugins&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/build&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/project&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中关键的部分是 一下两段&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;spring-cloud.version&amp;gt;Dalston.RELEASE&amp;lt;/spring-cloud.version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;lt;artifactId&amp;gt;spring-cloud-starter-eureka&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这其实是一组 jar包。 在&lt;artifactid&gt;spring-cloud-starter-eureka&lt;/artifactid&gt;之下可以看到具体的许多包。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring-cloud-netflix之服务发现Eureka Server</title>
    <link href="http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/"/>
    <id>http://www.youletter.cn/2017/11/16/spring-cloud-netflix之服务发现Eureka-Server/</id>
    <published>2017-11-16T14:44:05.000Z</published>
    <updated>2017-11-24T02:11:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="spring-nexflix-微服务系列"><a href="#spring-nexflix-微服务系列" class="headerlink" title="spring nexflix 微服务系列"></a>spring nexflix 微服务系列</h2><ul><li><a href="http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/">spring-cloud-netflix之服务发现Eureka Server</a></li><li><a href="http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/">spring-cloud-netflix之服务发现Eureka Client</a></li><li><a href="http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/">spring-cloud微服务之Feign</a></li></ul><p>Eureka 是 netflix的微服务家族的发现服务（Service Discovery） ，提供给各个微服务注册。 避免各服务之间直接用ip，端口直接管理。当服务数量过多时，直接管理ip端口会是一场噩梦。所以要引入 服务发现。 本文介绍 如何 启动一个 Eureka服务。</p><p>我的pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kpk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>beureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>beureka<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot eureka<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Dalston.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><p>其中跟Eureka相关的是这两段</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure><p>如何启动一个Eureka Server</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.kpk.beureka;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeurekaApplication</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">SpringApplication.run(BeurekaApplication.class, args);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Eureka 是一个相当关键的服务 ，所以生产环境一个需要一个高可用的Eureka，Eureka支持分布式集群部署。</p><p>但是 作为demo，Eureka也支持 单点部署，即Standalone Mode</p><p>下面是我的配置文件 application.yml (Standalone Eureka Server).  默认端口是8761 ，我改成了23001</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: 23001</div><div class="line"></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: localhost</div><div class="line">    #prefer-ip-address true 表示服务注册时，使用ip地址 而不是hostname</div><div class="line">    prefer-ip-address: true</div><div class="line">  client:</div><div class="line">    registerWithEureka: false</div><div class="line">    fetchRegistry: false</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure><p>Eureka 相互发现的介绍 <a href="https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_peer_awareness" target="_blank" rel="external">https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#_peer_awareness</a></p><p>prefer-ip-address参数，当这个参数为true时， 微服务在Eureka注册时 ，使用ip地址，而不是主机名。</p><p>现在就可以启动服务了。</p><p>访问<br><a href="http://localhost:23001/" target="_blank" rel="external">http://localhost:23001/</a> 可以看到Eureka的管理页面 ，显示 有哪些服务注册了。</p><img src="/2017/11/16/spring-cloud-netflix之服务发现Eureka-Server/eureka.png" title="eureka"><p>参考官方文档<br><a href="https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#spring-cloud-eureka-server" target="_blank" rel="external">https://cloud.spring.io/spring-cloud-netflix/single/spring-cloud-netflix.html#spring-cloud-eureka-server</a></p><p>在Eureka Server上有两个默认的endpoint</p><p>/info    可以查看Eureka的信息</p><p>/health  可以查看Eureka的健康状态</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;spring-nexflix-微服务系列&quot;&gt;&lt;a href=&quot;#spring-nexflix-微服务系列&quot; class=&quot;headerlink&quot; title=&quot;spring nexflix 微服务系列&quot;&gt;&lt;/a&gt;spring nexflix 微服务系列&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/16/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Server/&quot;&gt;spring-cloud-netflix之服务发现Eureka Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/18/spring-cloud-netflix%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0Eureka-Client/&quot;&gt;spring-cloud-netflix之服务发现Eureka Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youletter.cn/2017/11/23/spring-cloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8BFeign/&quot;&gt;spring-cloud微服务之Feign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eureka 是 netflix的微服务家族的发现服务（Service Discovery） ，提供给各个微服务注册。 避免各服务之间直接用ip，端口直接管理。当服务数量过多时，直接管理ip端口会是一场噩梦。所以要引入 服务发现。 本文介绍 如何 启动一个 Eureka服务。&lt;/p&gt;
&lt;p&gt;我的pom.xml文件&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;4.0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;modelVersion&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.kpk&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;beureka&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0.1-SNAPSHOT&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;jar&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;packaging&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;beureka&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;Demo project for Spring Boot eureka&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;description&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.reporting.outputEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.reporting.outputEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;java.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;spring-cloud.version&lt;/span&gt;&amp;gt;&lt;/span&gt;Dalston.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;spring-cloud.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.5.4.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;relativePath&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;parent&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-starter-eureka-server&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-autoconfigure&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.cloud&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-cloud-dependencies&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;$&amp;#123;spring-cloud.version&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;pom&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;type&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;import&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependencyManagement&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;				&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-maven-plugin&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugin&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;build&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java中4种方法将String转为JSON</title>
    <link href="http://www.youletter.cn/2017/11/16/4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%B0%86String%E8%BD%AC%E4%B8%BAJSON/"/>
    <id>http://www.youletter.cn/2017/11/16/4种方法将String转为JSON/</id>
    <published>2017-11-15T16:58:29.000Z</published>
    <updated>2017-11-21T23:30:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何将一个Json的字符串转换成 JSON Object，目前JDK并不支持这种转换，好在有一些开源的库可以帮助做这件事，比如Gson , Jackson, 和 json-simple。这个教程就是介绍这三个库的用法。</p><p>我们的例子中，要转换的字符串是下面这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">jsonString = &#123;</div><div class="line">  <span class="string">"name"</span> : <span class="string">"kpk"</span>,</div><div class="line">  <span class="string">"company"</span> : <span class="string">"soccer"</span>,</div><div class="line">  <span class="string">"score"</span> : [ <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span> ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="Gson-实现-String-to-JSON-Object"><a href="#Gson-实现-String-to-JSON-Object" class="headerlink" title="Gson 实现 String to JSON Object"></a>Gson 实现 String to JSON Object</h1><p>添加依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.8.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>只需要两行就可以实现转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Gson g = <span class="keyword">new</span> Gson();</div><div class="line">SimpleOne p = g.fromJson(jsonString, SimpleOne.class);</div></pre></td></tr></table></figure><a id="more"></a><p>首先需要写一个class用于接收字符串转化后的对象。我们这里是 SimpleOne</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleOne</span> </span>&#123;</div><div class="line">    String name;</div><div class="line">    String company;</div><div class="line">    List&lt;Long&gt; score;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"SimpleOne&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", company='"</span> + company + <span class="string">'\''</span> + <span class="string">", score="</span> + score + <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以将一个对象转换为 json字符串，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String str = g.toJson(p);</div></pre></td></tr></table></figure><p>测试代码为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String jsonString = <span class="string">"&#123;\"name\":\"kpk\", \"company\":\"apple\", \"score\":[1,2,3]&#125;"</span>;</div><div class="line"></div><div class="line"><span class="comment">// string 到 对象</span></div><div class="line">        Gson g = <span class="keyword">new</span> Gson();</div><div class="line">        SimpleOne p = g.fromJson(jsonString, SimpleOne.class);</div><div class="line">        System.out.println(p);</div><div class="line">        <span class="comment">// 对象 到 json string</span></div><div class="line">        String str = g.toJson(p);</div><div class="line">        System.out.println(str);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="使用-JSON-Simple-进行-JSON-String-to-Java-object"><a href="#使用-JSON-Simple-进行-JSON-String-to-Java-object" class="headerlink" title="使用 JSON-Simple 进行 JSON String to Java object"></a>使用 JSON-Simple 进行 JSON String to Java object</h1><p>JSON-Simple的特点是占用内存小，适用于内存紧张的场景，如J2ME 和 Android。</p><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.googlecode.json-simple&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;json-simple&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.1.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>要注意引用正确的JSONObject和JSONParser的包。</p><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> kpk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.json.simple.JSONObject;</div><div class="line"><span class="keyword">import</span> org.json.simple.parser.JSONParser;</div><div class="line"><span class="keyword">import</span> org.json.simple.parser.ParseException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * &lt;/p&gt;</span></div><div class="line"><span class="comment"> * DATE 17/11/15.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> fupeng.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONSimpleTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</div><div class="line">        String jsonString = <span class="string">"&#123;\"name\":\"kpk\", \"company\":\"apple\", \"score\":[1,2,3]&#125;"</span>;</div><div class="line"></div><div class="line">        JSONParser parser = <span class="keyword">new</span> JSONParser();</div><div class="line">        JSONObject json = (JSONObject) parser.parse(jsonString);</div><div class="line"></div><div class="line">        System.out.println(json);</div><div class="line">        System.out.println(json.get(<span class="string">"name"</span>));</div><div class="line">        System.out.println(json.get(<span class="string">"company"</span>));</div><div class="line">        System.out.println(json.get(<span class="string">"score"</span>));</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>json-simple 兼容jdk1.2  好像在2012年这个包就不更新了。 所以，现在不建议使用这种方法来 反序列化json字符串。应该算是历史的产物。<br>这种方法不需要你实现定义一个对象，它用HashMap来存储对象。</p><h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.9.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;2.8.10&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>Jackson 示例如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> kpk;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String jsonString = <span class="string">"&#123;\"name\":\"kpk\", \"company\":\"apple\", \"score\":[1,2,3]&#125;"</span>;</div><div class="line">        SimpleOne ronaldo = <span class="keyword">new</span> ObjectMapper().readValue(jsonString, SimpleOne.class);</div><div class="line">        System.out.println(ronaldo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Jackson 也需要定义一个POJO的类，而且还必须有setter/getter的方法，不然会报错。<br>据说Jackson在Java的世界非常流行，可以处理非常的大的Json字符串的转化，性能很好。</p><h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><p>alibaba出品的Json工具，阿里的技术棒棒的。</p><p>Fastjson Quick Start</p><p><a href="https://github.com/alibaba/fastjson/wiki/Samples-DataBind" target="_blank" rel="external">https://github.com/alibaba/fastjson/wiki/Samples-DataBind</a></p><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.2.40&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String jsonString = <span class="string">"&#123;\"name\":\"kpk\", \"company\":\"apple\", \"score\":[1,2,3]&#125;"</span>;</div><div class="line">        SimpleOne p = JSON.parseObject(jsonString, SimpleOne.class);</div><div class="line">        System.out.println(p);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我会使用 Gson 或者 fastjson ，比较简便。</p><p>json-simple基本上过时了。</p><p>Jackson没用过</p><p>原文地址 <a href="http://www.java67.com/2016/10/3-ways-to-convert-string-to-json-object-in-java.html" target="_blank" rel="external">http://www.java67.com/2016/10/3-ways-to-convert-string-to-json-object-in-java.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何将一个Json的字符串转换成 JSON Object，目前JDK并不支持这种转换，好在有一些开源的库可以帮助做这件事，比如Gson , Jackson, 和 json-simple。这个教程就是介绍这三个库的用法。&lt;/p&gt;
&lt;p&gt;我们的例子中，要转换的字符串是下面这个&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;jsonString = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;kpk&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;company&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;soccer&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;score&quot;&lt;/span&gt; : [ &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Gson-实现-String-to-JSON-Object&quot;&gt;&lt;a href=&quot;#Gson-实现-String-to-JSON-Object&quot; class=&quot;headerlink&quot; title=&quot;Gson 实现 String to JSON Object&quot;&gt;&lt;/a&gt;Gson 实现 String to JSON Object&lt;/h1&gt;&lt;p&gt;添加依赖&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;com.google.code.gson&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;gson&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;2.8.0&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只需要两行就可以实现转换&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Gson g = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Gson();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SimpleOne p = g.fromJson(jsonString, SimpleOne.class);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.youletter.cn/tags/java/"/>
    
      <category term="json" scheme="http://www.youletter.cn/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Java-Enum用法</title>
    <link href="http://www.youletter.cn/2017/11/10/Java-Enum%E7%94%A8%E6%B3%95/"/>
    <id>http://www.youletter.cn/2017/11/10/Java-Enum用法/</id>
    <published>2017-11-10T01:22:28.000Z</published>
    <updated>2017-11-21T23:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>枚举主要是硬编码的问题。<br>下面是一个Enum用法示例</p><p>Phone.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * &lt;/p&gt;</span></div><div class="line"><span class="comment"> * DATE 17/11/10.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> fupeng.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Phone &#123;</div><div class="line">    IPHONE &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> IPHONE_PRICE;</div><div class="line">        &#125;</div><div class="line">    &#125;, XIAOMI &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> XIAOMI_PRICE;</div><div class="line">        &#125;</div><div class="line">    &#125;, HUAWEI &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> HUAWEI_PRICE;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IPHONE_PRICE = <span class="number">9888</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> XIAOMI_PRICE = <span class="number">3888</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HUAWEI_PRICE = <span class="number">4888</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AbstractMethodError();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Phone <span class="title">ofPrice</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (p) &#123;</div><div class="line">            <span class="keyword">case</span> IPHONE_PRICE:</div><div class="line">                <span class="keyword">return</span> IPHONE;</div><div class="line">            <span class="keyword">case</span> HUAWEI_PRICE:</div><div class="line">                <span class="keyword">return</span> HUAWEI;</div><div class="line">            <span class="keyword">case</span> XIAOMI_PRICE:</div><div class="line">                <span class="keyword">return</span> XIAOMI;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>TestEnum.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * &lt;/p&gt;</span></div><div class="line"><span class="comment"> * DATE 17/11/10.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> fupeng.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnum</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(Phone.IPHONE.price());</div><div class="line">        System.out.println(Phone.IPHONE.name());</div><div class="line"></div><div class="line">        System.out.println(Phone.valueOf(<span class="string">"IPHONE"</span>) == Phone.IPHONE);</div><div class="line">        System.out.println(Phone.ofPrice(<span class="number">9888</span>) == Phone.IPHONE);</div><div class="line">        System.out.println(Phone.ofPrice(<span class="number">9888</span>) == Phone.HUAWEI);</div><div class="line">        System.out.println(Phone.ofPrice(<span class="number">9888</span>) == Phone.XIAOMI);</div><div class="line">        System.out.println(Phone.ofPrice(<span class="number">3888</span>) == Phone.XIAOMI);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;枚举主要是硬编码的问题。&lt;br&gt;下面是一个Enum用法示例&lt;/p&gt;
&lt;p&gt;Phone.java&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Description&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * DATE 17/11/10.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; fupeng.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Phone &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    IPHONE &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; IPHONE_PRICE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, XIAOMI &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; XIAOMI_PRICE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;, HUAWEI &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HUAWEI_PRICE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; IPHONE_PRICE = &lt;span class=&quot;number&quot;&gt;9888&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; XIAOMI_PRICE = &lt;span class=&quot;number&quot;&gt;3888&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; HUAWEI_PRICE = &lt;span class=&quot;number&quot;&gt;4888&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbstractMethodError();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Phone &lt;span class=&quot;title&quot;&gt;ofPrice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (p) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; IPHONE_PRICE:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; IPHONE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; HUAWEI_PRICE:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HUAWEI;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; XIAOMI_PRICE:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; XIAOMI;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RuntimeException();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="enum" scheme="http://www.youletter.cn/tags/enum/"/>
    
      <category term="枚举" scheme="http://www.youletter.cn/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>Java-时间utils</title>
    <link href="http://www.youletter.cn/2017/11/10/Java-%E6%97%B6%E9%97%B4utils/"/>
    <id>http://www.youletter.cn/2017/11/10/Java-时间utils/</id>
    <published>2017-11-10T01:08:34.000Z</published>
    <updated>2017-11-21T23:31:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>TimeUnit来自JDK1.5，是一个枚举Enum</p><p>先列出所有的枚举值</p><ul><li>TimeUnit.NANOSECONDS 纳秒 = 千分之一微秒</li><li>TimeUnit.MICROSECONDS 微秒 = 千分之一毫秒</li><li>TimeUnit.MILLISECONDS 毫秒 = 千分之一秒</li><li>TimeUnit.SECONDS 秒</li><li>TimeUnit.MINUTES 分钟</li><li>TimeUnit.HOURS 小时</li><li>TimeUnit.DAYS 天</li></ul><p>这个类提供了时间的表示和转换。如5天有多少秒，3天有多少小时。<br>比如 在redis中 要给某个key设置失效时间，单位是s。 你想设置失效时间为24天，则这样方便得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TimeUnit.DAYS.toSeconds(<span class="number">24</span>)</div></pre></td></tr></table></figure><p>下面是更多的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description</span></div><div class="line"><span class="comment"> * &lt;p&gt;</span></div><div class="line"><span class="comment"> * &lt;/p&gt;</span></div><div class="line"><span class="comment"> * DATE 17/11/10.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> fupeng.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTimeUnit</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"24天有多少秒："</span> + TimeUnit.DAYS.toSeconds(<span class="number">24</span>));</div><div class="line">        System.out.println(<span class="string">"1天有多少分钟："</span> + TimeUnit.DAYS.toMinutes(<span class="number">1</span>));</div><div class="line">        System.out.println(<span class="string">"一天有多少小时："</span> + TimeUnit.DAYS.toHours(<span class="number">1</span>));</div><div class="line">        System.out.println(<span class="string">"2天有多少秒："</span> + TimeUnit.DAYS.toSeconds(<span class="number">2</span>));</div><div class="line">        System.out.println(<span class="string">"10W秒是多少小时"</span> + TimeUnit.SECONDS.toHours(<span class="number">100000</span>));</div><div class="line">        System.out.println(<span class="string">"1W秒是多少分钟"</span> + TimeUnit.SECONDS.toMinutes(<span class="number">100000</span>));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">24天有多少秒：2073600</div><div class="line">1天有多少分钟：1440</div><div class="line">一天有多少小时：24</div><div class="line">2天有多少秒：172800</div><div class="line">10W秒是多少小时27</div><div class="line">1W秒是多少分钟1666</div></pre></td></tr></table></figure><p>另外TimeUnit这个类是一个Enum，观察这个类的内部实现也是对Enum的一个好的学习过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TimeUnit来自JDK1.5，是一个枚举Enum&lt;/p&gt;
&lt;p&gt;先列出所有的枚举值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TimeUnit.NANOSECONDS 纳秒 = 千分之一微秒&lt;/li&gt;
&lt;li&gt;TimeUnit.MICROSECONDS 微秒 = 千分之一毫秒&lt;/li&gt;
&lt;li&gt;TimeUnit.MILLISECONDS 毫秒 = 千分之一秒&lt;/li&gt;
&lt;li&gt;TimeUnit.SECONDS 秒&lt;/li&gt;
&lt;li&gt;TimeUnit.MINUTES 分钟&lt;/li&gt;
&lt;li&gt;TimeUnit.HOURS 小时&lt;/li&gt;
&lt;li&gt;TimeUnit.DAYS 天&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个类提供了时间的表示和转换。如5天有多少秒，3天有多少小时。&lt;br&gt;比如 在redis中 要给某个key设置失效时间，单位是s。 你想设置失效时间为24天，则这样方便得到：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TimeUnit.DAYS.toSeconds(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是更多的实例&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.TimeUnit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * Description&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &amp;lt;/p&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * DATE 17/11/10.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; *&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@author&lt;/span&gt; fupeng.&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;TestTimeUnit&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;24天有多少秒：&quot;&lt;/span&gt; + TimeUnit.DAYS.toSeconds(&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;1天有多少分钟：&quot;&lt;/span&gt; + TimeUnit.DAYS.toMinutes(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;一天有多少小时：&quot;&lt;/span&gt; + TimeUnit.DAYS.toHours(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;2天有多少秒：&quot;&lt;/span&gt; + TimeUnit.DAYS.toSeconds(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;10W秒是多少小时&quot;&lt;/span&gt; + TimeUnit.SECONDS.toHours(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;1W秒是多少分钟&quot;&lt;/span&gt; + TimeUnit.SECONDS.toMinutes(&lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="TimeUnit" scheme="http://www.youletter.cn/tags/TimeUnit/"/>
    
      <category term="时间工具" scheme="http://www.youletter.cn/tags/%E6%97%B6%E9%97%B4%E5%B7%A5%E5%85%B7/"/>
    
      <category term="时间单位" scheme="http://www.youletter.cn/tags/%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>Linux下安装nodejs/node/npm</title>
    <link href="http://www.youletter.cn/2017/11/04/Linux%E4%B8%8B%E5%AE%89%E8%A3%85nodejs-node-npm/"/>
    <id>http://www.youletter.cn/2017/11/04/Linux下安装nodejs-node-npm/</id>
    <published>2017-11-04T14:45:06.000Z</published>
    <updated>2017-11-21T23:31:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>npm 全称 node package manager. 是nodejs的包管理工具。</p><p>官网是 <a href="https://www.npmjs.com/" target="_blank" rel="external">https://www.npmjs.com/</a></p><p>国内网站 <a href="http://nodejs.cn/" target="_blank" rel="external">http://nodejs.cn/</a></p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><h3 id="源码编译安装（不推荐）"><a href="#源码编译安装（不推荐）" class="headerlink" title="源码编译安装（不推荐）"></a>源码编译安装（不推荐）</h3><p>因为，如果你的环境 编译工具不全，得先安装依赖，会耗费更多时间。</p><h3 id="下载编译好的程序"><a href="#下载编译好的程序" class="headerlink" title="下载编译好的程序"></a>下载编译好的程序</h3><ul><li><p>step 1 </p><p> 对于64的Linux，下载红框标出的压缩文件<br> <a href="http://nodejs.cn/download/" target="_blank" rel="external">http://nodejs.cn/download/</a></p> <img src="/2017/11/04/Linux下安装nodejs-node-npm/download_page.png" title="check image"><p> 可以直接在服务器下载</p><p> cd /opt</p><p> wget <a href="https://npm.taobao.org/mirrors/node/v8.7.0/node-v8.7.0-linux-x64.tar.xz" target="_blank" rel="external">https://npm.taobao.org/mirrors/node/v8.7.0/node-v8.7.0-linux-x64.tar.xz</a></p><p> tar xvf node-v8.7.0-linux-x64.tar.xz</p><p> mv node-v8.7.0-linux-x64 nodejs</p><p> 检查nodejs的目录bin下 是否有 node 和 npm文件</p> <img src="/2017/11/04/Linux下安装nodejs-node-npm/checkbin2.png" title="check image"></li></ul><a id="more"></a><ul><li><p>step 2</p><p>  建立软连接，将npm和node放入/usr/local/bin/ 下供全局访问</p><p>  ln -s /opt/nodejs/bin/npm /usr/local/bin/ </p><p> ln -s /opt/nodejs/bin/node /usr/local/bin/</p></li><li><p>step 3</p><p>最后一步检验nodejs是否安装成功</p><img src="/2017/11/04/Linux下安装nodejs-node-npm/version.png" title="version image"></li></ul><p>完</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;npm 全称 node package manager. 是nodejs的包管理工具。&lt;/p&gt;
&lt;p&gt;官网是 &lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.npmjs.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国内网站 &lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;安装方法&quot;&gt;&lt;a href=&quot;#安装方法&quot; class=&quot;headerlink&quot; title=&quot;安装方法&quot;&gt;&lt;/a&gt;安装方法&lt;/h2&gt;&lt;h3 id=&quot;源码编译安装（不推荐）&quot;&gt;&lt;a href=&quot;#源码编译安装（不推荐）&quot; class=&quot;headerlink&quot; title=&quot;源码编译安装（不推荐）&quot;&gt;&lt;/a&gt;源码编译安装（不推荐）&lt;/h3&gt;&lt;p&gt;因为，如果你的环境 编译工具不全，得先安装依赖，会耗费更多时间。&lt;/p&gt;
&lt;h3 id=&quot;下载编译好的程序&quot;&gt;&lt;a href=&quot;#下载编译好的程序&quot; class=&quot;headerlink&quot; title=&quot;下载编译好的程序&quot;&gt;&lt;/a&gt;下载编译好的程序&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;step 1 &lt;/p&gt;
&lt;p&gt; 对于64的Linux，下载红框标出的压缩文件&lt;br&gt; &lt;a href=&quot;http://nodejs.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.cn/download/&lt;/a&gt;&lt;/p&gt;
 &lt;img src=&quot;/2017/11/04/Linux下安装nodejs-node-npm/download_page.png&quot; title=&quot;check image&quot;&gt;
&lt;p&gt; 可以直接在服务器下载&lt;/p&gt;
&lt;p&gt; cd /opt&lt;/p&gt;
&lt;p&gt; wget &lt;a href=&quot;https://npm.taobao.org/mirrors/node/v8.7.0/node-v8.7.0-linux-x64.tar.xz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://npm.taobao.org/mirrors/node/v8.7.0/node-v8.7.0-linux-x64.tar.xz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; tar xvf node-v8.7.0-linux-x64.tar.xz&lt;/p&gt;
&lt;p&gt; mv node-v8.7.0-linux-x64 nodejs&lt;/p&gt;
&lt;p&gt; 检查nodejs的目录bin下 是否有 node 和 npm文件&lt;/p&gt;
 &lt;img src=&quot;/2017/11/04/Linux下安装nodejs-node-npm/checkbin2.png&quot; title=&quot;check image&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://www.youletter.cn/tags/nodejs/"/>
    
      <category term="npm" scheme="http://www.youletter.cn/tags/npm/"/>
    
      <category term="node" scheme="http://www.youletter.cn/tags/node/"/>
    
  </entry>
  
</feed>

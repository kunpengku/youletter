<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>由来</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.youletter.cn/"/>
  <updated>2018-07-21T07:38:10.259Z</updated>
  <id>http://www.youletter.cn/</id>
  
  <author>
    <name>kunpengku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 8 新特性</title>
    <link href="http://www.youletter.cn/2018/07/19/Java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://www.youletter.cn/2018/07/19/Java-8-新特性/</id>
    <published>2018-07-19T09:10:07.000Z</published>
    <updated>2018-07-21T07:38:10.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach() 方法"></a>forEach() 方法</h1><p>example </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.vipkid.school.account.utils;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/19.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">public class TTTT &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //creating sample Collection</span><br><span class="line">        List&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) myList.add(i);</span><br><span class="line"></span><br><span class="line">        System.out.println(myList);</span><br><span class="line"></span><br><span class="line">        //traversing using Iterator</span><br><span class="line">        Iterator&lt;Integer&gt; it = myList.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            Integer i = it.next();</span><br><span class="line">            System.out.println(&quot;Iterator Value::&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //traversing through forEach method of Iterable with anonymous class</span><br><span class="line">        myList.forEach(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer t) &#123;</span><br><span class="line">                System.out.println(&quot;forEach with anonymous class ::&quot; + t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //traversing through forEach method of Iterable with lambda expression</span><br><span class="line">        myList.forEach(t -&gt; System.out.println(&quot;forEach lambda Value::&quot; + t));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-8-对interface的修改"><a href="#Java-8-对interface的修改" class="headerlink" title="Java 8 对interface的修改"></a>Java 8 对interface的修改</h1><p>增加 接口中方法的 默认实现。</p><p>以前 接口的方法是 不能实现的。</p><p>Interface1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Interface1 &#123;</span><br><span class="line"></span><br><span class="line">    void method1(String str);</span><br><span class="line"></span><br><span class="line">    default void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;I1 logging::&quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void print(String str)&#123;</span><br><span class="line">        System.out.println(&quot;Printing 1 &quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //trying to override Object method gives compile time error as</span><br><span class="line">    //&quot;A default method cannot override a method from java.lang.Object&quot;  接口中的方法，不能重写 Object中的方法。</span><br><span class="line"></span><br><span class="line">//default String toString()&#123;</span><br><span class="line">//return &quot;i1&quot;;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    void method2();</span><br><span class="line"></span><br><span class="line">    default void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;I2 logging::&quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在假设有两个接口 Interface1 和 Interface2.  有一个类要实现这两个接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyClass implements Interface1, Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void method2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void method1(String str) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //MyClass won&apos;t compile without having it&apos;s own log() implementation</span><br><span class="line">    @Override</span><br><span class="line">    public void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;MyClass logging::&quot;+str);</span><br><span class="line">        Interface1.print(&quot;abc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现，除了要实现method1 和 method2 意外，还需要实现 log 这个方法 。 如果 不是这种多继承 ，这个方法是不用实现的。因为 log已经有 默认实现了。 但是 ，发现，这两个接口都有这个 方法 ，而且都有默认实现。所以，对于log，MyClass 需要 再重写一下 。</p><p>接口中的方法，想要实现，可以用 default 或者 static 关键字。 区别就是 ，default的方法是一个 实例方法。 static是一个 静态方法，类方法。不需要实例就可以调用。可以在接口中直接调用。 但是不能被实例调用。 (Java interface static method is visible to interface methods only) <a href="https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method#java-interface-static-method" target="_blank" rel="noopener">Java 8 Interface Changes – static method, default method</a></p><p>参考：<br><a href="https://www.journaldev.com/2389/java-8-features-with-examples" target="_blank" rel="noopener">Java 8 Features with Examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;forEach-方法&quot;&gt;&lt;a href=&quot;#forEach-方法&quot; class=&quot;headerlink&quot; title=&quot;forEach() 方法&quot;&gt;&lt;/a&gt;forEach() 方法&lt;/h1&gt;&lt;p&gt;example &lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java工具类</title>
    <link href="http://www.youletter.cn/2018/07/19/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.youletter.cn/2018/07/19/Java工具类/</id>
    <published>2018-07-19T02:39:41.000Z</published>
    <updated>2018-07-19T02:40:08.968Z</updated>
    
    <content type="html"><![CDATA[<p>时间相关</p><p>SimpleDateFormat</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间相关&lt;/p&gt;
&lt;p&gt;SimpleDateFormat&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何构成一个传统web服务</title>
    <link href="http://www.youletter.cn/2018/07/19/%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E4%B8%80%E4%B8%AA%E4%BC%A0%E7%BB%9Fweb%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.youletter.cn/2018/07/19/如何构成一个传统web服务/</id>
    <published>2018-07-18T16:00:12.000Z</published>
    <updated>2018-07-18T16:10:59.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>数据存在哪儿， Mysql等保存持久化数据。 redis，作为缓存。ES来提供搜索。</p><h1 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h1><p>用一个服务程序，来进行数据读写。进行一些逻辑动作。<br>这个服务可以是 Java 用 Spring boot 快速搭建。<br>Python Gunicorn等。 </p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>展示到浏览器上。 </p><p>微信小程序。</p><p>APP （IOS， Android）</p><h1 id="工具-utils"><a href="#工具-utils" class="headerlink" title="工具 utils"></a>工具 utils</h1><p>短信</p><p>邮件</p><p>支付</p><p>文件</p><p>视频直播</p><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><p>服务器， 云主机， CDN， 域名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h1&gt;&lt;p&gt;数据存在哪儿， Mysql等保存持久化数据。 redis，作为缓存。ES来提供搜索。&lt;/p&gt;
&lt;h1 id=&quot;HTTP-Server&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何安装pip</title>
    <link href="http://www.youletter.cn/2018/07/18/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/"/>
    <id>http://www.youletter.cn/2018/07/18/如何安装pip/</id>
    <published>2018-07-18T15:50:43.000Z</published>
    <updated>2018-07-18T15:50:58.644Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">https://pip.pypa.io/en/stable/installing/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pip.pypa.io/en/stable/installing/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Why We Need Lambda Expressions in Java - Part 1</title>
    <link href="http://www.youletter.cn/2018/07/10/Why-We-Need-Lambda-Expressions-in-Java-Part-1/"/>
    <id>http://www.youletter.cn/2018/07/10/Why-We-Need-Lambda-Expressions-in-Java-Part-1/</id>
    <published>2018-07-10T09:44:38.000Z</published>
    <updated>2018-07-10T11:14:42.976Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 表达式在Java 8 加入了。我计划联合其他几位作者写一本关于这个主题的书。<br>本文的目的是告诉你，为什么现代的编程语言必须要有Lamdba表达式。</p><p>函数式接口</p><p>source:<a href="https://dzone.com/articles/why-we-need-Lambda-expressions" target="_blank" rel="noopener">Why We Need Lambda Expressions in Java - Part 1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lambda 表达式在Java 8 加入了。我计划联合其他几位作者写一本关于这个主题的书。&lt;br&gt;本文的目的是告诉你，为什么现代的编程语言必须要有Lamdba表达式。&lt;/p&gt;
&lt;p&gt;函数式接口&lt;/p&gt;
&lt;p&gt;source:&lt;a href=&quot;https://dzone.com
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java Lambda</title>
    <link href="http://www.youletter.cn/2018/07/10/java-Lambda/"/>
    <id>http://www.youletter.cn/2018/07/10/java-Lambda/</id>
    <published>2018-07-10T03:59:11.000Z</published>
    <updated>2018-07-10T13:49:35.879Z</updated>
    
    <content type="html"><![CDATA[<p>接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.example.kpk.demo_valid;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/10.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface WorkerInterface &#123;</span><br><span class="line"></span><br><span class="line">    public void doSomeWork();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.kpk.demo_valid;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/10.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">public class TestLambda &#123;</span><br><span class="line"></span><br><span class="line">    public static void execute(WorkerInterface worker) &#123;</span><br><span class="line">        worker.doSomeWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">        //invoke doSomeWork using Annonymous class</span><br><span class="line">        execute(new WorkerInterface() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void doSomeWork() &#123;</span><br><span class="line">                System.out.println(&quot;Worker invoked using Anonymous class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        execute(() -&gt; System.out.println(&quot;another invoked using Lambda expression&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>source: <a href="http://blog.oneapm.com/apm-tech/226.html" target="_blank" rel="noopener">深入浅出 Java 8 Lambda 表达式</a></p><p><a href="http://viralpatel.net/blogs/Lambda-expressions-java-tutorial/" target="_blank" rel="noopener">Java 8 Lambda Expressions Tutorial with Examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接口&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="http://www.youletter.cn/2018/07/06/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.youletter.cn/2018/07/06/git-常用命令/</id>
    <published>2018-07-06T01:04:16.000Z</published>
    <updated>2018-07-06T01:04:31.058Z</updated>
    
    <content type="html"><![CDATA[<p>git stash<br>git stash pop</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git stash&lt;br&gt;git stash pop&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>next-word</title>
    <link href="http://www.youletter.cn/2018/07/01/next-word/"/>
    <id>http://www.youletter.cn/2018/07/01/next-word/</id>
    <published>2018-07-01T08:49:06.000Z</published>
    <updated>2018-07-01T08:51:50.342Z</updated>
    
    <content type="html"><![CDATA[<p>确信无疑 quexinwuyi -  certainly</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;确信无疑 quexinwuyi -  certainly&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>月亮和六便士</title>
    <link href="http://www.youletter.cn/2018/06/28/%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB/"/>
    <id>http://www.youletter.cn/2018/06/28/月亮和六便士/</id>
    <published>2018-06-28T13:29:02.000Z</published>
    <updated>2018-06-28T13:29:33.620Z</updated>
    
    <content type="html"><![CDATA[<p>source:<br><a href="http://www.gutenberg.org/files/222/222-h/222-h.htm" target="_blank" rel="noopener">The Moon and Sixpence</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;source:&lt;br&gt;&lt;a href=&quot;http://www.gutenberg.org/files/222/222-h/222-h.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Moon and Sixpence&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://www.youletter.cn/2018/06/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://www.youletter.cn/2018/06/27/小程序/</id>
    <published>2018-06-27T06:30:08.000Z</published>
    <updated>2018-06-28T12:25:13.273Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5ac9b72cf265da23906c486a" target="_blank" rel="noopener">手把手教会你小程序登录鉴权</a></p><p><a href="https://github.com/wechat-group/weixin-java-tools" target="_blank" rel="noopener">微信后端工具包</a></p><p><a href="https://github.com/binarywang/weixin-java-miniapp-demo" target="_blank" rel="noopener">weixin-java-miniapp-demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ac9b72cf265da23906c486a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手教会你小程序登录鉴权&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最佳实践-有毒</title>
    <link href="http://www.youletter.cn/2018/06/22/best-practice-considered-harmfull/"/>
    <id>http://www.youletter.cn/2018/06/22/best-practice-considered-harmfull/</id>
    <published>2018-06-22T02:36:49.000Z</published>
    <updated>2018-06-28T10:12:44.801Z</updated>
    
    <content type="html"><![CDATA[<p>我长时间以来对所谓“最佳实践”感到困惑。在我脑海中藏着两个问题：</p><ul><li>谁来决定这就是最佳实践</li><li>谁说这种实践不能做得更佳？</li></ul><p>有个从事石油工业的人跟我说，通常合同中会指定应该使用的“最佳实践”，但实际的实践却很少是指定的那个。而且每个人对于最佳实践都有自己的理解。直到遇到一个突发实践，直到钱都已经花光了，这时他们才来裁决什么是最佳实践。</p><p>就算某个实践在这个时间点上可能最好的做法，但是它能提升多少如何计算呢？声称某个实践是最佳实践，你可能会因此自我限制并潜在地阻止创新。</p><p><a href="http://mobileservices.texterity.com/mitsmr/spring_2018/MobilePagedArticle.action?articleId=1364542&amp;folio=85&amp;lm=1524856788000&amp;linkImageSrc=/mitsmr/spring_2018/data/imgpages/mobile_tn2/0087_murwap.png#articleId1364542" target="_blank" rel="noopener">Why Best Practices Often Fall Short</a></p><p>对于新手，有时人们无法正确的识别出能产生价值的实践行为。很多人看了皮克斯动画公司之后，决定把厕所放在办公室的中间来提高创造力。他们确实这么做了，但是还有很多其他事情发生在皮克斯动画公司。在你的组织中，单单移动厕所的位置可能并不会对创造力产生大的改变。</p><p>还有更糟糕的事。</p><p>他人的最佳实践并不意味着在你的环境中也是最佳的。想想你移动厕所所花费的费用，想想给那些不想移动工位的同事带来的烦恼，还有在此过程中损失的生产效率。</p><p>作者建议说，在有些情况下，最佳时间带来的破坏性比带来的好处还要多。所以一些组织最好还是应避免“最佳实践”，按照自己的情况来进行。</p><p>还有更糟糕的事。</p><p>这些“最佳实践”中有一些风险。包括他们会耗费更多资源，包括不能正确的实行，包括可能会适得其反。还是那句话，最适合别人的未必最适合你。</p><p>事实上, 一些最佳实践 (比如高管股票期权) 可能会导致可怕错误, 引发你最不希望的行为。</p><p>那么, 一个小的公司该怎么办呢？</p><p>作者建议，去复制那些“好的实践”，而不是“最佳实践”。复制一些普遍的，被证明的东西。这样可以避免大的风险和开销。</p><p>对我而言，这意味着应该先把敏捷做好，而不是急着跳到DevOps去。</p><p>作者还建议，你的优势在于自己掌握的核心秘密。多想想自己的优势在哪儿，从中创造出最佳实践，从中提高自己。</p><p>一直以来，我希望团队自己学习领悟, 而不是对他们直接改变。但我也希望当发现别人好的做法时，团队能快速复制的做法。在我看来，最重要的事情是让团队来决定如何做，而不是一定怎样。</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源:"></a>来源:</h3><p><a href="https://www.javacodegeeks.com/2018/06/best-practices-considered-harmfull.html" target="_blank" rel="noopener">https://www.javacodegeeks.com/2018/06/best-practices-considered-harmfull.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我长时间以来对所谓“最佳实践”感到困惑。在我脑海中藏着两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谁来决定这就是最佳实践&lt;/li&gt;
&lt;li&gt;谁说这种实践不能做得更佳？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有个从事石油工业的人跟我说，通常合同中会指定应该使用的“最佳实践”，但实际的实践却很
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>故事从HTTP request开始</title>
    <link href="http://www.youletter.cn/2018/06/13/%E6%95%85%E4%BA%8B%E4%BB%8EHTTP-request%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.youletter.cn/2018/06/13/故事从HTTP-request开始/</id>
    <published>2018-06-13T07:33:02.000Z</published>
    <updated>2018-06-13T07:40:16.619Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 1.0</p><p><a href="https://tools.ietf.org/html/rfc1945" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc1945</a></p><p>HTTP 1.1</p><p><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 1.0&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc1945&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tools.ietf.org/html/rfc1945&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js encodeURI</title>
    <link href="http://www.youletter.cn/2018/06/06/js-encodeURI/"/>
    <id>http://www.youletter.cn/2018/06/06/js-encodeURI/</id>
    <published>2018-06-06T07:28:23.000Z</published>
    <updated>2018-06-06T07:28:42.271Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></p><p>类型    包含<br>保留字符    ; , / ? : @ &amp; = + $<br>非转义的字符    字母 数字 - _ . ! ~ * ‘ ( )<br>数字符号    #</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 密码校验</title>
    <link href="http://www.youletter.cn/2018/05/25/java-%E5%AF%86%E7%A0%81%E6%A0%A1%E9%AA%8C/"/>
    <id>http://www.youletter.cn/2018/05/25/java-密码校验/</id>
    <published>2018-05-25T09:47:17.000Z</published>
    <updated>2018-05-25T09:47:39.434Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private static int calculatePasswordStrength(String password) &#123;</span><br><span class="line">       //total score of password</span><br><span class="line">       int iPasswordScore = 0;</span><br><span class="line"></span><br><span class="line">       if (password.length() &lt; 8 || password.length() &gt; 20) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one digit, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[0-9]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one lower case letter, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[a-z]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one upper case letter, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[A-Z]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one special character, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[~!@#$%^&amp;*()_-]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return iPasswordScore;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ab 压测性能</title>
    <link href="http://www.youletter.cn/2018/05/24/ab-%E5%8E%8B%E6%B5%8B%E6%80%A7%E8%83%BD/"/>
    <id>http://www.youletter.cn/2018/05/24/ab-压测性能/</id>
    <published>2018-05-24T10:09:25.000Z</published>
    <updated>2018-05-24T10:11:00.495Z</updated>
    
    <content type="html"><![CDATA[<p>POST  请求</p><p>ab -n 200 -c 5  -p para_tch  -A user:abcdedfpassword -T application/x-www-form-urlencoded <a href="http://10.1.5.114:80/api/login" target="_blank" rel="noopener">http://10.1.5.114:80/api/login</a></p><p>参数写在para_tch中</p><p>para_tch 的内容<br><a href="mailto:username=one@qq.com" target="_blank" rel="noopener">username=one@qq.com</a>&amp;password=000999&amp;grant_type=password</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POST  请求&lt;/p&gt;
&lt;p&gt;ab -n 200 -c 5  -p para_tch  -A user:abcdedfpassword -T application/x-www-form-urlencoded &lt;a href=&quot;http://10.1.5.114:80/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chapter1 Banjamin Button is born</title>
    <link href="http://www.youletter.cn/2018/05/18/Chapter1-Banjamin-Button-is-born/"/>
    <id>http://www.youletter.cn/2018/05/18/Chapter1-Banjamin-Button-is-born/</id>
    <published>2018-05-18T02:14:26.000Z</published>
    <updated>2018-05-20T09:30:06.685Z</updated>
    
    <content type="html"><![CDATA[<p>在1860那么久以前，在家中生孩子是很正常的事情。而现在，据我所知，掌管医学的神规定小孩的第一声哭声应该在医院的混杂着麻醉药的空气中发出。最好还是一家现代化的医院。所以，当年轻的Roger先生和太太，在1860夏季的一天，决定他们的第一个小孩应在医院出生时，他们领先了这种时尚50年的时间。是否这种时空错乱和我将要讲述的这段令人吃惊的历史有关联已经无法知晓了。</p><p>现在我负责讲述都发生了什么，让你自己决定要不要相信。</p><p>Roger Button在战前的Baltimore，无论是社会地位还是财富方面都有着令人羡慕程度。<br>他们和许多家族都有联系。每个南方人都知道，那些家族有权让他们成为众多贵族中的一员，而联邦政府就是由这些贵族中的大部分人组成的。这是他们第一次经历生小孩这种古老的，让人开心的传统，Button先生自然有些紧张。他希望能生一个男孩，这样就可以去位于康涅狄格的耶鲁上学。当前Button先生在那儿可是被叫了四年天才呢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在1860那么久以前，在家中生孩子是很正常的事情。而现在，据我所知，掌管医学的神规定小孩的第一声哭声应该在医院的混杂着麻醉药的空气中发出。最好还是一家现代化的医院。所以，当年轻的Roger先生和太太，在1860夏季的一天，决定他们的第一个小孩应在医院出生时，他们领先了这种时
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sprint boot restTemplate usage</title>
    <link href="http://www.youletter.cn/2018/05/08/sprint-boot-restTemplate-usage/"/>
    <id>http://www.youletter.cn/2018/05/08/sprint-boot-restTemplate-usage/</id>
    <published>2018-05-08T10:44:07.000Z</published>
    <updated>2018-05-09T07:39:20.750Z</updated>
    
    <content type="html"><![CDATA[<p>POST form-urlencoded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate restTemplate = new RestTemplate();</span><br><span class="line">String url = &quot;http://localhost:1450/cls/login&quot;;</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; hashMap= new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class="line">hashMap.add(&quot;username&quot;, &quot;cla10002&quot;);</span><br><span class="line">hashMap.add(&quot;password&quot;, &quot;xxxx&quot;);</span><br><span class="line">hashMap.add(&quot;grant_type&quot;,&quot;password&quot;);</span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(hashMap, headers);</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;String&gt; response = restTemplate.postForEntity( url, request , String.class );</span><br><span class="line"></span><br><span class="line">//获得返回值</span><br><span class="line">String body = response.getBody();</span><br><span class="line">System.out.println(body.toString());</span><br></pre></td></tr></table></figure><p>GET </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.set(&quot;Accept&quot;, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">.queryParam(&quot;msisdn&quot;, msisdn)</span><br><span class="line">.queryParam(&quot;email&quot;, email)</span><br><span class="line">.queryParam(&quot;clientVersion&quot;, clientVersion)</span><br><span class="line">.queryParam(&quot;clientType&quot;, clientType)</span><br><span class="line">.queryParam(&quot;issuerName&quot;, issuerName)</span><br><span class="line">.queryParam(&quot;applicationName&quot;, applicationName);</span><br><span class="line"></span><br><span class="line">HttpEntity&lt;?&gt; entity = new HttpEntity&lt;&gt;(headers);</span><br><span class="line"></span><br><span class="line">HttpEntity&lt;String&gt; response = restTemplate.exchange(</span><br><span class="line">builder.toUriString(), </span><br><span class="line">HttpMethod.GET, </span><br><span class="line">entity, </span><br><span class="line">String.class);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POST form-urlencoded&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx 转发js 跨域请求</title>
    <link href="http://www.youletter.cn/2018/05/07/nginx-%E8%BD%AC%E5%8F%91js-%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <id>http://www.youletter.cn/2018/05/07/nginx-转发js-跨域请求/</id>
    <published>2018-05-06T21:42:03.000Z</published>
    <updated>2018-05-06T21:42:49.741Z</updated>
    
    <content type="html"><![CDATA[<p>nginx.conf 配置 增加转发功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /pasterest/ &#123;</span><br><span class="line">    proxy_pass  http://127.0.0.1:52001/;</span><br><span class="line">    proxy_set_header  Host  $host;</span><br><span class="line">    access_log  /var/tmp/nginx/logs/paste-access.log ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx.conf 配置 增加转发功能&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://www.youletter.cn/2018/05/05/JavaScript/"/>
    <id>http://www.youletter.cn/2018/05/05/JavaScript/</id>
    <published>2018-05-05T01:57:30.000Z</published>
    <updated>2018-05-07T07:58:51.874Z</updated>
    
    <content type="html"><![CDATA[<p>一般来说，完整的JavaScript包括以下几个部分：</p><p>ECMAScript，描述了该语言的语法和基本对象<br>文档对象模型（DOM），描述处理网页内容的方法和接口  Document Object Model<br>浏览器对象模型（BOM），描述与浏览器进行交互的方法和接口 Browser Object Model </p><p>基本语法</p><p>每个语句以;结束 ，但是负责执行JavaScript代码的引擎会自动在每个语句的结尾补上; 。所以你可以选择不写 ;。</p><p>注释</p><p>以//开头直到行末的字符被视为行注释</p><p>另一种块注释是用/<em>…</em>/把多行字符包裹起来，把一大“块”视为一个注释：</p><p>JavaScript严格区分大小写</p><p>数据类型</p><p>JavaScript不区分整数和浮点数，统一用Number表示</p><p>字符串<br>字符串是以单引号’或双引号”括起来的任意文本，比如’abc’，”xyz”等等</p><p>布尔值<br>布尔值和布尔代数的表示完全一致，一个布尔值只有true、false</p><p>&amp;&amp;  与</p><p>||  或</p><p>！  非</p><p>JS的语法就像C语言。</p><p>JavaScript在设计时，有两种比较运算符：</p><p>第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p><p>第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。</p><p>不要使用==比较，始终坚持使用===比较。</p><p>另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己：</p><p>NaN === NaN; // false</p><p>唯一能判断NaN的方法是通过isNaN()函数：</p><p>isNaN(NaN); // true</p><p>null和undefined</p><p>数组</p><p>[1, 2, 3.14, ‘Hello’, null, true];<br>JavaScript的数组可以包括任意数据类型。  而且数组中的类型不必 相同。</p><p>另一种创建数组的方法是通过Array()函数实现：</p><p>new Array(1, 2, 3); // 创建了数组[1, 2, 3]</p><p>对象<br>JavaScript的对象是一组由键-值组成的无序集合，例如：</p><p>var person = {<br>    name: ‘Bob’,<br>    age: 20,<br>    tags: [‘js’, ‘web’, ‘mobile’],<br>    city: ‘Beijing’,<br>    hasCar: true,<br>    zipcode: null<br>};</p><p>JavaScript对象的键都是字符串类型，值可以是任意数据类型</p><p>要获取一个对象的属性，我们用对象变量.属性名的方式：</p><p>person.name; // ‘Bob’<br>person.zipcode; // null</p><p>变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。变量名也不能是JavaScript的关键字，如if、while等。申明一个变量用var语句，比如：</p><p>var a; // 申明了变量a，此时a的值为undefined<br>var $b = 1; // 申明了变量$b，同时给$b赋值，此时$b的值为1<br>var s_007 = ‘007’; // s_007是一个字符串<br>var Answer = true; // Answer是一个布尔值true<br>var t = null; // t的值是null</p><p>如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量：</p><p>strict模式</p><p>字符串</p><p>多行字符串</p><p>ES6标准新增了一种多行字符串的表示方法，用反引号 <code>...</code> 表示：</p><p><code>这是一个多行字符串</code>;</p><p>模板字符串</p><p>name = ‘fupeng’</p><p>age=’12a’</p><p>console.log(<code>你好, ${name}, 你今年${age}岁了!</code>);</p><p>请注意，如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化：</p><p>var arr = [1, 2, 3];<br>arr[5] = ‘x’;<br>arr; // arr变为[1, 2, 3, undefined, undefined, ‘x’]</p><p>push和pop<br>push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉：</p><p>var arr = [1, 2];<br>arr.push(‘A’, ‘B’); // 返回Array新的长度: 4<br>arr; // [1, 2, ‘A’, ‘B’]<br>arr.pop(); // pop()返回’B’<br>arr; // [1, 2, ‘A’]<br>arr.pop(); arr.pop(); arr.pop(); // 连续pop 3次<br>arr; // []<br>arr.pop(); // 空数组继续pop不会报错，而是返回undefined<br>arr; // []</p><p>unshift和shift<br>如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉：</p><p>var arr = [1, 2];<br>arr.unshift(‘A’, ‘B’); // 返回Array新的长度: 4<br>arr; // [‘A’, ‘B’, 1, 2]<br>arr.shift(); // ‘A’<br>arr; // [‘B’, 1, 2]<br>arr.shift(); arr.shift(); arr.shift(); // 连续shift 3次<br>arr; // []<br>arr.shift(); // 空数组继续shift不会报错，而是返回undefined<br>arr; // []</p><p>concat<br>concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array：</p><p>var arr = [‘A’, ‘B’, ‘C’];<br>var added = arr.concat([1, 2, 3]);<br>added; // [‘A’, ‘B’, ‘C’, 1, 2, 3]<br>arr; // [‘A’, ‘B’, ‘C’]</p><p>join<br>join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串：</p><p>var arr = [‘A’, ‘B’, ‘C’, 1, 2, 3];<br>arr.join(‘-‘); // ‘A-B-C-1-2-3’</p><p>对象</p><p>JavaScript用一个{…}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。</p><p>var xiaoming = {<br>    name: ‘小明’,<br>    birth: 1990,<br>    school: ‘No.1 Middle School’,<br>    height: 1.70,<br>    weight: 65,<br>    score: null<br>};</p><p>但这要求属性名必须是一个有效的变量名。如果属性名包含特殊字符，就必须用’’括起来：</p><p>var xiaohong = {<br>    name: ‘小红’,<br>    ‘middle-school’: ‘No.1 Middle School’<br>};</p><p>我们在编写JavaScript代码的时候，属性名尽量使用标准的变量名，这样就可以直接通过object.prop的形式访问一个属性了。</p><p>实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。</p><p>由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性：</p><p>var xiaoming = {<br>    name: ‘小明’<br>};<br>xiaoming.age; // undefined<br>xiaoming.age = 18; // 新增一个age属性<br>xiaoming.age; // 18<br>delete xiaoming.age; // 删除age属性<br>xiaoming.age; // undefined<br>delete xiaoming[‘name’]; // 删除name属性<br>xiaoming.name; // undefined<br>delete xiaoming.school; // 删除一个不存在的school属性也不会报错</p><p>如果我们要检测xiaoming是否拥有某一属性，可以用in操作符：</p><p>var xiaoming = {<br>    name: ‘小明’,<br>    birth: 1990,<br>    school: ‘No.1 Middle School’,<br>    height: 1.70,<br>    weight: 65,<br>    score: null<br>};<br>‘name’ in xiaoming; // true<br>‘grade’ in xiaoming; // false</p><p>要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法：</p><p>var xiaoming = {<br>    name: ‘小明’<br>};<br>xiaoming.hasOwnProperty(‘name’); // true<br>xiaoming.hasOwnProperty(‘toString’); // false</p><p>条件判断</p><p>var age = 20;<br>if (age &gt;= 18) { // 如果age &gt;= 18为true，则执行if语句块<br>    alert(‘adult’);<br>} else { // 否则执行else语句块<br>    alert(‘teenager’);<br>}</p><p>循环</p><p>var x = 0;<br>var i;<br>for (i=1; i&lt;=10000; i++) {<br>    x = x + i;<br>}<br>x;</p><p>for循环最常用的地方是利用索引来遍历数组：</p><p>var arr = [‘Apple’, ‘Google’, ‘Microsoft’];<br>var i, x;<br>for (i=0; i&lt;arr.length; i++) {<br>    x = arr[i];<br>    console.log(x);<br>}</p><p>var a = [‘A’, ‘B’, ‘C’];<br>for (var i in a) {<br>    console.log(i); // ‘0’, ‘1’, ‘2’<br>    console.log(a[i]); // ‘A’, ‘B’, ‘C’<br>}</p><p>while<br>for循环在已知循环的初始和结束条件时非常有用。而上述忽略了条件的for循环容易让人看不清循环的逻辑，此时用while循环更佳。</p><p>while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><p>var x = 0;<br>var n = 99;<br>while (n &gt; 0) {<br>    x = x + n;<br>    n = n - 2;<br>}<br>x; // 2500</p><p>Map<br>Map是一组键值对的结构，具有极快的查找速度。</p><p>初始化Map需要一个二维数组，或者直接初始化一个空Map。</p><p>var m = new Map([[‘Michael’, 95], [‘Bob’, 75], [‘Tracy’, 85]]);<br>m.get(‘Michael’); // 95</p><p>var m = new Map(); // 空Map<br>m.set(‘Adam’, 67); // 添加新的key-value<br>m.set(‘Bob’, 59);<br>m.has(‘Adam’); // 是否存在key ‘Adam’: true<br>m.get(‘Adam’); // 67<br>m.delete(‘Adam’); // 删除key ‘Adam’<br>m.get(‘Adam’); // undefined</p><p>Set<br>Set和Map类似，也是一组key的集合，但不存储value。</p><p>小结<br>Map和Set是ES6标准新增的数据类型，</p><p>定义函数</p><p>function abs(x) {<br>    if (x &gt;= 0) {<br>        return x;<br>    } else {<br>        return -x;<br>    }<br>}</p><p>由于JavaScript的函数也是一个对象，上述定义的abs()函数实际上是一个函数对象，而函数名abs可以视为指向该函数的变量。</p><p>因此，第二种定义函数的方式如下：</p><p>var abs = function (x) {<br>    if (x &gt;= 0) {<br>        return x;<br>    } else {<br>        return -x;<br>    }<br>};</p><p>由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数：</p><p>abs(10, ‘blablabla’); // 返回10<br>abs(-9, ‘haha’, ‘hehe’, null); //</p><p>arguments<br>JavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array</p><p>function foo(x) {<br>    console.log(‘x = ‘ + x); // 10<br>    for (var i=0; i&lt;arguments.length; i++) {<br>        console.log(‘arg ‘ + i + ‘ = ‘ + arguments[i]); // 10, 20, 30<br>    }<br>}<br>foo(10, 20, 30);</p><p>在JavaScript中，用var申明的变量实际上是有作用域的。</p><p>如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：</p><p>由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：</p><p>‘use strict’;</p><p>function foo() {<br>    var x = 1;<br>    function bar() {<br>        var y = x + 1; // bar可以访问foo的变量x!<br>    }<br>    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!<br>}</p><p>这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。</p><p>变量提升</p><p>这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。</p><p>全局作用域<br>不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：</p><p>‘use strict’;</p><p>var course = ‘Learn JavaScript’;<br>alert(course); // ‘Learn JavaScript’<br>alert(window.course); // ‘Learn JavaScript’</p><p>这说明JavaScript实际上只有一个全局作用域。</p><p>名字空间<br>全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。</p><p>减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：</p><p>// 唯一的全局变量MYAPP:<br>var MYAPP = {};</p><p>// 其他变量:<br>MYAPP.name = ‘myapp’;<br>MYAPP.version = 1.0;</p><p>// 其他函数:<br>MYAPP.foo = function () {<br>    return ‘foo’;<br>};</p><p>为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：</p><p>‘use strict’;</p><p>function foo() {<br>    var sum = 0;<br>    for (let i=0; i&lt;100; i++) {<br>        sum += i;<br>    }<br>    // SyntaxError:<br>    i += 1;<br>}</p><p>ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：</p><p>‘use strict’;</p><p>const PI = 3.14;<br>PI = 3; // 某些浏览器不报错，但是无效果！<br>PI; // 3.14</p><p>解构赋值  很奇怪</p><p>要保证this指向正确，必须用obj.xxx()的形式调用！</p><p>apply<br>虽然在一个独立的函数调用中，根据是否是strict模式，this指向undefined或window，不过，我们还是可以控制this的指向的！</p><p>要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。</p><p>装饰器<br>利用apply()，我们还可以动态改变函数的行为。</p><p>高阶函数英文叫Higher-order function。</p><p>编写高阶函数，就是让函数的参数能够接收别的函数。</p><p>利用filter，可以巧妙地去除Array的重复元素：<br>r = arr.filter(function (element, index, self) {<br>    return self.indexOf(element) === index;<br>});</p><p>要按数字大小排序，我们可以这么写</p><p>arr.sort(function (x, y) {<br>    if (x &lt; y) {<br>        return -1;<br>    }<br>    if (x &gt; y) {<br>        return 1;<br>    }<br>    return 0;<br>});<br>console.log(arr); // [1, 2, 10, 20]</p><p>闭包Closure</p><p>我们在函数lazy_sum中又定义了函数sum，并且，内部函数sum可以引用外部函数lazy_sum的参数和局部变量，当lazy_sum返回函数sum时，相关参数和变量都保存在返回的函数中，这种称为“闭包（Closure）”的程序结构拥有极大的威力。</p><p>function lazy_sum(arr) {<br>    var sum = function () {<br>        return arr.reduce(function (x, y) {<br>            return x + y;<br>        });<br>    }<br>    return sum;<br>}</p><p>var f = lazy_sum([1, 2, 3, 4, 5]); // function sum()</p><p>f()</p><p>返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p><p>通常，一个立即执行的匿名函数可以把函数体拆开，一般这么写：</p><p>(function (x) {<br>    return x * x;<br>})(3);</p><p>换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p><p>箭头函数</p><p>‘use strict’;<br>function* next_id() {</p><p>   var c = 0;</p><pre><code>while (true) {    c++;    yield c;}</code></pre><p>}</p><p>生成器就是一个 会暂停的函数 。</p><p>我们用typeof操作符获取对象的类型，它总是返回一个字符串：</p><p>typeof 123; // ‘number’<br>typeof NaN; // ‘number’<br>typeof ‘str’; // ‘string’<br>typeof true; // ‘boolean’<br>typeof undefined; // ‘undefined’<br>typeof Math.abs; // ‘function’<br>typeof null; // ‘object’<br>typeof []; // ‘object’<br>typeof {}; // ‘object’</p><p>number、boolean和string都有包装对象。</p><p>var n = new Number(123); // 123,生成了新的包装类型<br>var b = new Boolean(true); // true,生成了新的包装类型<br>var s = new String(‘str’); // ‘str’,生成了新的包装类型</p><p>如果我们在使用Number、Boolean和String时，没有写new会发生什么情况？</p><p>此时，Number()、Boolean和String()被当做普通函数，把任何类型的数据转换为number、boolean和string类型（注意不是其包装类型）：</p><p>var n = Number(‘123’); // 123，相当于parseInt()或parseFloat()<br>typeof n; // ‘number’</p><p>var b = Boolean(‘true’); // true<br>typeof b; // ‘boolean’</p><p>var b2 = Boolean(‘false’); // true! ‘false’字符串转换结果为true！因为它是非空字符串！<br>var b3 = Boolean(‘’); // false</p><p>var s = String(123.45); // ‘123.45’<br>typeof s; // ‘string’</p><p>不要使用new Number()、new Boolean()、new String()创建包装对象；</p><p>用parseInt()或parseFloat()来转换任意类型到number；</p><p>用String()来转换任意类型到string，或者直接调用某个对象的toString()方法；</p><p>通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}；</p><p>typeof操作符可以判断出number、boolean、string、function和undefined；</p><p>判断Array要使用Array.isArray(arr)；</p><p>判断null请使用myVar === null；</p><p>判断某个全局变量是否存在用typeof window.myVar === ‘undefined’；</p><p>函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。</p><p>123.toString(); // SyntaxError<br>遇到这种情况，要特殊处理一下：</p><p>123..toString(); // ‘123’, 注意是两个点！<br>(123).toString(); // ‘123’<br>不要问为什么，这就是JavaScript代码的乐趣！</p><p>Date</p><p>在JavaScript中，Date对象用来表示日期和时间。</p><p>要获取系统当前时间，用：</p><p>var now = new Date();<br>now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST)<br>now.getFullYear(); // 2015, 年份<br>now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月<br>now.getDate(); // 24, 表示24号<br>now.getDay(); // 3, 表示星期三<br>now.getHours(); // 19, 24小时制<br>now.getMinutes(); // 49, 分钟<br>now.getSeconds(); // 22, 秒<br>now.getMilliseconds(); // 875, 毫秒数<br>now.getTime(); // 1435146562875, 以number形式表示的时间戳</p><p>如果要创建一个指定日期和时间的Date对象，可以用：</p><p>var d = new Date(2015, 5, 19, 20, 15, 30, 123);<br>d; // Fri Jun 19 2015 20:15:30 GMT+0800 (CST)</p><p>就是JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月……，所以要表示6月，我们传入的是5！这绝对是JavaScript的设计者当时脑抽了一下，但是现在要修复已经不可能了。</p><p>如果我们还想要精确控制如何序列化小明，可以给xiaoming定义一个toJSON()的方法，直接返回JSON应该序列化的数据：</p><p>var xiaoming = {<br>    name: ‘小明’,<br>    age: 14,<br>    gender: true,<br>    height: 1.65,<br>    grade: null,<br>    ‘middle-school’: ‘\”W3C\” Middle School’,<br>    skills: [‘JavaScript’, ‘Java’, ‘Python’, ‘Lisp’],<br>    toJSON: function () {<br>        return { // 只输出name和age，并且改变了key：<br>            ‘Name’: this.name,<br>            ‘Age’: this.age<br>        };<br>    }<br>};</p><p>JSON.stringify(xiaoming); // ‘{“Name”:”小明”,”Age”:14}’</p><p>JS 的函数，传入多余数量的参数 ，不报错，而是自动忽略。</p><p>正确的方法是充分利用JavaScript对不存在属性返回undefined的特性，直接用短路运算符||计算：</p><p>location<br>location对象表示当前页面的URL信息。例如，一个完整的URL：</p><p><a href="http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP" target="_blank" rel="noopener">http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP</a><br>可以用location.href获取。要获得URL各个部分的值，可以这么写：</p><p>location.protocol; // ‘http’<br>location.host; // ‘<a href="http://www.example.com&#39;" target="_blank" rel="noopener">www.example.com&#39;</a><br>location.port; // ‘8080’<br>location.pathname; // ‘/path/index.html’<br>location.search; // ‘?a=1&amp;b=2’<br>location.hash; // ‘TOP’</p><p>要加载一个新页面，可以调用location.assign()。如果要重新加载当前页面，调用location.reload()方法非常方便。</p><p>document<br>document对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点。</p><p>document的title属性是从HTML文档中的<title>xxx</title>读取的，但是可以动态改变：</p><p>由于HTML文档被浏览器解析后就是一棵DOM树，要改变HTML的结构，就需要通过JavaScript来操作DOM。</p><p>插入 DOM</p><p>var<br>    list = document.getElementById(‘list’),<br>    haskell = document.createElement(‘p’);<br>haskell.id = ‘haskell’;<br>haskell.innerText = ‘Haskell’;<br>list.appendChild(haskell);</p><p>因为是异步操作，所以我们在JavaScript代码中就不知道什么时候操作结束，因此需要先设置一个回调函数：</p><p>$是著名的jQuery符号</p><p>实际上，jQuery把所有功能全部封装在一个全局变量jQuery中，而$也是一个合法的变量名，它是变量jQuery的别名：</p><p>按ID查找<br>var div = $(‘#abc’);<br>按tag查找<br>var ps = $(‘p’); // 返回所有</p><p>节点<br>ps.length; // 数一数页面有多少个</p><p>节点</p><p>按class查找</p><p>var a = $(‘.red’); // 所有节点包含<code>class=&quot;red&quot;</code>都将返回<br>// 例如:<br>// <div class="red">…</div><br>// </p><p class="green red">…</p><p></p><p>通常很多节点有多个class，我们可以查找同时包含red和green的节点：</p><p>var a = $(‘.red.green’); // 注意没有空格！<br>// 符合条件的节点：<br>// <div class="red green">…</div><br>// <div class="blue green red">…</div></p><p>按属性查找</p><p>var email = $(‘[name=email]’); // 找出&lt;??? name=”email”&gt;<br>var passwordInput = $(‘[type=password]’); // 找出&lt;??? type=”password”&gt;<br>var a = $(‘[items=”A B”]’); // 找出&lt;??? items=”A B”&gt;</p><p>当属性的值包含空格等特殊字符时，需要用双引号括起来。</p><p>组合查找<br>组合查找就是把上述简单选择器组合起来使用。如果我们查找$(‘[name=email]’)，很可能把表单外的<div name="email">也找出来，但我们只希望查找<input>，就可以这么写：</div></p><p>var emailInput = $(‘input[name=email]’); // 不会找出<div name="email"><br>同样的，根据tag和class来组合查找也很常见：</div></p><p>var tr = $(‘tr.red’); // 找出<tr class="red ...">…</tr></p><p>多项选择器<br>多项选择器就是把多个选择器用,组合起来一块选：</p><p>$(‘p,div’); // 把</p><p>和<div>都选出来<br>$(‘p.red,p.green’); // 把<p class="red">和</p><p class="green">都选出来</p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一般来说，完整的JavaScript包括以下几个部分：&lt;/p&gt;
&lt;p&gt;ECMAScript，描述了该语言的语法和基本对象&lt;br&gt;文档对象模型（DOM），描述处理网页内容的方法和接口  Document Object Model&lt;br&gt;浏览器对象模型（BOM），描述与浏览器进
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>npm 脚本</title>
    <link href="http://www.youletter.cn/2018/05/05/npm-%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.youletter.cn/2018/05/05/npm-脚本/</id>
    <published>2018-05-04T23:41:52.000Z</published>
    <updated>2018-05-04T23:52:24.899Z</updated>
    
    <content type="html"><![CDATA[<p>npm 允许在package.json文件里面，使用scripts字段定义脚本命令。</p><p>{<br>  // …<br>  “scripts”: {<br>    “build”: “node build.js”<br>  }<br>}</p><p>$ npm run build</p><h1 id="等同于执行"><a href="#等同于执行" class="headerlink" title="等同于执行"></a>等同于执行</h1><p>$ node build.js</p><p>查看当前项目的所有 npm 脚本命令，可以使用不带任何参数的npm run命令。</p><p>npm run</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>npm 就是JavaScript 届的maven。包管理工具。 node package magener</p><p>参考</p><p><a href="http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;npm 允许在package.json文件里面，使用scripts字段定义脚本命令。&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;  // …&lt;br&gt;  “scripts”: {&lt;br&gt;    “build”: “node build.js”&lt;br&gt;  }&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;$ npm 
      
    
    </summary>
    
    
  </entry>
  
</feed>

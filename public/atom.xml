<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>由来</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.youletter.cn/"/>
  <updated>2018-07-28T22:52:00.652Z</updated>
  <id>http://www.youletter.cn/</id>
  
  <author>
    <name>kunpengku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端学习</title>
    <link href="http://www.youletter.cn/2018/07/29/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.youletter.cn/2018/07/29/前端学习/</id>
    <published>2018-07-28T22:51:34.000Z</published>
    <updated>2018-07-28T22:52:00.652Z</updated>
    
    <content type="html"><![CDATA[<p>淘宝 NPM 镜像<br><a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;淘宝 NPM 镜像&lt;br&gt;&lt;a href=&quot;https://npm.taobao.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://npm.taobao.org/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在linux安装Maven</title>
    <link href="http://www.youletter.cn/2018/07/27/%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%AE%89%E8%A3%85Maven/"/>
    <id>http://www.youletter.cn/2018/07/27/如何在linux安装Maven/</id>
    <published>2018-07-27T03:19:40.000Z</published>
    <updated>2018-07-27T05:49:25.988Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.howtoforge.com/tutorial/centos-apache-maven/" target="_blank" rel="noopener">https://www.howtoforge.com/tutorial/centos-apache-maven/</a></p><p>maven二进制包 下载地址</p><p><a href="http://www-us.apache.org/dist/maven/maven-3/3.5.4/binaries/" target="_blank" rel="noopener">http://www-us.apache.org/dist/maven/maven-3/3.5.4/binaries/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.howtoforge.com/tutorial/centos-apache-maven/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.howtoforge.com/tutorial/cen
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven-依赖机制</title>
    <link href="http://www.youletter.cn/2018/07/22/maven-%E4%BE%9D%E8%B5%96%E6%9C%BA%E5%88%B6/"/>
    <id>http://www.youletter.cn/2018/07/22/maven-依赖机制/</id>
    <published>2018-07-21T16:09:42.000Z</published>
    <updated>2018-07-30T02:06:28.041Z</updated>
    
    <content type="html"><![CDATA[<p>我认识到Maven的第一个功能就是自动处理包依赖的能力。这也是Maven最擅长的。</p><h1 id="传递依赖-Transitive-Dependencies"><a href="#传递依赖-Transitive-Dependencies" class="headerlink" title="传递依赖 Transitive Dependencies"></a>传递依赖 Transitive Dependencies</h1><p>传递依赖是Maven2.0新增的一个特性。这避免了你需要去发现和指定你的依赖包所依赖的库。它会自动包含这些库。</p><p>这个特性会通过读取指定的远程仓库的项目文件来完成。通常，所有这些项目的依赖都会用到你的项目中。例如从父项目继承的，从依赖中继承的等等。</p><p>没有限制依赖可以收集的层次数量，只是会在出现循环依赖时导致问题。</p><p>使用传递依赖，可包含的库的结构图会快速变得很大。由于这个原因，有一些附加的特性来限制哪些依赖应该被引用。</p><ul><li><p>依赖冲突（Dependency mediation）。 当某个依赖有多个版本被指定时，决定该使用哪个版本。目前，Maven2.0只支持“最近定义”原则。它的意思是使用依赖树中距离最近的版本。如果你不像这样，可以在POM文件中显示的声明某个依赖的版本号。注意，如果两个版本在依赖树中的距离一样。在Maven2.0.8以前不确定哪个版本会胜出，但是自从2.0.9开始，根据定义的顺序，先定义的胜出。</p><ul><li>最近定义（nearest definition）：举个例子，对于依赖A，B，C 有一下关系：A -&gt; B -&gt; C -&gt; D 2.0 and A -&gt; E -&gt; D 1.0 。那么，D 1.0 胜出。因为A通过E到D距离更近。如果需要强制使用D2.0，可以显示的增加对D2.0的依赖。</li></ul></li><li><p>依赖管理 (dependencyManagement) - 允许项目的开发者在遇到传递依赖时，直接指定依赖的版本。在之前的例子里，虽然A没有直接引用D，但可以在dependencyManagement中直接增加对D的引用，来显示的控制D的版本。</p></li></ul><h5 id="译者注："><a href="#译者注：" class="headerlink" title="译者注："></a>译者注：</h5><p>在pom中增加dependencyManagement 这一节，就是为了管理 依赖中潜在引用的依赖的版本的。如果对于自动传递依赖的版本不满意或不适合，那么可以在这一节里再进一步显示的控制。等于是对dependency的微调。</p><ul><li><p>scope - 这个属性用来控制，只在在构建的每个阶段，加入合适的依赖。详细说明在后面。</p></li><li><p>排除依赖(Excluded dependencies) - 如果X依赖Y，Y依赖Z。这是X想要排除Z，就可以用这个标签<code>&lt;exclusions&gt;</code></p></li><li><p>可选的依赖(Optional dependencies) - 如果Y依赖了Z，但是Y把Z标记为可选的。那么当X再依赖Y时，就不会将Z也引进来。可以认为X默认会排除Z。如果X就是需要用到Z，应该在POM中显示添加对Z的依赖。</p></li></ul><h1 id="Dependency-Scope"><a href="#Dependency-Scope" class="headerlink" title="Dependency Scope"></a>Dependency Scope</h1><p>scope用来定义依赖的传递性，也会影响执行不同阶段的任务的classpath。</p><p>有6中scope</p><ul><li>compile</li></ul><p>如果没有指定，这是默认的scope。这种依赖在项目所有的classpath都可用，此外，还会传播到依赖的项目中。</p><ul><li>provided</li></ul><p>很像<code>compile</code>，但是显示告诉你，希望在运行时JDK或者容器能够提供这个依赖。比如，可以把Servlet API 和Java EE API相关的依赖设置为<code>provided</code>。因为web容器提供了这些类了。这个scope只在编译和test classpath上可用，而且无传递性。</p><ul><li>runtime</li></ul><p>表示这个依赖编译时不需要，但运行时需要。所以在运行和测试classpath，不在编译classpath</p><ul><li>test</li></ul><p>表示依赖对于正常的应用不需要，但是在test的编译和执行时有用。不传递。</p><ul><li>system</li></ul><p>很像 <code>provided</code> 但是，你必须显示的提供一个JAR包，因为这个依赖不在Maven远程仓库里。 不推荐了。</p><ul><li>import （Maven 2.0.9以后支持）</li></ul><p>只有在<code>&lt;dependencyManagement&gt;</code>中的依赖才支持这个scope。 表示此处依赖会被指定的POM文件中的<code>&lt;dependencyManagement&gt;</code>中的有效的依赖列表替换。由于被替换了，所以这种依赖实际上不参与对依赖传递性的限制。</p><p>scope 也会影响该依赖的依赖。 原文这里有一个表格。 左边一竖列表示依赖包的scope，顶部一行列表示依赖的依赖的scope。在相交处的scope表示其状态，如果相交处没有scope，说明这个依赖的依赖会被忽略。</p><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">Introduction to the Dependency Mechanism</a></p><h1 id="依赖管理-Dependency-Management"><a href="#依赖管理-Dependency-Management" class="headerlink" title="依赖管理 Dependency Management"></a>依赖管理 Dependency Management</h1><p>dependencyManagement这个模块，是来集中管理依赖的一种机制。当你有一些项目都继承一个父项目时，可以把所有的依赖信息都放在一个公用的POM的，</p><p>原文地址</p><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">Introduction to the Dependency Mechanism</a></p><p>参考：<br><a href="http://ifeve.com/maven-index-2/" target="_blank" rel="noopener">《Maven官方文档》目录指南</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我认识到Maven的第一个功能就是自动处理包依赖的能力。这也是Maven最擅长的。&lt;/p&gt;
&lt;h1 id=&quot;传递依赖-Transitive-Dependencies&quot;&gt;&lt;a href=&quot;#传递依赖-Transitive-Dependencies&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Maven" scheme="http://www.youletter.cn/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 新特性</title>
    <link href="http://www.youletter.cn/2018/07/19/Java-8-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://www.youletter.cn/2018/07/19/Java-8-新特性/</id>
    <published>2018-07-19T09:10:07.000Z</published>
    <updated>2018-07-21T16:09:47.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="forEach-方法"><a href="#forEach-方法" class="headerlink" title="forEach() 方法"></a>forEach() 方法</h1><p>example </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.vipkid.school.account.utils;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/19.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">public class TTTT &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //creating sample Collection</span><br><span class="line">        List&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) myList.add(i);</span><br><span class="line"></span><br><span class="line">        System.out.println(myList);</span><br><span class="line"></span><br><span class="line">        //traversing using Iterator</span><br><span class="line">        Iterator&lt;Integer&gt; it = myList.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            Integer i = it.next();</span><br><span class="line">            System.out.println(&quot;Iterator Value::&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //traversing through forEach method of Iterable with anonymous class</span><br><span class="line">        myList.forEach(new Consumer&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void accept(Integer t) &#123;</span><br><span class="line">                System.out.println(&quot;forEach with anonymous class ::&quot; + t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //traversing through forEach method of Iterable with lambda expression</span><br><span class="line">        myList.forEach(t -&gt; System.out.println(&quot;forEach lambda Value::&quot; + t));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java-8-对interface的修改"><a href="#Java-8-对interface的修改" class="headerlink" title="Java 8 对interface的修改"></a>Java 8 对interface的修改</h1><p>增加 接口中方法的 默认实现。</p><p>以前 接口的方法是 不能实现的。</p><p>Interface1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Interface1 &#123;</span><br><span class="line"></span><br><span class="line">    void method1(String str);</span><br><span class="line"></span><br><span class="line">    default void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;I1 logging::&quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void print(String str)&#123;</span><br><span class="line">        System.out.println(&quot;Printing 1 &quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //trying to override Object method gives compile time error as</span><br><span class="line">    //&quot;A default method cannot override a method from java.lang.Object&quot;  接口中的方法，不能重写 Object中的方法。</span><br><span class="line"></span><br><span class="line">//default String toString()&#123;</span><br><span class="line">//return &quot;i1&quot;;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Interface2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    void method2();</span><br><span class="line"></span><br><span class="line">    default void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;I2 logging::&quot;+str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在假设有两个接口 Interface1 和 Interface2.  有一个类要实现这两个接口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class MyClass implements Interface1, Interface2 &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void method2() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void method1(String str) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //MyClass won&apos;t compile without having it&apos;s own log() implementation</span><br><span class="line">    @Override</span><br><span class="line">    public void log(String str)&#123;</span><br><span class="line">        System.out.println(&quot;MyClass logging::&quot;+str);</span><br><span class="line">        Interface1.print(&quot;abc&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现，除了要实现method1 和 method2 意外，还需要实现 log 这个方法 。 如果 不是这种多继承 ，这个方法是不用实现的。因为 log已经有 默认实现了。 但是 ，发现，这两个接口都有这个 方法 ，而且都有默认实现。所以，对于log，MyClass 需要 再重写一下 。</p><p>接口中的方法，想要实现，可以用 default 或者 static 关键字。 区别就是 ，default的方法是一个 实例方法。 static是一个 静态方法，类方法。不需要实例就可以调用。可以在接口中直接调用。 但是不能被实例调用。 (Java interface static method is visible to interface methods only) <a href="https://www.journaldev.com/2752/java-8-interface-changes-static-method-default-method#java-interface-static-method" target="_blank" rel="noopener">Java 8 Interface Changes – static method, default method</a></p><p>参考：<br><a href="https://www.journaldev.com/2389/java-8-features-with-examples" target="_blank" rel="noopener">Java 8 Features with Examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;forEach-方法&quot;&gt;&lt;a href=&quot;#forEach-方法&quot; class=&quot;headerlink&quot; title=&quot;forEach() 方法&quot;&gt;&lt;/a&gt;forEach() 方法&lt;/h1&gt;&lt;p&gt;example &lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java工具类</title>
    <link href="http://www.youletter.cn/2018/07/19/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.youletter.cn/2018/07/19/Java工具类/</id>
    <published>2018-07-19T02:39:41.000Z</published>
    <updated>2018-07-19T02:40:08.968Z</updated>
    
    <content type="html"><![CDATA[<p>时间相关</p><p>SimpleDateFormat</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时间相关&lt;/p&gt;
&lt;p&gt;SimpleDateFormat&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何构成一个传统web服务</title>
    <link href="http://www.youletter.cn/2018/07/19/%E5%A6%82%E4%BD%95%E6%9E%84%E6%88%90%E4%B8%80%E4%B8%AA%E4%BC%A0%E7%BB%9Fweb%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.youletter.cn/2018/07/19/如何构成一个传统web服务/</id>
    <published>2018-07-18T16:00:12.000Z</published>
    <updated>2018-07-18T16:10:59.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><p>数据存在哪儿， Mysql等保存持久化数据。 redis，作为缓存。ES来提供搜索。</p><h1 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h1><p>用一个服务程序，来进行数据读写。进行一些逻辑动作。<br>这个服务可以是 Java 用 Spring boot 快速搭建。<br>Python Gunicorn等。 </p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>展示到浏览器上。 </p><p>微信小程序。</p><p>APP （IOS， Android）</p><h1 id="工具-utils"><a href="#工具-utils" class="headerlink" title="工具 utils"></a>工具 utils</h1><p>短信</p><p>邮件</p><p>支付</p><p>文件</p><p>视频直播</p><h1 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h1><p>服务器， 云主机， CDN， 域名。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据&quot;&gt;&lt;a href=&quot;#数据&quot; class=&quot;headerlink&quot; title=&quot;数据&quot;&gt;&lt;/a&gt;数据&lt;/h1&gt;&lt;p&gt;数据存在哪儿， Mysql等保存持久化数据。 redis，作为缓存。ES来提供搜索。&lt;/p&gt;
&lt;h1 id=&quot;HTTP-Server&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何安装pip</title>
    <link href="http://www.youletter.cn/2018/07/18/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85pip/"/>
    <id>http://www.youletter.cn/2018/07/18/如何安装pip/</id>
    <published>2018-07-18T15:50:43.000Z</published>
    <updated>2018-07-18T15:50:58.644Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://pip.pypa.io/en/stable/installing/" target="_blank" rel="noopener">https://pip.pypa.io/en/stable/installing/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://pip.pypa.io/en/stable/installing/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pip.pypa.io/en/stable/installing/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Why We Need Lambda Expressions in Java - Part 1</title>
    <link href="http://www.youletter.cn/2018/07/10/Why-We-Need-Lambda-Expressions-in-Java-Part-1/"/>
    <id>http://www.youletter.cn/2018/07/10/Why-We-Need-Lambda-Expressions-in-Java-Part-1/</id>
    <published>2018-07-10T09:44:38.000Z</published>
    <updated>2018-07-10T11:14:42.976Z</updated>
    
    <content type="html"><![CDATA[<p>Lambda 表达式在Java 8 加入了。我计划联合其他几位作者写一本关于这个主题的书。<br>本文的目的是告诉你，为什么现代的编程语言必须要有Lamdba表达式。</p><p>函数式接口</p><p>source:<a href="https://dzone.com/articles/why-we-need-Lambda-expressions" target="_blank" rel="noopener">Why We Need Lambda Expressions in Java - Part 1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Lambda 表达式在Java 8 加入了。我计划联合其他几位作者写一本关于这个主题的书。&lt;br&gt;本文的目的是告诉你，为什么现代的编程语言必须要有Lamdba表达式。&lt;/p&gt;
&lt;p&gt;函数式接口&lt;/p&gt;
&lt;p&gt;source:&lt;a href=&quot;https://dzone.com
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java Lambda</title>
    <link href="http://www.youletter.cn/2018/07/10/java-Lambda/"/>
    <id>http://www.youletter.cn/2018/07/10/java-Lambda/</id>
    <published>2018-07-10T03:59:11.000Z</published>
    <updated>2018-07-10T13:49:35.879Z</updated>
    
    <content type="html"><![CDATA[<p>接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.example.kpk.demo_valid;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/10.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">@FunctionalInterface</span><br><span class="line">public interface WorkerInterface &#123;</span><br><span class="line"></span><br><span class="line">    public void doSomeWork();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.example.kpk.demo_valid;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * DATE 2018/7/10.</span><br><span class="line"> *</span><br><span class="line"> * @author fupeng.</span><br><span class="line"> */</span><br><span class="line">public class TestLambda &#123;</span><br><span class="line"></span><br><span class="line">    public static void execute(WorkerInterface worker) &#123;</span><br><span class="line">        worker.doSomeWork();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">        //invoke doSomeWork using Annonymous class</span><br><span class="line">        execute(new WorkerInterface() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void doSomeWork() &#123;</span><br><span class="line">                System.out.println(&quot;Worker invoked using Anonymous class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        execute(() -&gt; System.out.println(&quot;another invoked using Lambda expression&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>source: <a href="http://blog.oneapm.com/apm-tech/226.html" target="_blank" rel="noopener">深入浅出 Java 8 Lambda 表达式</a></p><p><a href="http://viralpatel.net/blogs/Lambda-expressions-java-tutorial/" target="_blank" rel="noopener">Java 8 Lambda Expressions Tutorial with Examples</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接口&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 常用命令</title>
    <link href="http://www.youletter.cn/2018/07/06/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.youletter.cn/2018/07/06/git-常用命令/</id>
    <published>2018-07-06T01:04:16.000Z</published>
    <updated>2018-07-06T01:04:31.058Z</updated>
    
    <content type="html"><![CDATA[<p>git stash<br>git stash pop</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git stash&lt;br&gt;git stash pop&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>next-word</title>
    <link href="http://www.youletter.cn/2018/07/01/next-word/"/>
    <id>http://www.youletter.cn/2018/07/01/next-word/</id>
    <published>2018-07-01T08:49:06.000Z</published>
    <updated>2018-07-01T08:51:50.342Z</updated>
    
    <content type="html"><![CDATA[<p>确信无疑 quexinwuyi -  certainly</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;确信无疑 quexinwuyi -  certainly&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>月亮和六便士</title>
    <link href="http://www.youletter.cn/2018/06/28/%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB/"/>
    <id>http://www.youletter.cn/2018/06/28/月亮和六便士/</id>
    <published>2018-06-28T13:29:02.000Z</published>
    <updated>2018-06-28T13:29:33.620Z</updated>
    
    <content type="html"><![CDATA[<p>source:<br><a href="http://www.gutenberg.org/files/222/222-h/222-h.htm" target="_blank" rel="noopener">The Moon and Sixpence</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;source:&lt;br&gt;&lt;a href=&quot;http://www.gutenberg.org/files/222/222-h/222-h.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Moon and Sixpence&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序</title>
    <link href="http://www.youletter.cn/2018/06/27/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://www.youletter.cn/2018/06/27/小程序/</id>
    <published>2018-06-27T06:30:08.000Z</published>
    <updated>2018-06-28T12:25:13.273Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5ac9b72cf265da23906c486a" target="_blank" rel="noopener">手把手教会你小程序登录鉴权</a></p><p><a href="https://github.com/wechat-group/weixin-java-tools" target="_blank" rel="noopener">微信后端工具包</a></p><p><a href="https://github.com/binarywang/weixin-java-miniapp-demo" target="_blank" rel="noopener">weixin-java-miniapp-demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5ac9b72cf265da23906c486a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;手把手教会你小程序登录鉴权&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>最佳实践-有毒</title>
    <link href="http://www.youletter.cn/2018/06/22/best-practice-considered-harmfull/"/>
    <id>http://www.youletter.cn/2018/06/22/best-practice-considered-harmfull/</id>
    <published>2018-06-22T02:36:49.000Z</published>
    <updated>2018-06-28T10:12:44.801Z</updated>
    
    <content type="html"><![CDATA[<p>我长时间以来对所谓“最佳实践”感到困惑。在我脑海中藏着两个问题：</p><ul><li>谁来决定这就是最佳实践</li><li>谁说这种实践不能做得更佳？</li></ul><p>有个从事石油工业的人跟我说，通常合同中会指定应该使用的“最佳实践”，但实际的实践却很少是指定的那个。而且每个人对于最佳实践都有自己的理解。直到遇到一个突发实践，直到钱都已经花光了，这时他们才来裁决什么是最佳实践。</p><p>就算某个实践在这个时间点上可能最好的做法，但是它能提升多少如何计算呢？声称某个实践是最佳实践，你可能会因此自我限制并潜在地阻止创新。</p><p><a href="http://mobileservices.texterity.com/mitsmr/spring_2018/MobilePagedArticle.action?articleId=1364542&amp;folio=85&amp;lm=1524856788000&amp;linkImageSrc=/mitsmr/spring_2018/data/imgpages/mobile_tn2/0087_murwap.png#articleId1364542" target="_blank" rel="noopener">Why Best Practices Often Fall Short</a></p><p>对于新手，有时人们无法正确的识别出能产生价值的实践行为。很多人看了皮克斯动画公司之后，决定把厕所放在办公室的中间来提高创造力。他们确实这么做了，但是还有很多其他事情发生在皮克斯动画公司。在你的组织中，单单移动厕所的位置可能并不会对创造力产生大的改变。</p><p>还有更糟糕的事。</p><p>他人的最佳实践并不意味着在你的环境中也是最佳的。想想你移动厕所所花费的费用，想想给那些不想移动工位的同事带来的烦恼，还有在此过程中损失的生产效率。</p><p>作者建议说，在有些情况下，最佳时间带来的破坏性比带来的好处还要多。所以一些组织最好还是应避免“最佳实践”，按照自己的情况来进行。</p><p>还有更糟糕的事。</p><p>这些“最佳实践”中有一些风险。包括他们会耗费更多资源，包括不能正确的实行，包括可能会适得其反。还是那句话，最适合别人的未必最适合你。</p><p>事实上, 一些最佳实践 (比如高管股票期权) 可能会导致可怕错误, 引发你最不希望的行为。</p><p>那么, 一个小的公司该怎么办呢？</p><p>作者建议，去复制那些“好的实践”，而不是“最佳实践”。复制一些普遍的，被证明的东西。这样可以避免大的风险和开销。</p><p>对我而言，这意味着应该先把敏捷做好，而不是急着跳到DevOps去。</p><p>作者还建议，你的优势在于自己掌握的核心秘密。多想想自己的优势在哪儿，从中创造出最佳实践，从中提高自己。</p><p>一直以来，我希望团队自己学习领悟, 而不是对他们直接改变。但我也希望当发现别人好的做法时，团队能快速复制的做法。在我看来，最重要的事情是让团队来决定如何做，而不是一定怎样。</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源:"></a>来源:</h3><p><a href="https://www.javacodegeeks.com/2018/06/best-practices-considered-harmfull.html" target="_blank" rel="noopener">https://www.javacodegeeks.com/2018/06/best-practices-considered-harmfull.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我长时间以来对所谓“最佳实践”感到困惑。在我脑海中藏着两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;谁来决定这就是最佳实践&lt;/li&gt;
&lt;li&gt;谁说这种实践不能做得更佳？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有个从事石油工业的人跟我说，通常合同中会指定应该使用的“最佳实践”，但实际的实践却很
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>故事从HTTP request开始</title>
    <link href="http://www.youletter.cn/2018/06/13/%E6%95%85%E4%BA%8B%E4%BB%8EHTTP-request%E5%BC%80%E5%A7%8B/"/>
    <id>http://www.youletter.cn/2018/06/13/故事从HTTP-request开始/</id>
    <published>2018-06-13T07:33:02.000Z</published>
    <updated>2018-06-13T07:40:16.619Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 1.0</p><p><a href="https://tools.ietf.org/html/rfc1945" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc1945</a></p><p>HTTP 1.1</p><p><a href="https://tools.ietf.org/html/rfc2616" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc2616</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 1.0&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc1945&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://tools.ietf.org/html/rfc1945&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js encodeURI</title>
    <link href="http://www.youletter.cn/2018/06/06/js-encodeURI/"/>
    <id>http://www.youletter.cn/2018/06/06/js-encodeURI/</id>
    <published>2018-06-06T07:28:23.000Z</published>
    <updated>2018-06-06T07:28:42.271Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI</a></p><p>类型    包含<br>保留字符    ; , / ? : @ &amp; = + $<br>非转义的字符    字母 数字 - _ . ! ~ * ‘ ( )<br>数字符号    #</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java 密码校验</title>
    <link href="http://www.youletter.cn/2018/05/25/java-%E5%AF%86%E7%A0%81%E6%A0%A1%E9%AA%8C/"/>
    <id>http://www.youletter.cn/2018/05/25/java-密码校验/</id>
    <published>2018-05-25T09:47:17.000Z</published>
    <updated>2018-05-25T09:47:39.434Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private static int calculatePasswordStrength(String password) &#123;</span><br><span class="line">       //total score of password</span><br><span class="line">       int iPasswordScore = 0;</span><br><span class="line"></span><br><span class="line">       if (password.length() &lt; 8 || password.length() &gt; 20) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one digit, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[0-9]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one lower case letter, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[a-z]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one upper case letter, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[A-Z]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       //if it contains one special character, add 1 to total score</span><br><span class="line">       if (password.matches(&quot;(?=.*[~!@#$%^&amp;*()_-]).*&quot;)) &#123;</span><br><span class="line">           iPasswordScore += 1;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       return iPasswordScore;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ab 压测性能</title>
    <link href="http://www.youletter.cn/2018/05/24/ab-%E5%8E%8B%E6%B5%8B%E6%80%A7%E8%83%BD/"/>
    <id>http://www.youletter.cn/2018/05/24/ab-压测性能/</id>
    <published>2018-05-24T10:09:25.000Z</published>
    <updated>2018-05-24T10:11:00.495Z</updated>
    
    <content type="html"><![CDATA[<p>POST  请求</p><p>ab -n 200 -c 5  -p para_tch  -A user:abcdedfpassword -T application/x-www-form-urlencoded <a href="http://10.1.5.114:80/api/login" target="_blank" rel="noopener">http://10.1.5.114:80/api/login</a></p><p>参数写在para_tch中</p><p>para_tch 的内容<br><a href="mailto:username=one@qq.com" target="_blank" rel="noopener">username=one@qq.com</a>&amp;password=000999&amp;grant_type=password</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POST  请求&lt;/p&gt;
&lt;p&gt;ab -n 200 -c 5  -p para_tch  -A user:abcdedfpassword -T application/x-www-form-urlencoded &lt;a href=&quot;http://10.1.5.114:80/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Chapter1 Banjamin Button is born</title>
    <link href="http://www.youletter.cn/2018/05/18/Chapter1-Banjamin-Button-is-born/"/>
    <id>http://www.youletter.cn/2018/05/18/Chapter1-Banjamin-Button-is-born/</id>
    <published>2018-05-18T02:14:26.000Z</published>
    <updated>2018-05-20T09:30:06.685Z</updated>
    
    <content type="html"><![CDATA[<p>在1860那么久以前，在家中生孩子是很正常的事情。而现在，据我所知，掌管医学的神规定小孩的第一声哭声应该在医院的混杂着麻醉药的空气中发出。最好还是一家现代化的医院。所以，当年轻的Roger先生和太太，在1860夏季的一天，决定他们的第一个小孩应在医院出生时，他们领先了这种时尚50年的时间。是否这种时空错乱和我将要讲述的这段令人吃惊的历史有关联已经无法知晓了。</p><p>现在我负责讲述都发生了什么，让你自己决定要不要相信。</p><p>Roger Button在战前的Baltimore，无论是社会地位还是财富方面都有着令人羡慕程度。<br>他们和许多家族都有联系。每个南方人都知道，那些家族有权让他们成为众多贵族中的一员，而联邦政府就是由这些贵族中的大部分人组成的。这是他们第一次经历生小孩这种古老的，让人开心的传统，Button先生自然有些紧张。他希望能生一个男孩，这样就可以去位于康涅狄格的耶鲁上学。当前Button先生在那儿可是被叫了四年天才呢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在1860那么久以前，在家中生孩子是很正常的事情。而现在，据我所知，掌管医学的神规定小孩的第一声哭声应该在医院的混杂着麻醉药的空气中发出。最好还是一家现代化的医院。所以，当年轻的Roger先生和太太，在1860夏季的一天，决定他们的第一个小孩应在医院出生时，他们领先了这种时
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sprint boot restTemplate usage</title>
    <link href="http://www.youletter.cn/2018/05/08/sprint-boot-restTemplate-usage/"/>
    <id>http://www.youletter.cn/2018/05/08/sprint-boot-restTemplate-usage/</id>
    <published>2018-05-08T10:44:07.000Z</published>
    <updated>2018-05-09T07:39:20.750Z</updated>
    
    <content type="html"><![CDATA[<p>POST form-urlencoded</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RestTemplate restTemplate = new RestTemplate();</span><br><span class="line">String url = &quot;http://localhost:1450/cls/login&quot;;</span><br><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line"></span><br><span class="line">MultiValueMap&lt;String, String&gt; hashMap= new LinkedMultiValueMap&lt;String, String&gt;();</span><br><span class="line">hashMap.add(&quot;username&quot;, &quot;cla10002&quot;);</span><br><span class="line">hashMap.add(&quot;password&quot;, &quot;xxxx&quot;);</span><br><span class="line">hashMap.add(&quot;grant_type&quot;,&quot;password&quot;);</span><br><span class="line">HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = new HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt;(hashMap, headers);</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;String&gt; response = restTemplate.postForEntity( url, request , String.class );</span><br><span class="line"></span><br><span class="line">//获得返回值</span><br><span class="line">String body = response.getBody();</span><br><span class="line">System.out.println(body.toString());</span><br></pre></td></tr></table></figure><p>GET </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HttpHeaders headers = new HttpHeaders();</span><br><span class="line">headers.set(&quot;Accept&quot;, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(url)</span><br><span class="line">.queryParam(&quot;msisdn&quot;, msisdn)</span><br><span class="line">.queryParam(&quot;email&quot;, email)</span><br><span class="line">.queryParam(&quot;clientVersion&quot;, clientVersion)</span><br><span class="line">.queryParam(&quot;clientType&quot;, clientType)</span><br><span class="line">.queryParam(&quot;issuerName&quot;, issuerName)</span><br><span class="line">.queryParam(&quot;applicationName&quot;, applicationName);</span><br><span class="line"></span><br><span class="line">HttpEntity&lt;?&gt; entity = new HttpEntity&lt;&gt;(headers);</span><br><span class="line"></span><br><span class="line">HttpEntity&lt;String&gt; response = restTemplate.exchange(</span><br><span class="line">builder.toUriString(), </span><br><span class="line">HttpMethod.GET, </span><br><span class="line">entity, </span><br><span class="line">String.class);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;POST form-urlencoded&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
  </entry>
  
</feed>

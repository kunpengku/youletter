<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>由来</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.youletter.cn/"/>
  <updated>2018-02-06T06:08:13.539Z</updated>
  <id>http://www.youletter.cn/</id>
  
  <author>
    <name>kunpengku</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring boot 入参检验</title>
    <link href="http://www.youletter.cn/2018/02/06/spring-boot-%E5%85%A5%E5%8F%82%E6%A3%80%E9%AA%8C/"/>
    <id>http://www.youletter.cn/2018/02/06/spring-boot-入参检验/</id>
    <published>2018-02-06T05:41:06.000Z</published>
    <updated>2018-02-06T06:08:13.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对于POST一个JSON对象的情况"><a href="#对于POST一个JSON对象的情况" class="headerlink" title="对于POST一个JSON对象的情况"></a>对于POST一个JSON对象的情况</h1><p>需要在参数列表中增加 @Valid 标记</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/book&quot;, method = RequestMethod.POST)</div><div class="line">public String recieve(@RequestBody @Valid Book book) &#123;</div><div class="line">    System.out.println(book);</div><div class="line"></div><div class="line">    return book.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可用的注解有很多 ,参见 <a href="https://docs.oracle.com/javaee/7/api/javax/validation/constraints/package-summary.html" target="_blank" rel="external">javax.validation.constraints</a></p><p>对于验证不通过的 抛出的异常有</p><p>1 org.springframework.http.converter.HttpMessageNotReadableException</p><p>该异常出现于，类型错误 ，比如 把一个 “a” 复制给 一个 Long .</p><p>2 org.springframework.web.bind.MethodArgumentNotValidException</p><p>该异常出现于，你的注解生效了，并且 超越了你规定的范围。</p><h1 id="常用的"><a href="#常用的" class="headerlink" title="常用的"></a>常用的</h1><p>对于 数字 有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">@DecimalMax(&quot;100&quot;)</div><div class="line">@DecimalMin(&quot;10&quot;)</div><div class="line">Integer price;</div><div class="line"></div><div class="line">@Max(100)</div><div class="line">@Min(10)</div><div class="line">Integer price2;</div></pre></td></tr></table></figure><p>参看 </p><p>注解介绍 <a href="https://www.owasp.org/index.php/Bean_Validation_Cheat_Sheet" target="_blank" rel="external">https://www.owasp.org/index.php/Bean_Validation_Cheat_Sheet</a></p><p>常用正则表达式 <a href="https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository" target="_blank" rel="external">https://www.owasp.org/index.php/OWASP_Validation_Regex_Repository</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对于POST一个JSON对象的情况&quot;&gt;&lt;a href=&quot;#对于POST一个JSON对象的情况&quot; class=&quot;headerlink&quot; title=&quot;对于POST一个JSON对象的情况&quot;&gt;&lt;/a&gt;对于POST一个JSON对象的情况&lt;/h1&gt;&lt;p&gt;需要在参数列表中增加
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring boot 接收参数的几种姿势</title>
    <link href="http://www.youletter.cn/2018/02/04/spring-boot-%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
    <id>http://www.youletter.cn/2018/02/04/spring-boot-接收参数的几种姿势/</id>
    <published>2018-02-04T03:12:29.000Z</published>
    <updated>2018-02-04T06:01:56.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h1><p>适用场景：请求方传入一个JSON串，将这个json反序列化成一个对象，赋值给一个变量。<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(value = &quot;/friend&quot;, method = RequestMethod.POST)</div><div class="line">public String create(@RequestBody Friend friend) &#123;</div><div class="line">    System.out.println(friend);</div><div class="line"></div><div class="line">    return &quot;ok&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class Friend &#123;</div><div class="line">    String name;</div><div class="line">    String stage;</div><div class="line">    String location;</div><div class="line"></div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setName(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getStage() &#123;</div><div class="line">        return stage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setStage(String stage) &#123;</div><div class="line">        this.stage = stage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getLocation() &#123;</div><div class="line">        return location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setLocation(String location) &#123;</div><div class="line">        this.location = location;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Friend&#123;&quot; + &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; + &quot;, stage=&apos;&quot; + stage + &apos;\&apos;&apos; + &quot;, location=&apos;&quot; + location + &apos;\&apos;&apos; + &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：该类Friend应该是一个POJO, 写好setter/getter方法。</p><p>其中 序列化和反序列化的工作由 HttpMessageConverter 来完成。默认的HttpMessageConverter使用的是jackson的序列化方法，如果需要修改成别的，参考另一篇博文<br><a href="http://youletter.cn/2017/12/06/spring-boot%E4%B8%AD%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84HttpMessageConverter%E4%B8%BAGsonHttpMessageConverter/" target="_blank" rel="external">spring-boot中修改默认的HttpMessageConverter为GsonHttpMessageConverter</a></p><p>参考：<br><a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestbody" target="_blank" rel="external">Mapping the request body with the @RequestBody annotation</a></p><h1 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h1><p>如果需要将path中的值，赋给变量。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@GetMapping(&quot;/friend/&#123;friendId&#125;&quot;)</div><div class="line">public String findOwner(@PathVariable String friendId) &#123;</div><div class="line">    System.out.println(friendId);</div><div class="line">    return &quot;displayOwner&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>{friendId} 这个位置的 值就会 赋给 friendId这个变量。</p><p>注意： 如果URI template中的变量和参数的变量一致，可以忽略@PathVariable中的参数。 如果不一致，需要显示指出，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@GetMapping(&quot;/friend/&#123;friendId&#125;&quot;)</div><div class="line">public String findOwner(@PathVariable(&quot;friendId&quot;) String notfriendId) &#123;</div><div class="line">    System.out.println(notfriendId);</div><div class="line">    return &quot;displayOwner&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考 <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestmapping-uri-templates" target="_blank" rel="external">URI Template Patterns</a></p><h1 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h1><p>绑定参数， 默认是必选的。如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@GetMapping(&quot;/friend/me&quot;)</div><div class="line">public String findOwner(@RequestParam(&quot;location&quot;) String location,</div><div class="line">                        @RequestParam(&quot;stage&quot;) String stage) &#123;</div><div class="line">    System.out.println(location);</div><div class="line">    System.out.println(stage);</div><div class="line">    return &quot;displayOwner&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果某个参数不是必选，需设置required属性。<br><code>@RequestParam(name=&quot;id&quot;, required=false)</code></p><p>参考 <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestparam" target="_blank" rel="external">Binding request parameters to method parameters with @RequestParam</a></p><h1 id="RequestHeader"><a href="#RequestHeader" class="headerlink" title="@RequestHeader"></a>@RequestHeader</h1><p>映射header属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@GetMapping(&quot;/friend/me2&quot;)</div><div class="line">public void displayHeaderInfo(@RequestHeader(&quot;Authorization&quot;) String authorization,</div><div class="line">                              @RequestHeader(&quot;Keep-Alive&quot;) long keepAlive) &#123;</div><div class="line"></div><div class="line">    System.out.println(authorization);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>参考 <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle/#mvc-ann-requestheader" target="_blank" rel="external">Mapping request header attributes with the @RequestHeader annotation</a></p><h1 id="测试使用的工程上传至github"><a href="#测试使用的工程上传至github" class="headerlink" title="测试使用的工程上传至github"></a>测试使用的工程上传至github</h1><p><a href="https://github.com/kunpengku/spring-boot-request-kind" target="_blank" rel="external">spring-boot-request-kind</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RequestBody&quot;&gt;&lt;a href=&quot;#RequestBody&quot; class=&quot;headerlink&quot; title=&quot;@RequestBody&quot;&gt;&lt;/a&gt;@RequestBody&lt;/h1&gt;&lt;p&gt;适用场景：请求方传入一个JSON串，将这个json反序列化成一个
      
    
    </summary>
    
    
      <category term="spring-boot" scheme="http://www.youletter.cn/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>elasticesarch 旧版本下载地址</title>
    <link href="http://www.youletter.cn/2018/01/22/elasticesarch-%E6%97%A7%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/"/>
    <id>http://www.youletter.cn/2018/01/22/elasticesarch-旧版本下载地址/</id>
    <published>2018-01-22T05:29:09.000Z</published>
    <updated>2018-01-22T05:29:30.738Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.elastic.co/downloads/past-releases" target="_blank" rel="external">https://www.elastic.co/downloads/past-releases</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.elastic.co/downloads/past-releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.elastic.co/downloads/past-releases&lt;/a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring boot elasticsearch</title>
    <link href="http://www.youletter.cn/2018/01/19/spring-boot-elasticsearch/"/>
    <id>http://www.youletter.cn/2018/01/19/spring-boot-elasticsearch/</id>
    <published>2018-01-19T03:56:05.000Z</published>
    <updated>2018-01-19T03:57:03.295Z</updated>
    
    <content type="html"><![CDATA[<p>为了方便调试， 最好把DSL打印出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">String s = requestBuilder.toString();</div><div class="line">System.out.println(s);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了方便调试， 最好把DSL打印出来。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>notions and expression of notions</title>
    <link href="http://www.youletter.cn/2018/01/11/notions-and-expression-of-notions/"/>
    <id>http://www.youletter.cn/2018/01/11/notions-and-expression-of-notions/</id>
    <published>2018-01-11T09:38:25.000Z</published>
    <updated>2018-01-17T15:54:51.206Z</updated>
    
    <content type="html"><![CDATA[<p>It rains      天下雨了</p><p>Does it rain？  下雨了吗？</p><p>Is it raining?  正在下雨吗？</p><p>It is going to rain   要下雨了</p><p>Has it rained?      下过了雨吗？</p><p>Dit it rain (yesterday)?  (昨天)下雨的吗？</p><p>He strikes me    他打我<br>I strikes him    我打他</p><p>中文用词序 表达 ，英文用  I -&gt; me ， He -&gt; him 来表达宾语。</p><p>宾语意念 。</p><p>中文有一种 用 把 字介绍宾语的语法工具</p><p>push open the door   把门推开</p><p>kill the man         把人打死</p><p>rob his money        把钱抢走</p><p>more than sixty     六十多</p><p>less hot  不怎么热</p><p>not so very hot  不十分热</p><p>rather hot 颇有点热</p><p>just hot enough 热的正好</p><p>too hot  太热</p><p>hot enough to burn your fingers  热的烫手</p><p>as hot as a furnace 热的如火炉一般</p><p>so hot that you can hardly breathe 热的透不过起来</p><p>eighty percent 八成</p><p>fifteen percent discount 八五折</p><p>the whiteness of the white horse 白马之白</p><p>the rich  富人</p><p>the poor  穷人</p><p>He is afraid 他怕</p><p>英文里有 事实fact 和 想象fancy 的区别</p><p>I think so  事实</p><p>I should think so   想象</p><p>It is all right 事实</p><p>It should be all right 想象</p><p>He becomes tired  他累了</p><h1 id="八大词类"><a href="#八大词类" class="headerlink" title="八大词类"></a>八大词类</h1><p>名词 Nouns</p><p>代名词 pronoun</p><p>动词 verb</p><p>形容词 adjective</p><p>副词 adverbs</p><p>介词  preposition</p><p>连词 conjunction</p><p>叹词 exclamation</p><p>介词后面必定有一个名词 ，构成 介词短语。 介词短语 不是 当做 形容词用，便是当做副词作用。</p><p>同一个词，在不同句子中的 职务不同</p><p>He sleeps 动词</p><p>He talks in his sleep 名词</p><p>He walked before 副词</p><p>He walked before me 介词</p><p>He had walked a mile before he came to the house 连词</p><p>At the back of the house 。 名词back</p><p>back parlour  back pay 欠薪  形容词</p><p>Stand back 副词</p><p>To back up a friend 做朋友的后盾 动词</p><p>I brought a new hat which you saw this morning  。代词和连词 which</p><p>green sky  青天</p><p>natural gift 天资</p><p>heavenly palace 天堂</p><p>natural calamity 天灾</p><p>everyday 天天</p><p>to explain one’s mind 自白其志</p><p>to meet a loss without compensation 白受损失</p><p>在英文里，词形随着作用的变化而变化</p><p>admire 动词 - admiration 名词 - admirable , admiring 形 - admirably ，admiringly 副词</p><h1 id="作用的意味"><a href="#作用的意味" class="headerlink" title="作用的意味"></a>作用的意味</h1><h1 id="事物的意味，-凡是具体的东西"><a href="#事物的意味，-凡是具体的东西" class="headerlink" title="事物的意味， 凡是具体的东西"></a>事物的意味， 凡是具体的东西</h1><p>动作名词</p><p>I love books.      I love reading.</p><p>Have you learnt this?  Have you learnt swimming?</p><p>The geography lesson is difficult. Breathing under water is difficult.</p><p>A pocket-knife is useful.     Letter-writing is useful.</p><p>He stopped the car.       She stopped singing.</p><p>I teach grammar.         You teach dancing.</p><p>The boy slept during the class.    He slept also during the meeting.</p><p>Then he slept before seven o’clock.  Then he slept before going to bed.</p><p>He is like his father in his laziness. This is like playing with fire.   like是介词。</p><p>He learn to punctuate.  He learn punctuation. </p><p>We compose sentences.    We learn composition.</p><p>He is promoted.   We heard about of his promotion.</p><p>You were examined.  You pass the examination. </p><p>This is esay to prepare. This requires no preparation.</p><p>You must not be afraid to repeat the sentences.  Repetition is good to you , but don’t repeat mistakes. </p><p>品性和情况的名词</p><p>He is poor, but he enjoys his poverty.      poverty 就是名词。</p><p>Lovers are blind, but never mind the blindess of the lovers. so long as love lasts.  bliend = adj.     blindness = n.</p><p>He is a good man .but his goodness can not help him to pay  debts.</p><p>Goodness is such a virable term.  According to the servant. </p><h1 id="动作和品性的意味"><a href="#动作和品性的意味" class="headerlink" title="动作和品性的意味"></a>动作和品性的意味</h1><h1 id="情状和方面的意味"><a href="#情状和方面的意味" class="headerlink" title="情状和方面的意味"></a>情状和方面的意味</h1><p>You want to be independent- how , Financially or spiritually</p><p>In what respect are men and women unequal? Physically, mentally, socially, legally, or economically? Are the equal in brains, in looks ,in courage, in patience ,in jealousy, in interest, in babies.</p><p>The Chinese are superior to the English in patience, and the English are superior to the Chinese in political organization.</p><p>There is physical courage, and there is moral courage.</p><p>A man who dare not say what he belives is a moral coward.</p><p>E officials are great men to their families, but criminals to the nation.</p><h1 id="介词力量的意味"><a href="#介词力量的意味" class="headerlink" title="介词力量的意味"></a>介词力量的意味</h1><p>Go with him. He comes for his hat.</p><p>介词后面跟名词</p><h1 id="作用的转变"><a href="#作用的转变" class="headerlink" title="作用的转变"></a>作用的转变</h1><p>名词当形容词，而词形不用变化</p><p>stone wall.</p><p>名词变 形容词 </p><p>gold  golden</p><p>wood   wooden</p><p>earth earthen</p><h1 id="名词当动词用"><a href="#名词当动词用" class="headerlink" title="名词当动词用"></a>名词当动词用</h1><p>Hand the money to me</p><p>they stoned him to death</p><p>The gun was fired.</p><h1 id="动词当名词"><a href="#动词当名词" class="headerlink" title="动词当名词"></a>动词当名词</h1><p>Fishing is pleasant to lovers even when there is no fish</p><p>It’s difficult to remember the last lie that you told</p><p>There is nothing finer than to chat with you old friend around a fire</p><p>To call oneself a revolutionist is one thing, to be is another thing.</p><h1 id="动词当形容词"><a href="#动词当形容词" class="headerlink" title="动词当形容词"></a>动词当形容词</h1><p>分词<br>一种是 现在分词 present participle<br>一种是 过去分词 past participle</p><p>temporarily occupied areas</p><p>rapidly rising reputation</p><p>his broken health</p><p>flying carpet</p><p>determined look</p><p>over-protected</p><p>howling monkey</p><p>ill-smelling thing</p><p>well-written essays</p><p>mimic  mimicking</p><p>picnic   picnicking</p><h1 id="动词变形容词"><a href="#动词变形容词" class="headerlink" title="动词变形容词"></a>动词变形容词</h1><h1 id="形容词变名词"><a href="#形容词变名词" class="headerlink" title="形容词变名词"></a>形容词变名词</h1><p>I have no fear of his power.</p><p>I was impressed by her kindness.</p><p>strong - strength</p><p>broad - breadth</p><p>wide - width</p><p>cleanly - cleanliness</p><p>kind - kindness</p><p>cold - coldness</p><p>faithful - faithfulness</p><p>sorry - sorrow</p><p>hungry - hunger</p><p>proud - pride</p><p>savage - savagery</p><p>diligent - diligence</p><h1 id="the-poor-and-the-rich"><a href="#the-poor-and-the-rich" class="headerlink" title="the poor and the rich"></a>the poor and the rich</h1><p>the righteous and the wicked</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It rains      天下雨了&lt;/p&gt;
&lt;p&gt;Does it rain？  下雨了吗？&lt;/p&gt;
&lt;p&gt;Is it raining?  正在下雨吗？&lt;/p&gt;
&lt;p&gt;It is going to rain   要下雨了&lt;/p&gt;
&lt;p&gt;Has it rained?     
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>开明英文文法-前言</title>
    <link href="http://www.youletter.cn/2018/01/11/%E5%BC%80%E6%98%8E%E8%8B%B1%E6%96%87%E6%96%87%E6%B3%95-%E5%89%8D%E8%A8%80/"/>
    <id>http://www.youletter.cn/2018/01/11/开明英文文法-前言/</id>
    <published>2018-01-10T23:46:36.000Z</published>
    <updated>2018-01-11T07:46:56.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作者序"><a href="#作者序" class="headerlink" title="作者序"></a>作者序</h1><h2 id="表达方法的科学"><a href="#表达方法的科学" class="headerlink" title="表达方法的科学"></a>表达方法的科学</h2><p>开明英文文法代表一种应用实践，关于把英文语法教给中国学生的新的语法理论。它把一切语法的形式和结构只是当做表达意念的工具，而把语法当成表达的科学。它不是从外表的形式讲解到内部的含义，而是从内在的含义讲到外表的形式，即从意念讲到意念的表达法。因此，它讨论的不是词型和语法形式的定义和分析，而是深入到说话者的心理，去追问说话者在语言被后试图表达的意念是什么，以及通过哪种语法工具来表达出来的。所以语法讨论意念，以及意念的表达方式。所有的语法变化和结构都和这个问题相关，并附属于它们。这种革新的语法见解，创始于Benedetto Croce的理想，而通过OttoJespersen 和 Ferdinand 的划时代的著作，把它发扬光大起来。</p><h2 id="中文和英文的比较"><a href="#中文和英文的比较" class="headerlink" title="中文和英文的比较"></a>中文和英文的比较</h2><p>在某种程度以内，开明英文文法也包含中文英文两种语言的新的比较文法。说的范围更小一点，是中英文意念范畴和不同的表达意念的工具的比较。可是书中所举个点，其性质完全是实用性的而非理论性的，旨在帮助中国学生克服心理上的困难。很多普通的语法错误很容易用这种方法矫正，而且也没有别的办法。凡在中英文意念上有区别的地方，明显的做法是训练中国学生学的这种新的思考方式。但在多少情况下，中英文有许多意念共同的地方，如何阐明这两种语言表达方法的不同是最有意思的地方。英文语法实在是教英文的思考和表达的方式。学生应该时刻问自己，如果自己有一个想法，如何用英文表达出来。</p><h2 id="错误之由来"><a href="#错误之由来" class="headerlink" title="错误之由来"></a>错误之由来</h2><p>意念和表达的区别，仅仅是逻辑的，而非实际的。没有一种思想无法表现，也没有一种表现不遵循思想的路径。我们说话时在运用思想，许多女士讲话是为了寻找她们思考什么。思想法和表达法是打成一片，不可分离的。因此，所以没有一种语法是只讲表达法而同时不去讲如何思想法的。语法错误的造成，是因为思想的方式和表达的习惯是错的。错误有两种，一是由于外国人的思想方式，这是学习</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作者序&quot;&gt;&lt;a href=&quot;#作者序&quot; class=&quot;headerlink&quot; title=&quot;作者序&quot;&gt;&lt;/a&gt;作者序&lt;/h1&gt;&lt;h2 id=&quot;表达方法的科学&quot;&gt;&lt;a href=&quot;#表达方法的科学&quot; class=&quot;headerlink&quot; title=&quot;表达方法的科学
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>maven 实用命令</title>
    <link href="http://www.youletter.cn/2018/01/10/maven-%E5%AE%9E%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.youletter.cn/2018/01/10/maven-实用命令/</id>
    <published>2018-01-10T06:37:27.000Z</published>
    <updated>2018-02-06T12:41:17.358Z</updated>
    
    <content type="html"><![CDATA[<p>修改mvn 项目的 版本</p><p>mvn versions:set -DnewVersion=1.0.X-SNAPSHOT versions:commit </p><p>查看 项目的 依赖<br>mvn dependency:tree</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改mvn 项目的 版本&lt;/p&gt;
&lt;p&gt;mvn versions:set -DnewVersion=1.0.X-SNAPSHOT versions:commit &lt;/p&gt;
&lt;p&gt;查看 项目的 依赖&lt;br&gt;mvn dependency:tree&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018.01</title>
    <link href="http://www.youletter.cn/2018/01/08/2018-01/"/>
    <id>http://www.youletter.cn/2018/01/08/2018-01/</id>
    <published>2018-01-08T15:17:18.000Z</published>
    <updated>2018-01-16T15:00:35.021Z</updated>
    
    <content type="html"><![CDATA[<p>1月8日</p><p>青山遮不住</p><p>毕竟东流去</p><p>江晚正愁余</p><p>山深闻鹧鸪</p><p>1月14日</p><p>北京是什么地方，北京是舞台。表演结束后，还得回家。</p><p>1月16日</p><p>我为你唱最后的古谣 </p><p>红雨瓢泼泛起了回忆怎么潜</p><p>你美目如当年</p><p>流转我心间</p><p>渡口边最后一面洒下了句点</p><p>与你若只如初见</p><p>何须感伤离别</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1月8日&lt;/p&gt;
&lt;p&gt;青山遮不住&lt;/p&gt;
&lt;p&gt;毕竟东流去&lt;/p&gt;
&lt;p&gt;江晚正愁余&lt;/p&gt;
&lt;p&gt;山深闻鹧鸪&lt;/p&gt;
&lt;p&gt;1月14日&lt;/p&gt;
&lt;p&gt;北京是什么地方，北京是舞台。表演结束后，还得回家。&lt;/p&gt;
&lt;p&gt;1月16日&lt;/p&gt;
&lt;p&gt;我为你唱最后的古谣 &lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日光山雪</title>
    <link href="http://www.youletter.cn/2018/01/08/%E6%97%A5%E5%85%89%E5%B1%B1%E9%9B%AA/"/>
    <id>http://www.youletter.cn/2018/01/08/日光山雪/</id>
    <published>2018-01-08T08:41:59.000Z</published>
    <updated>2018-01-08T08:55:09.601Z</updated>
    
    <content type="html"><![CDATA[<p>巍巍大山，是没有规则的形状，扭转的山间，沟壑，小块的坡地。</p><p>这山不满足任何的对称性，它所有的地方都是独一无二的，绝无重复。</p><p>山是由陡坡和缓坡拼成的，陡坡上没有办法生长树木，在缓坡上，站立着一些耐寒的树木。</p><p>冬日里，这些树木看上去都是棕黑色的。</p><p>在不被树木遮盖的地方，是一层白雪。</p><p>下午时分，阳光从西边照过来，山体覆盖上一层温暖的颜色，但由于山和树木的遮挡，阳光则是无规则的散落在各处。</p><p>树木是挺拔向上的，山是岿然不动的，白雪静静的盖着，日光穿梭其间。</p><p>这山美妙了。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;巍巍大山，是没有规则的形状，扭转的山间，沟壑，小块的坡地。&lt;/p&gt;
&lt;p&gt;这山不满足任何的对称性，它所有的地方都是独一无二的，绝无重复。&lt;/p&gt;
&lt;p&gt;山是由陡坡和缓坡拼成的，陡坡上没有办法生长树木，在缓坡上，站立着一些耐寒的树木。&lt;/p&gt;
&lt;p&gt;冬日里，这些树木看上去都是棕黑色的。&lt;/p&gt;
&lt;p&gt;在不被树木遮盖的地方，是一层白雪。&lt;/p&gt;
&lt;p&gt;下午时分，阳光从西边照过来，山体覆盖上一层温暖的颜色，但由于山和树木的遮挡，阳光则是无规则的散落在各处。&lt;/p&gt;
&lt;p&gt;树木是挺拔向上的，山是岿然不动的，白雪静静的盖着，日光穿梭其间。&lt;/p&gt;
&lt;p&gt;这山美妙了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="见闻记录" scheme="http://www.youletter.cn/tags/%E8%A7%81%E9%97%BB%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>maven实战阅读</title>
    <link href="http://www.youletter.cn/2018/01/08/maven%E5%AE%9E%E6%88%98%E9%98%85%E8%AF%BB/"/>
    <id>http://www.youletter.cn/2018/01/08/maven实战阅读/</id>
    <published>2018-01-07T22:58:15.000Z</published>
    <updated>2018-01-10T12:51:31.055Z</updated>
    
    <content type="html"><![CDATA[<p>Maven 抽象了 一个完整的 构建 生命周期模型。</p><p>Maven 标准化构建过程</p><p>Maven 是一个依赖管理工具 和 项目信息管理工具</p><p>Maven通过一个坐标系统，精确的定位每一个构建(artifact)</p><p>Maven 还为全世界的Java开发者提供了一个 免费的中央仓库<br>(国内，也可以使用阿里云提供的中央仓库，速度快些)</p><p>Make 也许是最早的构建工具，创立于1977年。 可以使用有所的系统命令，但和系统绑定太深了，很难跨平台。</p><p>Ant = Another Neat Tool ，Ant可以看做Java版的Make。 使用XML定义构建脚本。跨平台。 Ant没有依赖管理，可以借助Lvy管理依赖</p><p>只有两类计算机语言，一类语言天天被人骂，还有一类没人用。</p><p>Maven 3.5</p><p>~/.m2/repository 是默认的 本地仓库</p><p>Maven 命令 实际上 执行的是 Java命令。 Maven使用Java编写的。</p><p>所以 设置环境变量 MAVEN_OPTS   ，会在执行mvn命令时 使用到相应的设置。<br>如 -Xms=1G</p><p>~/.m2/settings.xml 是 用户范围的配置</p><p>安装目录/conf/settings.xml 是 整个机器上的 系统级设置。</p><p>不要使用IDE 自带的Maven ，而是 指定 外部的 ，命令行的Maven （最佳实践）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven 抽象了 一个完整的 构建 生命周期模型。&lt;/p&gt;
&lt;p&gt;Maven 标准化构建过程&lt;/p&gt;
&lt;p&gt;Maven 是一个依赖管理工具 和 项目信息管理工具&lt;/p&gt;
&lt;p&gt;Maven通过一个坐标系统，精确的定位每一个构建(artifact)&lt;/p&gt;
&lt;p&gt;Maven 
      
    
    </summary>
    
    
      <category term="maven" scheme="http://www.youletter.cn/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>大雪纷纷</title>
    <link href="http://www.youletter.cn/2018/01/03/%E5%A4%A7%E9%9B%AA%E7%BA%B7%E7%BA%B7/"/>
    <id>http://www.youletter.cn/2018/01/03/大雪纷纷/</id>
    <published>2018-01-03T14:29:09.000Z</published>
    <updated>2018-01-03T14:35:01.879Z</updated>
    
    <content type="html"><![CDATA[<p>那一年，大雪纷纷，</p><p>下午最后一节下课后，大家都跑到院子里打雪仗。</p><p>我搓了一个雪球，看见你搓了一个更大的雪球。但是并没有浪费的扔出去。</p><p>我感觉到，那是给我准备的。</p><p>今天，还是在这个地方，还是一样的雪。</p><p>我也没有搓雪球。</p><p>你也没有看到雪。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那一年，大雪纷纷，&lt;/p&gt;
&lt;p&gt;下午最后一节下课后，大家都跑到院子里打雪仗。&lt;/p&gt;
&lt;p&gt;我搓了一个雪球，看见你搓了一个更大的雪球。但是并没有浪费的扔出去。&lt;/p&gt;
&lt;p&gt;我感觉到，那是给我准备的。&lt;/p&gt;
&lt;p&gt;今天，还是在这个地方，还是一样的雪。&lt;/p&gt;
&lt;p&gt;我也没有搓雪球。&lt;/p&gt;
&lt;p&gt;你也没有看到雪。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mybatis 动态SQL</title>
    <link href="http://www.youletter.cn/2017/12/30/mybatis-%E5%8A%A8%E6%80%81SQL/"/>
    <id>http://www.youletter.cn/2017/12/30/mybatis-动态SQL/</id>
    <published>2017-12-30T12:31:00.000Z</published>
    <updated>2017-12-31T05:26:09.299Z</updated>
    
    <content type="html"><![CDATA[<p>Mybatis的强大特性之一就是动态SQL。根据不同的条件拼装SQL是一件痛苦的事情，需要确保正确的空格，还有，要忽略掉列表最后的逗号，动态SQL可以彻底解决这种痛苦</p><p>之前的版本需要 理解很多的 元素，但是Mybatis3 很大的缩减了元素的数量，只有不到之前的一般。它们是：</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach</li></ul><h1 id="if"><a href="#if" class="headerlink" title="if"></a>if</h1><p>动态SQL常做的一件事就是根据不同的条件，动态的修改where子句。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogWithTitleLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE state = &apos;ACTIVE&apos;</div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>另一个例子， 这个例子里，用了两个 if 子句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">    AND author_name like #&#123;author.name&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><h1 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose, when, otherwise"></a>choose, when, otherwise</h1><p>如果不想应用所有的条件，而是根据某个条件，选择其中一个， 这有点像Java中的switch语句，动态SQL 提供了 choose, when, otherwise 来处理这种情况， 用例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</div><div class="line">  &lt;choose&gt;</div><div class="line">    &lt;when test=&quot;title != null&quot;&gt;</div><div class="line">      AND title like #&#123;title&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;when test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">      AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/when&gt;</div><div class="line">    &lt;otherwise&gt;</div><div class="line">      AND featured = 1</div><div class="line">    &lt;/otherwise&gt;</div><div class="line">  &lt;/choose&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><a id="more"></a><h1 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, where, set"></a>trim, where, set</h1><p>这次，我们将 ACTIVE = 1 也设置为 可选条件看看会发生什么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG</div><div class="line">  WHERE</div><div class="line">  &lt;if test=&quot;state != null&quot;&gt;</div><div class="line">    state = #&#123;state&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">    AND title like #&#123;title&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">  &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">    AND author_name like #&#123;author.name&#125;</div><div class="line">  &lt;/if&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>当没有一个条件满足时，SQL语句变成了这样。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM BLOG</div><div class="line">WHERE</div></pre></td></tr></table></figure><p>这样的SQL语句已经是非法的了，执行就会报错，怎么办呢。<br>如果只有第二个条件 满足 ，生成的SQL会变成下面的有样子，也是语法错误的SQL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM BLOG</div><div class="line">WHERE</div><div class="line">AND title like ‘someTitle’</div></pre></td></tr></table></figure><p>Mybatis有一个简单的处理，在90%的情况下都会管用，就是用一个where子句 ，示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;findActiveBlogLike&quot;</div><div class="line">     resultType=&quot;Blog&quot;&gt;</div><div class="line">  SELECT * FROM BLOG </div><div class="line">  &lt;where&gt; </div><div class="line">    &lt;if test=&quot;state != null&quot;&gt;</div><div class="line">         state = #&#123;state&#125;</div><div class="line">    &lt;/if&gt; </div><div class="line">    &lt;if test=&quot;title != null&quot;&gt;</div><div class="line">        AND title like #&#123;title&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</div><div class="line">        AND author_name like #&#123;author.name&#125;</div><div class="line">    &lt;/if&gt;</div><div class="line">  &lt;/where&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>where元素，只有在if条件有值得情况下才去添加”WHERE”子句，若最后的内容是”AND”或”OR”开头的，where 元素也知道如何将他们去除。</p><p>如果where元素不能满足你的需求，可以自定义trim元素， 举个栗子，用trim元素写一个等价的where元素 就是下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/trim&gt;</div></pre></td></tr></table></figure><p>prefixOverrides 属性会忽略通过管道分隔的文本序列（注意此例中的空格也是必要的，注意AND后的空格 和 OR后的空格）。它带来的结果就是所有在 prefixOverrides 属性中指定的内容将被移除，并且插入 prefix 属性中指定的内容。 trim 就是 去除两端的东西。</p><h1 id="动态更新元素-set"><a href="#动态更新元素-set" class="headerlink" title="动态更新元素 set"></a>动态更新元素 set</h1><p>示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</div><div class="line">  update Author</div><div class="line">    &lt;set&gt;</div><div class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</div><div class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</div><div class="line">    &lt;/set&gt;</div><div class="line">  where id=#&#123;id&#125;</div><div class="line">&lt;/update&gt;</div></pre></td></tr></table></figure><p>这里，set 元素会动态前置 SET 关键字，同时也会消除无关的逗号， 等价的 trim 元素是这样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</div><div class="line">  ...</div><div class="line">&lt;/trim&gt;</div></pre></td></tr></table></figure><p>注意这里我们忽略的是后缀中的值，而又一次附加了前缀中的值。</p><h1 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h1><p>动态SQL的另一个必要能力，就是去 循环一个 集合， 通常用在 IN 子句中，例如：</p><p>使用ArrayList的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</div><div class="line">  SELECT *</div><div class="line">  FROM POST P</div><div class="line">  WHERE ID in</div><div class="line">  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</div><div class="line">      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">  &lt;/foreach&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>使用HashMap的例子, 老实说，这种传入 Map的 例子比较奇怪， 传入Map的 肯定可以在 瓦面 转换成一个 List 再传进来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;SomeDomain&quot;&gt;</div><div class="line">    SELECT *</div><div class="line">    FROM school</div><div class="line">    WHERE ID in</div><div class="line">    &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;ids.keys&quot;</div><div class="line">             open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</div><div class="line">        #&#123;item&#125;</div><div class="line">    &lt;/foreach&gt;</div><div class="line">&lt;/select&gt;</div></pre></td></tr></table></figure><p>注意，你可以将任何可迭代对象（如列表、集合等）和任何的字典或者数组对象传递给foreach作为集合参数。当使用可迭代对象或者数组时，index是当前迭代的次数，item的值是本次迭代获取的元素。当使用字典（或者Map.Entry对象的集合）时，index是键，item是值。</p><h1 id="和-的区别"><a href="#和-的区别" class="headerlink" title="${} 和 #{}的区别"></a>${} 和 #{}的区别</h1><p><code>${}</code> 就是 字符串替换 ，容易发生 SQL注入。</p><p><code>#{}</code> 会先生成 预编译SQL， 再替换成某个值，安全性更好。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.mybatis.org/mybatis-3/zh/dynamic-sql.html" target="_blank" rel="external">动态SQL</a></p><p><a href="http://www.mybatis.org/mybatis-3/dynamic-sql.html" target="_blank" rel="external">Dynamic SQL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mybatis的强大特性之一就是动态SQL。根据不同的条件拼装SQL是一件痛苦的事情，需要确保正确的空格，还有，要忽略掉列表最后的逗号，动态SQL可以彻底解决这种痛苦&lt;/p&gt;
&lt;p&gt;之前的版本需要 理解很多的 元素，但是Mybatis3 很大的缩减了元素的数量，只有不到之前的一般。它们是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if&lt;/li&gt;
&lt;li&gt;choose (when, otherwise)&lt;/li&gt;
&lt;li&gt;trim (where, set)&lt;/li&gt;
&lt;li&gt;foreach&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h1&gt;&lt;p&gt;动态SQL常做的一件事就是根据不同的条件，动态的修改where子句。例如&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;select id=&amp;quot;findActiveBlogWithTitleLike&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     resultType=&amp;quot;Blog&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  SELECT * FROM BLOG&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  WHERE state = &amp;apos;ACTIVE&amp;apos;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;if test=&amp;quot;title != null&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    AND title like #&amp;#123;title&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/if&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/select&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另一个例子， 这个例子里，用了两个 if 子句&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;select id=&amp;quot;findActiveBlogLike&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     resultType=&amp;quot;Blog&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  SELECT * FROM BLOG WHERE state = ‘ACTIVE’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;if test=&amp;quot;title != null&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    AND title like #&amp;#123;title&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/if&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;if test=&amp;quot;author != null and author.name != null&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    AND author_name like #&amp;#123;author.name&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/if&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/select&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;choose-when-otherwise&quot;&gt;&lt;a href=&quot;#choose-when-otherwise&quot; class=&quot;headerlink&quot; title=&quot;choose, when, otherwise&quot;&gt;&lt;/a&gt;choose, when, otherwise&lt;/h1&gt;&lt;p&gt;如果不想应用所有的条件，而是根据某个条件，选择其中一个， 这有点像Java中的switch语句，动态SQL 提供了 choose, when, otherwise 来处理这种情况， 用例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;select id=&amp;quot;findActiveBlogLike&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     resultType=&amp;quot;Blog&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  SELECT * FROM BLOG WHERE state = ‘ACTIVE’&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;choose&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;when test=&amp;quot;title != null&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      AND title like #&amp;#123;title&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/when&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;when test=&amp;quot;author != null and author.name != null&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      AND author_name like #&amp;#123;author.name&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/when&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;otherwise&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      AND featured = 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/otherwise&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/choose&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/select&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="http://www.youletter.cn/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>流淌</title>
    <link href="http://www.youletter.cn/2017/12/30/%E6%B5%81%E6%B7%8C/"/>
    <id>http://www.youletter.cn/2017/12/30/流淌/</id>
    <published>2017-12-30T06:21:23.000Z</published>
    <updated>2017-12-30T06:25:12.164Z</updated>
    
    <content type="html"><![CDATA[<p>河，静静的流淌</p><p>流向远方</p><p>足球，静静的飞去</p><p>飞向远方</p><p>远方是它该去的地方</p><p>不是这里</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;河，静静的流淌&lt;/p&gt;
&lt;p&gt;流向远方&lt;/p&gt;
&lt;p&gt;足球，静静的飞去&lt;/p&gt;
&lt;p&gt;飞向远方&lt;/p&gt;
&lt;p&gt;远方是它该去的地方&lt;/p&gt;
&lt;p&gt;不是这里&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring security ApplicationListener</title>
    <link href="http://www.youletter.cn/2017/12/27/spring-security-ApplicationListener/"/>
    <id>http://www.youletter.cn/2017/12/27/spring-security-ApplicationListener/</id>
    <published>2017-12-27T02:39:39.000Z</published>
    <updated>2017-12-27T02:41:12.487Z</updated>
    
    <content type="html"><![CDATA[<p>在 登录成功后，做一些事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Component</div><div class="line">public class LoginListener implements ApplicationListener&lt;AuthenticationSuccessEvent&gt; &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onApplicationEvent(AuthenticationSuccessEvent event)</div><div class="line">    &#123;</div><div class="line">        UserDetails userDetails = (UserDetails) event.getAuthentication().getPrincipal();</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 登录成功后，做一些事情。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;@Component&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public class LoginListener implements ApplicationListener&amp;lt;AuthenticationSuccessEvent&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    @Override&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public void onApplicationEvent(AuthenticationSuccessEvent event)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        UserDetails userDetails = (UserDetails) event.getAuthentication().getPrincipal();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spring security" scheme="http://www.youletter.cn/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>maven如何打包上传snapshot到nexus (未完)</title>
    <link href="http://www.youletter.cn/2017/12/22/maven%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E4%B8%8A%E4%BC%A0snapshot%E5%88%B0nexus/"/>
    <id>http://www.youletter.cn/2017/12/22/maven如何打包上传snapshot到nexus/</id>
    <published>2017-12-22T08:38:31.000Z</published>
    <updated>2017-12-22T08:39:26.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.baeldung.com/maven-deploy-nexus" target="_blank" rel="external">Maven Deploy to Nexus</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.baeldung.com/maven-deploy-nexus&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dalston.sr4是什么意思</title>
    <link href="http://www.youletter.cn/2017/12/21/dalston-sr4%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/"/>
    <id>http://www.youletter.cn/2017/12/21/dalston-sr4是什么意思/</id>
    <published>2017-12-21T12:39:54.000Z</published>
    <updated>2017-12-21T12:50:21.244Z</updated>
    
    <content type="html"><![CDATA[<p>简单说，Dalston就是Spring-cloud的版本名。</p><p>spring-cloud的版本名 都是都是采用 伦敦地铁站的名字，如Angel，Brixton。</p><p>这些版本的名字，是按照字母顺序排列的，所以看见版本的名字，就能知道它的时间顺序。</p><p>现在spring-cloud有这么多版本。</p><ul><li><p>Angel</p></li><li><p>Brixton</p></li><li><p>Camden</p></li><li><p>Dalston</p></li><li><p>Edgware</p></li><li><p>Finchley</p></li></ul><p>当初次发行 Dalston 这个版本时 ，第一个名字是 Dalston.RELEASE。</p><p>但是</p><p>当一个版本的子项目中的版本积累了许多更新，或者某个子项目有一些严重bug必须升级时，这是会推出一个service releases，简称SRX，X是一个数字。</p><p>比如Dalston的第一版是 Dalston.RELEASE, 后来更新就叫Dalston.SR1,再更新就是<br>Dalston.SR2。 目前到了Dalston.SR4。 这个版本被标记为GA的版本，所以应该采用GA的版本。</p><p><a href="http://projects.spring.io/spring-cloud/" target="_blank" rel="external">http://projects.spring.io/spring-cloud/</a><br>官网有一个 各个 版本 所包含的 子项目的 版本的清单。</p><p>所以 dalston.sr4 意思就是 dalston的第4个稳定版本。</p><p>关于Spring-cloud的更多信息， 可以参看另一篇博客 <a href="http://youletter.cn/2017/11/29/spring-cloud-%E7%AE%80%E4%BB%8B/" target="_blank" rel="external">Spring-cloud(一)概览</a></p><p>而关于 GA, M1, RC这些版本的意思，参看另一篇博客。<br><a href="http://youletter.cn/2017/11/28/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E9%BB%91%E8%AF%9D-%E8%A1%8C%E8%AF%9D/" target="_blank" rel="external">软件版本中的黑话(行话)</a></p><a id="more"></a><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://youletter.cn/2017/11/29/spring-cloud-%E7%AE%80%E4%BB%8B/" target="_blank" rel="external">Spring-cloud(一)概览</a></p><p><a href="http://youletter.cn/2017/11/28/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E9%BB%91%E8%AF%9D-%E8%A1%8C%E8%AF%9D/" target="_blank" rel="external">软件版本中的黑话(行话)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单说，Dalston就是Spring-cloud的版本名。&lt;/p&gt;
&lt;p&gt;spring-cloud的版本名 都是都是采用 伦敦地铁站的名字，如Angel，Brixton。&lt;/p&gt;
&lt;p&gt;这些版本的名字，是按照字母顺序排列的，所以看见版本的名字，就能知道它的时间顺序。&lt;/p&gt;
&lt;p&gt;现在spring-cloud有这么多版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Angel&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Brixton&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Camden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dalston&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Edgware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finchley&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当初次发行 Dalston 这个版本时 ，第一个名字是 Dalston.RELEASE。&lt;/p&gt;
&lt;p&gt;但是&lt;/p&gt;
&lt;p&gt;当一个版本的子项目中的版本积累了许多更新，或者某个子项目有一些严重bug必须升级时，这是会推出一个service releases，简称SRX，X是一个数字。&lt;/p&gt;
&lt;p&gt;比如Dalston的第一版是 Dalston.RELEASE, 后来更新就叫Dalston.SR1,再更新就是&lt;br&gt;Dalston.SR2。 目前到了Dalston.SR4。 这个版本被标记为GA的版本，所以应该采用GA的版本。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://projects.spring.io/spring-cloud/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://projects.spring.io/spring-cloud/&lt;/a&gt;&lt;br&gt;官网有一个 各个 版本 所包含的 子项目的 版本的清单。&lt;/p&gt;
&lt;p&gt;所以 dalston.sr4 意思就是 dalston的第4个稳定版本。&lt;/p&gt;
&lt;p&gt;关于Spring-cloud的更多信息， 可以参看另一篇博客 &lt;a href=&quot;http://youletter.cn/2017/11/29/spring-cloud-%E7%AE%80%E4%BB%8B/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring-cloud(一)概览&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;而关于 GA, M1, RC这些版本的意思，参看另一篇博客。&lt;br&gt;&lt;a href=&quot;http://youletter.cn/2017/11/28/%E8%BD%AF%E4%BB%B6%E7%89%88%E6%9C%AC%E4%B8%AD%E7%9A%84%E9%BB%91%E8%AF%9D-%E8%A1%8C%E8%AF%9D/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;软件版本中的黑话(行话)&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="spring-cloud" scheme="http://www.youletter.cn/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>ID3v2中文文档(版本2.4.0)</title>
    <link href="http://www.youletter.cn/2017/12/15/ID3v2%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3-%E7%89%88%E6%9C%AC2-4-0/"/>
    <id>http://www.youletter.cn/2017/12/15/ID3v2中文文档-版本2-4-0/</id>
    <published>2017-12-15T02:25:28.000Z</published>
    <updated>2017-12-21T15:41:06.482Z</updated>
    
    <content type="html"><![CDATA[<p>2000.11.01</p><p>M. Nilsson</p><h2 id="文档状态"><a href="#文档状态" class="headerlink" title="文档状态"></a>文档状态</h2><p>本文是一个非正式的标准，用来替代ID3v2.3.0 标准[ID3v2]。正式的标准将用另一个版本号，即使与本文完全一样。本文的内容可能会为了 更加清晰的表述而进行修改 ，但一定不会进行功能上的修改或添加。</p><p>本文可以不受限制的发行。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本文描述了ID3v2.4.0的主要框架。这是ID3v2.3.0的修订版。ID3v2提供了一个灵活的方式来存储音频的元信息，在音频文件内。存储的信息可能是技术参数，如均衡器设置，也可能是标题，演唱者，版权信息等。</p><p>ID3v2.4.0 尽可能地和ID3v2.3.0接近，这样的目的是 你的那些已经实现了ID3v2.3.0的程序， 在向ID3v2.4.0修改的时候，也尽可能的容易一些。</p><h2 id="1-目录"><a href="#1-目录" class="headerlink" title="1 目录"></a>1 目录</h2><ul><li>文档状态</li><li>摘要</li><li><ol><li>目录</li></ol></li><li><ol><li>文档约定</li></ol></li><li><p>3 . ID3v2 综述</p><ul><li>3.1 ID3v2头部</li><li>3.2 ID3v2 扩展头部</li><li>3.3 填充部分</li><li>3.4 ID3v2 footer</li></ul></li><li><p>4 . ID3v2 frames 概述</p><ul><li>4.1 Frame 头部</li><li>4.1.1 Frame 状态标志</li><li>4.1.2 Frame 格式标志</li></ul></li><li>5 Tag location</li><li>6 非同步编码<ul><li>6.1 The unsynchronisation scheme</li><li>6.2 Synchsafe integers</li></ul></li><li>7 版权</li><li>8 引用</li><li>9 作者地址</li></ul><h1 id="2-约定"><a href="#2-约定" class="headerlink" title="2 约定"></a>2 约定</h1><p>在本文例子中，在双引号(“”)内的文本表示一个文本字符串，与它在tag中出现的一样。 以$开头的数字是十六进制的，以%开头的是二进制。$xx用来表示一个数值未定的字节(byte)。%x用来表示一位数值未知的比特(bit)。一个字节的最高有效位(MSB)是第7位，最低有效位(LSB)是第0位。<br>      标签(tag)表示整个ID3标签信息。帧(frame)表示标签(tag)内的一段信息。标签(tag)是由标准头(header)，帧(frame)和可选的填充数据(padding)组成的。域(field)指的是一段信息内的一小段数据，一个数值，或者一个字符串等。数字字符串表示一串只由“0123456789”组成的字符串。</p><h1 id="3-ID3v2概述"><a href="#3-ID3v2概述" class="headerlink" title="3 ID3v2概述"></a>3 ID3v2概述</h1><p>ID3v2是一个通用的标签格式，用于音频上，使得在 音频文件内 存储音频的元信息成为可能。<br>ID3标签主要目标是 用MPEG-1/2 layer I, MPEG-1/2 layer II, MPEG-1/2 layer III编码的文件，但也可以用于其他类型编码的音频文件或者 作为表示音频元信息的独立的格式。</p><p>ID3v2的设计方向是 灵活性和扩展性。可以应付未来出现的新的元信息。为了实现这样的特性，ID3v2 就像一个容器，其内包含被称作 “帧” 的一些信息块，而且这些帧的格式 不需要被 处理它的软件知道。 因为 在每个帧的开头部分，是一个独立的预定义的 标识符，一个大小标识符，这些信息 可以使得 处理软件能够 跳过 不理解的帧和flag字段。 flags字段描述了编码的细节信息，以及是否该帧应该在 tag中保留，是否该帧 可能软件无法识别， 是否文件已经被修改了。</p><p>ID3v2的位顺序是最高有效位(MSB)。例如，如果要写入$12345678, 则要写$12 34 45 78<br>这种字节序也叫 大端字节序，或 网络字节序。</p><h2 id="标签结构"><a href="#标签结构" class="headerlink" title="标签结构"></a>标签结构</h2><pre><code>+-----------------------------+|      Header (10 bytes)      |+-----------------------------+|       Extended Header       || (variable length, OPTIONAL) |+-----------------------------+|   Frames (variable length)  |+-----------------------------+|           Padding           || (variable length, OPTIONAL) |+-----------------------------+| Footer (10 bytes, OPTIONAL) |+-----------------------------+</code></pre><p>通常 padding 和 footer 是互斥的。</p><h2 id="3-1-ID3v2-头部"><a href="#3-1-ID3v2-头部" class="headerlink" title="3.1. ID3v2 头部"></a>3.1. ID3v2 头部</h2><p>整个ID3V2 标签 一般在 音频文件的最开头。</p><p>为了说明这个ID3v2，我正好用vi 打开了一个 简单的mp3文件 ，来配合文档说明 其在实际中的应用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1 00000000: 4944 3304 0000 0000 0023 5453 5345 0000  ID3......#TSSE..</div><div class="line">2 00000010: 000f 0000 034c 6176 6635 372e 3235 2e31  .....Lavf57.25.1</div><div class="line">3 00000020: 3030 0000 0000 0000 0000 0000 00c3 bfc3  00..............</div><div class="line">4 00000030: bb70 0000 0000 0000 0000 0000 0000 0000  .p..............</div><div class="line">5 00000040: 0000 0000 0000 0000 0000 0000 0000 0000  ................</div></pre></td></tr></table></figure><p>ID3v2标签的第一部分是 音频文件最开头是10字节，即 标签头部。其格式为</p><pre><code>ID3v2/file identifier      &quot;ID3&quot;ID3v2 version              $04 00ID3v2 flags                %abcd0000ID3v2 size             4 * %0xxxxxxx</code></pre><p> 例子中的头部是  4944 3304 0000 0000 0023</p><p> ID3v2的标签头(header)总是以三个字节的”ID3”字符串开头，以此来标识这是ID3v2信息。即 49 44 33。</p><p> 紧接着的两个字节是 版本，即 04 00。 第一个字节是 主版本，第二个字节是修订数字。 因为是 2.4.0，所以第一个字节是 4， 第二个字节是0.<br>版本的意义是 ，所有的修订版都是 向后兼容的。但主版本是 不向后兼容。也就是说 2.4.1 的程序 可以在 2.4.0的协议上正常运行，但是在2.3.0上并不保证 好使。<br>如果支持ID3v2.4.0或者更低版本的程序，遇到了5或者更高版本的 ID3v2tag，应该直接忽略。因为解析不了。主版本号和 副版本号都不能是 <code>$ff</code></p><p>接下来的一个字节是 flags字节， 目前有4个flag在使用。上一版2.3.0 只有3个flag。 相比上一版，多了一个 Footer present的flag。</p><ul><li><p>a - 非同步编码(Unsynchronisation)</p><p>标签头标识(flags)的第7位用来表示当前ID3v2信息是否经过非同步编码。当这位为1时，表示ID3v2信息经过非同步编码。</p></li><li><p>b - 扩展标签头(Extended header)</p><p>标签头标识(flags)的第6位用来表示标签头数据后面是否有扩展标签头数据。扩展标签头请参照第三章第二节。 这一位 为1 表示 有扩展标签头</p></li><li><p>c - 测试指示位(Experimemtalindicator)</p><p>标签头标识(flags)的第5位用来表示当前是否为测试版。如果本tag处于测试阶段，请将此位置1。</p></li></ul><ul><li><p>d - Footer 标志 （新增）</p><p>标签头标识(flags)的第4位用来表示tag中是否有 footer在标签的最后。。如果本tag含有footer，请将此位置1。</p></li></ul><p>例子中 flags 为 00 ，表示 不是非同步编码， 没有扩展头，不是测试tag，没有footer。</p><p>其他位必须是0，如果那些未定义的flags上也有值，这个tag可能 无法解析。</p><p>头部的最后4个字节中存储 整个tag的长度。每个字节 有7位可以使用。一共有28位的有效位数（意味着tag最多可以有256M这么大）<br>  这个tag size 是 除了tag header之外的 其余部分的长度。<br>  也就是说 ，如果有 footer时， tag size 是 （整个tag - 20） 字节。<br>  没有footer时，tag size是 （整个tag - 10） 字节。</p><p>本例子中 tag size 是 0000 0023 ，转换成10进制就是 35。 说明后面还有35个字节属于 ID3v2 tag。</p><p>ID3v2 tag可以用如下的 模式来 检测。</p><p>  <code>$49 44 33 yy yy xx zz zz zz zz</code></p><p>其中 yy 小于 $FF, xx 是 ‘flags’ byte ， zz 小于 $80.</p><p>如在Python中有一个模块 struct ，可以直接 取出头部 各部分的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name = &quot;a.mp3&quot;; #要读取的文件</div><div class="line">fp = open(name,&apos;rb&apos;);</div><div class="line">head = fp.read(10)</div><div class="line">id3,ver,revision,flag,length  = struct.unpack(&quot;!3sBBBI&quot;,head);</div></pre></td></tr></table></figure><h2 id="3-2-扩展的头部-header"><a href="#3-2-扩展的头部-header" class="headerlink" title="3.2. 扩展的头部 header"></a>3.2. 扩展的头部 header</h2><p>   The extended header contains information that can provide further<br>   insight in the structure of the tag, but is not vital to the correct<br>   parsing of the tag information; hence the extended header is<br>   optional.</p><pre><code>Extended header size   4 * %0xxxxxxxNumber of flag bytes       $01Extended Flags             $xx</code></pre><p>   Where the ‘Extended header size’ is the size of the whole extended<br>   header, stored as a 32 bit synchsafe integer. An extended header can<br>   thus never have a size of fewer than six bytes.</p><p>   The extended flags field, with its size described by ‘number of flag<br>   bytes’, is defined as:</p><pre><code>%0bcd0000</code></pre><p>   Each flag that is set in the extended header has data attached, which<br>   comes in the order in which the flags are encountered (i.e. the data<br>   for flag ‘b’ comes before the data for flag ‘c’). Unset flags cannot<br>   have any attached data. All unknown flags MUST be unset and their<br>   corresponding data removed when a tag is modified.</p><p>   Every set flag’s data starts with a length byte, which contains a<br>   value between 0 and 128 ($00 - $7f), followed by data that has the<br>   field length indicated by the length byte. If a flag has no attached<br>   data, the value $00 is used as length byte.</p><p>   b - Tag is an update</p><pre><code>If this flag is set, the present tag is an update of a tag foundearlier in the present file or stream. If frames defined as uniqueare found in the present tag, they are to override anycorresponding ones found in the earlier tag. This flag has nocorresponding data.    Flag data length      $00</code></pre><p>   c - CRC data present</p><pre><code>If this flag is set, a CRC-32 [ISO-3309] data is included in theextended header. The CRC is calculated on all the data between theheader and footer as indicated by the header&apos;s tag length field,minus the extended header. Note that this includes the padding (ifthere is any), but excludes the footer. The CRC-32 is stored as an35 bit synchsafe integer, leaving the upper four bits alwayszeroed.   Flag data length       $05   Total frame CRC    5 * %0xxxxxxx</code></pre><p>   d - Tag restrictions</p><pre><code>For some applications it might be desired to restrict a tag in moreways than imposed by the ID3v2 specification. Note that thepresence of these restrictions does not affect how the tag isdecoded, merely how it was restricted before encoding. If this flagis set the tag is restricted as follows:   Flag data length       $01   Restrictions           %ppqrrsttp - Tag size restrictions  00   No more than 128 frames and 1 MB total tag size.  01   No more than 64 frames and 128 KB total tag size.  10   No more than 32 frames and 40 KB total tag size.  11   No more than 32 frames and 4 KB total tag size.q - Text encoding restrictions  0    No restrictions  1    Strings are only encoded with ISO-8859-1 [ISO-8859-1] or       UTF-8 [UTF-8].r - Text fields size restrictions  00   No restrictions  01   No string is longer than 1024 characters.  10   No string is longer than 128 characters.  11   No string is longer than 30 characters.  Note that nothing is said about how many bytes is used to  represent those characters, since it is encoding dependent. If a  text frame consists of more than one string, the sum of the  strungs is restricted as stated.s - Image encoding restrictions  0   No restrictions  1   Images are encoded only with PNG [PNG] or JPEG [JFIF].t - Image size restrictions  00  No restrictions  01  All images are 256x256 pixels or smaller.  10  All images are 64x64 pixels or smaller.  11  All images are exactly 64x64 pixels, unless required      otherwise.</code></pre><h2 id="3-3-Padding"><a href="#3-3-Padding" class="headerlink" title="3.3.   Padding"></a>3.3.   Padding</h2><p>在最后一个帧后面 增加 填充是可选的， 填充必须全部是 $00.<br>不可以在 头部和 帧之间有填充。填充只能出现在尾部。 同时 有footer时，不能有 填充。<br>填充有时可以用来 标识最后一个帧的结束。</p><h2 id="3-4-ID3v2-footer"><a href="#3-4-ID3v2-footer" class="headerlink" title="3.4.   ID3v2 footer"></a>3.4.   ID3v2 footer</h2><p>为了从文件尾部快速定位ID3V2标签，设计了ID3v2 footer。如果整个ID3V2标签在 整个音频文件的 最后，那么这个ID3v2 footer 就是必须包含的。 ID3v2 footer的内容 和 头部是一样的，只是identifier 不同。 格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ID3v2 identifier           &quot;3DI&quot;</div><div class="line">ID3v2 version              $04 00</div><div class="line">ID3v2 flags                %abcd0000</div><div class="line">ID3v2 size             4 * %0xxxxxxx</div></pre></td></tr></table></figure><h2 id="4-ID3v2-帧-概述"><a href="#4-ID3v2-帧-概述" class="headerlink" title="4.   ID3v2 帧 概述"></a>4.   ID3v2 帧 概述</h2><p>帧是 主要的 信息承载的地方。所有的帧的组成是由一个 帧头部和 一个或多个域组成。这些域中就是真正的携带的信息。帧头部也是10字节，结构如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Frame ID      $xx xx xx xx  (four characters)</div><div class="line">Size      4 * %0xxxxxxx</div><div class="line">Flags         $xx xx</div></pre></td></tr></table></figure><p>帧ID是由大些字符和数字组成。以X， Y， Z 开头的帧表示实验性的帧。你要注意，有可能别人用的帧ID 和你的 帧ID一样。除此以外的帧ID 被保留了，或已经被使用了。</p><p>帧ID后面跟的4个字节，表示这一帧数据的大小。这个大小不包含帧头部，即 等于 (该帧总长度 - 10 字节)， 用一个同步安全的整数存储。</p><p>头部的最后两个字节是 flags开关，在4.1节详细介绍。</p><p>未完待续 - - </p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://id3.org/id3v2.4.0-structure" target="_blank" rel="external">ID3 tag version 2.4.0 - Main Structure</a></p><p><a href="https://baike.baidu.com/item/MSB/7147777?fr=aladdin" target="_blank" rel="external">MSB</a></p><p>id3 解析程序</p><p><a href="https://nedbatchelder.com/code/modules/id3reader.html" target="_blank" rel="external">id3reader</a></p><p><a href="https://www.blog.pythonlibrary.org/2010/04/22/parsing-id3-tags-from-mp3s-using-python/" target="_blank" rel="external">Parsing ID3 Tags from MP3s using Python</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2000.11.01&lt;/p&gt;
&lt;p&gt;M. Nilsson&lt;/p&gt;
&lt;h2 id=&quot;文档状态&quot;&gt;&lt;a href=&quot;#文档状态&quot; class=&quot;headerlink&quot; title=&quot;文档状态&quot;&gt;&lt;/a&gt;文档状态&lt;/h2&gt;&lt;p&gt;本文是一个非正式的标准，用来替代ID3v2.3.0 
      
    
    </summary>
    
    
      <category term="id3v2" scheme="http://www.youletter.cn/tags/id3v2/"/>
    
  </entry>
  
  <entry>
    <title>vim查看二进制文件内容</title>
    <link href="http://www.youletter.cn/2017/12/14/vim%E6%9F%A5%E7%9C%8B%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9/"/>
    <id>http://www.youletter.cn/2017/12/14/vim查看二进制文件内容/</id>
    <published>2017-12-14T10:51:45.000Z</published>
    <updated>2017-12-14T10:55:17.533Z</updated>
    
    <content type="html"><![CDATA[<p>1.用vi 打开文件 </p><p>乱码状态</p><p>2.使用xxd转换为16进制</p><p>:%!xxd</p><p>3.转换16进制回二进制</p><p>:%!xxd -r</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.zhihu.com/question/22281280" target="_blank" rel="external">Mac下有二进制查看/编辑器吗？</a></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.用vi 打开文件 &lt;/p&gt;
&lt;p&gt;乱码状态&lt;/p&gt;
&lt;p&gt;2.使用xxd转换为16进制&lt;/p&gt;
&lt;p&gt;:%!xxd&lt;/p&gt;
&lt;p&gt;3.转换16进制回二进制&lt;/p&gt;
&lt;p&gt;:%!xxd -r&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/22281280&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Mac下有二进制查看/编辑器吗？&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="vim" scheme="http://www.youletter.cn/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Jump Right In</title>
    <link href="http://www.youletter.cn/2017/12/12/Jump-Right-In/"/>
    <id>http://www.youletter.cn/2017/12/12/Jump-Right-In/</id>
    <published>2017-12-12T10:23:50.000Z</published>
    <updated>2017-12-13T09:03:37.118Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1" target="_blank" rel="external">Start Developing iOS Apps (Swift)</a></p><p>Developer Mode ,开发模式 ，不需要每次 访问debug 特性 都 输入密码。</p><p>Choose Editor &gt; Canvas, and make sure Show Bounds Rectangles is selected</p><p>因为有些视图是 透明了， 这个设置有助于 了解view的 确切大小。</p><h2 id="Preview-Your-Interface"><a href="#Preview-Your-Interface" class="headerlink" title="Preview Your Interface"></a>Preview Your Interface</h2><h2 id="Adopt-Auto-Layout"><a href="#Adopt-Auto-Layout" class="headerlink" title="Adopt Auto Layout"></a>Adopt Auto Layout</h2><p>//MARK: 是一种 特殊的 注释，  XCode可以利用。</p><h2 id="view-的生命周期"><a href="#view-的生命周期" class="headerlink" title="view 的生命周期"></a><a href="https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/WorkWithViewControllers.html#//apple_ref/doc/uid/TP40015214-CH6-SW1" target="_blank" rel="external">view 的生命周期</a></h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/d
      
    
    </summary>
    
    
      <category term="ios" scheme="http://www.youletter.cn/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>Swift tour</title>
    <link href="http://www.youletter.cn/2017/12/12/swift-tour/"/>
    <id>http://www.youletter.cn/2017/12/12/swift-tour/</id>
    <published>2017-12-12T01:34:10.000Z</published>
    <updated>2017-12-12T09:25:26.385Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1" target="_blank" rel="external">A Swift Tour</a></p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&quot;Hello, world!&quot;)</div></pre></td></tr></table></figure><h2 id="简单值"><a href="#简单值" class="headerlink" title="简单值"></a>简单值</h2><p>let定义 常量<br>var定义 变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var myVariable = 42</div><div class="line">myVariable = 50</div><div class="line">let myConstant = 42</div></pre></td></tr></table></figure><h3 id="编译器可以推断-变量的类型。"><a href="#编译器可以推断-变量的类型。" class="headerlink" title="编译器可以推断 变量的类型。"></a>编译器可以推断 变量的类型。</h3><p>但如果 第一个出现变量时，没有初始时，可以显示的 给 变量 定义 类型， 在变量后面 写明类型，用一个冒号分开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let implicitInteger = 70</div><div class="line">let implicitDouble = 70.0</div><div class="line">let explicitDouble: Double = 70</div></pre></td></tr></table></figure><h2 id="明确的类型转换"><a href="#明确的类型转换" class="headerlink" title="明确的类型转换"></a>明确的类型转换</h2><p>如果一个类型 需要 转换成另一种类型，必须  显示的说明， 不能 隐式的转化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let label = &quot;The width is &quot;</div><div class="line">let width = 94</div><div class="line">let widthLabel = label + String(width)</div></pre></td></tr></table></figure><h2 id="将值-拼接到-字符串中"><a href="#将值-拼接到-字符串中" class="headerlink" title="将值 拼接到 字符串中"></a>将值 拼接到 字符串中</h2><p>使用 括号将值括起来，在前面加一个反斜杠 <code>\()</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let apples = 3</div><div class="line">let oranges = 5</div><div class="line">let appleSummary = &quot;I have \(apples) apples.&quot;</div><div class="line">let fruitSummary = &quot;I have \(apples + oranges) pieces of fruit.&quot;</div></pre></td></tr></table></figure><h2 id="多行字符串-，用三个双引号。"><a href="#多行字符串-，用三个双引号。" class="headerlink" title="多行字符串 ，用三个双引号。"></a>多行字符串 ，用三个双引号。</h2><p>同Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let quotation = &quot;&quot;&quot;</div><div class="line">I said &quot;I have \(apples) apples.&quot;</div><div class="line">And then I said &quot;I have \(apples + oranges) pieces of fruit.&quot;</div><div class="line">&quot;&quot;&quot;</div></pre></td></tr></table></figure><h2 id="数组-，字典"><a href="#数组-，字典" class="headerlink" title="数组 ，字典"></a>数组 ，字典</h2><p>使用方括号<code>[]</code>来 创建数组和字典 ，用index或者 key来访问。<br>最后一个元素后面，允许跟一个 逗号。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var shoppingList = [&quot;catfish&quot;, &quot;water&quot;, &quot;tulips&quot;, &quot;blue paint&quot;,]</div><div class="line">shoppingList[1] = &quot;bottle of water&quot;</div><div class="line"></div><div class="line">var occupations = [</div><div class="line">    &quot;Malcolm&quot;: &quot;Captain&quot;,</div><div class="line">    &quot;Kaylee&quot;: &quot;Mechanic&quot;,</div><div class="line">]</div><div class="line">occupations[&quot;Jayne&quot;] = &quot;Public Relations&quot;</div></pre></td></tr></table></figure><h2 id="创建一个空的数组-，或者-字典"><a href="#创建一个空的数组-，或者-字典" class="headerlink" title="创建一个空的数组 ，或者 字典"></a>创建一个空的数组 ，或者 字典</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">var emptyArray = [String]()</div><div class="line">var emptyDictionary = [String: Float]()</div><div class="line"></div><div class="line">emptyArray.append(&quot;123&quot;)</div><div class="line"></div><div class="line">print(emptyArray)</div><div class="line"></div><div class="line">emptyDictionary[&quot;123&quot;] = 1.2</div><div class="line"></div><div class="line">print(emptyDictionary)</div></pre></td></tr></table></figure><p>如果 希望 编译器 通过 值来 自己 判断类型，也可以用下面的 方式 初始化 空的 数组或者 字典。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shoppingList = []</div><div class="line">occupations = [:]</div></pre></td></tr></table></figure><a id="more"></a><h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><p>使用if 和 switch 进行 条件选择<br>使用 for-in, while, 或 repeat-while 进行循环。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let individualScores = [75, 43, 103, 87, 12]</div><div class="line">var teamScore = 0</div><div class="line">for score in individualScores &#123;</div><div class="line">    if score &gt; 50 &#123;</div><div class="line">        teamScore += 3</div><div class="line">    &#125; else &#123;</div><div class="line">        teamScore += 1</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">print(teamScore)</div></pre></td></tr></table></figure><p>条件周围的 圆括号是 可选的， 循环体的 大括号是必选的。</p><p>if 条件必须是 boolean表达式。</p><p>if score { … } 这种写法是错误的。</p><h2 id=""><a href="#" class="headerlink" title="?"></a>?</h2><p>如果一个变量 可能是 nil ，那么在声明这个变量时，需要在 类型后面 写一个 ？。<br>言外之意是，如果普通定义的变量 不能是 nil。 否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var optionalString: String? = &quot;Hello&quot;</div><div class="line">print(optionalString == nil)</div><div class="line"> </div><div class="line">var optionalName: String? = &quot;John Appleseed&quot;</div><div class="line">var greeting = &quot;Hello!&quot;</div><div class="line">if let name = optionalName &#123;</div><div class="line">    greeting = &quot;Hello, \(name)&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="-1"><a href="#-1" class="headerlink" title="??"></a>??</h2><p>两个冒号，表示 默认值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let nickName: String? = nil</div><div class="line">let fullName: String = &quot;John Appleseed&quot;</div><div class="line">let informalGreeting = &quot;Hi \(nickName ?? fullName)&quot;</div></pre></td></tr></table></figure><p>if 和 let连用。</p><h2 id="强大的switch"><a href="#强大的switch" class="headerlink" title="强大的switch"></a>强大的switch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let vegetable = &quot;red pepper&quot;</div><div class="line">switch vegetable &#123;</div><div class="line">case &quot;celery&quot;:</div><div class="line">    print(&quot;Add some raisins and make ants on a log.&quot;)</div><div class="line">case &quot;cucumber&quot;, &quot;watercress&quot;:</div><div class="line">    print(&quot;That would make a good tea sandwich.&quot;)</div><div class="line">case let x where x.hasSuffix(&quot;pepper&quot;):</div><div class="line">    print(&quot;Is it a spicy \(x)?&quot;)</div><div class="line">default:</div><div class="line">    print(&quot;Everything tastes good in soup.&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>不需要break语句， 执行完case后，会自动退出。</p><h2 id="循环遍历-字典-和-数组"><a href="#循环遍历-字典-和-数组" class="headerlink" title="循环遍历 字典 和 数组"></a>循环遍历 字典 和 数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">let interestingNumbers = [</div><div class="line">    &quot;Prime&quot;: [2, 3, 5, 7, 11, 13],</div><div class="line">    &quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8],</div><div class="line">    &quot;Square&quot;: [1, 4, 9, 16, 25],</div><div class="line">]</div><div class="line">var largest = 0</div><div class="line">for (kind, numbers) in interestingNumbers &#123;</div><div class="line">    print(kind,numbers)</div><div class="line">    for number in numbers &#123;</div><div class="line">        print(number)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="while-和-repeat-while"><a href="#while-和-repeat-while" class="headerlink" title="while 和 repeat,while"></a>while 和 repeat,while</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var n = 2</div><div class="line">while n &lt; 100 &#123;</div><div class="line">    n *= 2</div><div class="line">&#125;</div><div class="line">print(n)</div><div class="line"> </div><div class="line">var m = 2</div><div class="line">repeat &#123;</div><div class="line">    m *= 2</div><div class="line">&#125; while m &lt; 100</div><div class="line">print(m)</div></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range()"></a>range()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var total = 0</div><div class="line">for i in 0...4 &#123;</div><div class="line">    print(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td></tr></table></figure><p>注意 <code>...</code> 变成 <code>..&lt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var total = 0</div><div class="line">for i in 0..&lt;4 &#123;</div><div class="line">    print(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(person: String, day: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello \(person), today is \(day)."</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> s = greet(person: <span class="string">"Bob"</span>, day: <span class="string">"Tuesday"</span>)</div><div class="line"><span class="built_in">print</span>(s)</div></pre></td></tr></table></figure><p>使用func声明函数，  -&gt; 后面是返回的类型。</p><p>调用函数时， 需要使用参数标签，  如果不想使用参数 ，可以在参数前 增加 _<br>或者 给参数起一个别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func greet(_ person: String, on day: String) -&gt; String &#123;</div><div class="line">    return &quot;Hello \(person), today is \(day).&quot;</div><div class="line">&#125;</div><div class="line">var s = greet(&quot;Bob&quot;, on: &quot;Tuesday&quot;)</div><div class="line">print(s)</div></pre></td></tr></table></figure><p>这个例子中， person这个参数 省略了， 用on来 作为today的标签。</p><p>下面这个例子 ，一个函数，返回了多个值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">func calculateStatistics(scores: [Int]) -&gt; (min: Int, max: Int, sum: Int) &#123;</div><div class="line">    var min = scores[0]</div><div class="line">    var max = scores[0]</div><div class="line">    var sum = 0</div><div class="line">    </div><div class="line">    for score in scores &#123;</div><div class="line">        if score &gt; max &#123;</div><div class="line">            max = score</div><div class="line">        &#125; else if score &lt; min &#123;</div><div class="line">            min = score</div><div class="line">        &#125;</div><div class="line">        sum += score</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return (min, max, sum)</div><div class="line">&#125;</div><div class="line">let statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])</div><div class="line">print(statistics.sum)</div><div class="line">print(statistics.2)</div><div class="line"></div><div class="line">print(statistics)</div></pre></td></tr></table></figure><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>函数中可以  再定义函数 ，内存函数可以 使用外层函数的 变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func returnFifteen() -&gt; Int &#123;</div><div class="line">    var y = 10</div><div class="line">    func add() &#123;</div><div class="line">        y += 5</div><div class="line">    &#125;</div><div class="line">    add()</div><div class="line">    return y</div><div class="line">&#125;</div><div class="line">returnFifteen()</div></pre></td></tr></table></figure><h2 id="返回一个函数"><a href="#返回一个函数" class="headerlink" title="返回一个函数"></a>返回一个函数</h2><p>函数是头等类型， 所以可以返回一个 函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func makeIncrementer() -&gt; ((Int) -&gt; Int) &#123;</div><div class="line">    func addOne(number: Int) -&gt; Int &#123;</div><div class="line">        return 1 + number</div><div class="line">    &#125;</div><div class="line">    return addOne</div><div class="line">&#125;</div><div class="line">var increment = makeIncrementer()</div><div class="line">increment(7)</div></pre></td></tr></table></figure><h2 id="函数可以作为-参数-传入"><a href="#函数可以作为-参数-传入" class="headerlink" title="函数可以作为 参数 传入"></a>函数可以作为 参数 传入</h2><p>这一点和  C语言很像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func hasAnyMatches(list: [Int], condition: (Int) -&gt; Bool) -&gt; Bool &#123;</div><div class="line">    for item in list &#123;</div><div class="line">        if condition(item) &#123;</div><div class="line">            return true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false</div><div class="line">&#125;</div><div class="line">func lessThanTen(number: Int) -&gt; Bool &#123;</div><div class="line">    return number &lt; 10</div><div class="line">&#125;</div><div class="line">var numbers = [20, 19, 7, 12]</div><div class="line">hasAnyMatches(list: numbers, condition: lessThanTen)</div></pre></td></tr></table></figure><h2 id="closure"><a href="#closure" class="headerlink" title="closure"></a>closure</h2><p>函数时 closure 的一种 特例。</p><p>closure 就是 可以在 别处 调用的 代码块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">numbers.map(&#123; (number: Int) -&gt; Int in</div><div class="line">    let result = 3 * number</div><div class="line">    return result</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>closure 用 in 来 分开 参数 ，返回类型 和 函数体</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>声明 属性</p><p>声明 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Shape &#123;</div><div class="line">    var numberOfSides = 0</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>实例化 对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var shape = Shape()</div></pre></td></tr></table></figure><p>访问实例的属性 和 方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shape.numberOfSides = 7</div><div class="line">var shapeDescription = shape.simpleDescription()</div></pre></td></tr></table></figure><p>类的构造函数 init</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class NamedShape &#123;</div><div class="line">    var numberOfSides: Int = 0</div><div class="line">    var name: String</div><div class="line">    </div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所有的属性 都需要 赋值。</p><p><code>deinit</code> 来定义 析构函数</p><p>子类 ，用冒号 ，后面跟上 superclass</p><p>子类中 用 override 可以重写 相同的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class Square: NamedShape &#123;</div><div class="line">    var sideLength: Double</div><div class="line">    </div><div class="line">    init(sideLength: Double, name: String) &#123;</div><div class="line">        self.sideLength = sideLength</div><div class="line">        super.init(name: name)</div><div class="line">        numberOfSides = 4</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func area() -&gt; Double &#123;</div><div class="line">        return sideLength * sideLength</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    override func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A square with sides of length \(sideLength).&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let test = Square(sideLength: 5.2, name: &quot;my test square&quot;)</div><div class="line">test.area()</div><div class="line">test.simpleDescription()</div></pre></td></tr></table></figure><h2 id="类中的setter-getter"><a href="#类中的setter-getter" class="headerlink" title="类中的setter / getter"></a>类中的setter / getter</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">class NamedShape &#123;</div><div class="line">    var numberOfSides: Int = 0</div><div class="line">    var name: String</div><div class="line">    </div><div class="line">    init(name: String) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;A shape with \(numberOfSides) sides.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class EquilateralTriangle: NamedShape &#123;</div><div class="line">    var sideLength: Double = 0.0</div><div class="line">    </div><div class="line">    init(sideLength: Double, name: String) &#123;</div><div class="line">        self.sideLength = sideLength</div><div class="line">        super.init(name: name)</div><div class="line">        numberOfSides = 3</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    var perimeter: Double &#123;</div><div class="line">        get &#123;</div><div class="line">            return 3.0 * sideLength</div><div class="line">        &#125;</div><div class="line">        set(newValue)&#123;</div><div class="line">            sideLength = newValue / 3.0</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    override func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;An equilateral triangle with sides of length \(sideLength).&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var triangle = EquilateralTriangle(sideLength: 3.1, name: &quot;a triangle&quot;)</div><div class="line">print(triangle.perimeter)</div><div class="line">triangle.perimeter = 9.9</div><div class="line">print(triangle.sideLength)</div></pre></td></tr></table></figure><p>枚举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">enum Rank: Int &#123;</div><div class="line">    case ace = 1</div><div class="line">    case two, three, four, five, six, seven, eight, nine, ten</div><div class="line">    case jack, queen, king</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .ace:</div><div class="line">            return &quot;ace&quot;</div><div class="line">        case .jack:</div><div class="line">            return &quot;jack&quot;</div><div class="line">        case .queen:</div><div class="line">            return &quot;queen&quot;</div><div class="line">        case .king:</div><div class="line">            return &quot;king&quot;</div><div class="line">        default:</div><div class="line">            return String(self.rawValue)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let ace = Rank.ace</div><div class="line">let aceRawValue = ace.rawValue</div></pre></td></tr></table></figure><p>用rawValue 实例化 Enum</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if let convertedRank = Rank(rawValue: 3) &#123;</div><div class="line">    let threeDescription = convertedRank.simpleDescription()</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>枚举 example</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">enum Suit &#123;</div><div class="line">    case spades, hearts, diamonds, clubs</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .spades:</div><div class="line">            return &quot;spades&quot;</div><div class="line">        case .hearts:</div><div class="line">            return &quot;hearts&quot;</div><div class="line">        case .diamonds:</div><div class="line">            return &quot;diamonds&quot;</div><div class="line">        case .clubs:</div><div class="line">            return &quot;clubs&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    func color() -&gt; String&#123;</div><div class="line">        switch self &#123;</div><div class="line">        case .spades, .diamonds:</div><div class="line">            return &quot;black&quot;</div><div class="line">        case .hearts, .clubs:</div><div class="line">            return &quot;red&quot;</div><div class="line">        default:</div><div class="line">            return &quot;error&quot;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let hearts = Suit.hearts</div><div class="line">let heartsDescription = hearts.simpleDescription()</div><div class="line"></div><div class="line">print(hearts.color())</div></pre></td></tr></table></figure><h4 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h4><p>结构和 class 类似 ，结构在 传递的时候 用的是复制， class 传的是 引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Card &#123;</div><div class="line">    var rank: Rank</div><div class="line">    var suit: Suit</div><div class="line">    func simpleDescription() -&gt; String &#123;</div><div class="line">        return &quot;The \(rank.simpleDescription()) of \(suit.simpleDescription())&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">let threeOfSpades = Card(rank: .three, suit: .spades)</div><div class="line">let threeOfSpadesDescription = threeOfSpades.simpleDescription()</div></pre></td></tr></table></figure><h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><p>类似 java中的接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">protocol ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String &#123; get &#125;</div><div class="line">    mutating func adjust()</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">class SimpleClass: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String = &quot;A very simple class.&quot;</div><div class="line">    var anotherProperty: Int = 69105</div><div class="line">    func adjust() &#123;</div><div class="line">        simpleDescription += &quot;  Now 100% adjusted.&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var a = SimpleClass()</div><div class="line">a.adjust()</div><div class="line">let aDescription = a.simpleDescription</div><div class="line"> </div><div class="line">struct SimpleStructure: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String = &quot;A simple structure&quot;</div><div class="line">    mutating func adjust() &#123;</div><div class="line">        simpleDescription += &quot; (adjusted)&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var b = SimpleStructure()</div><div class="line">b.adjust()</div><div class="line">let bDescription = b.simpleDescription</div></pre></td></tr></table></figure><h2 id="extension"><a href="#extension" class="headerlink" title="extension"></a>extension</h2><p>扩展</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">extension Int: ExampleProtocol &#123;</div><div class="line">    var simpleDescription: String &#123;</div><div class="line">        return &quot;The number \(self)&quot;</div><div class="line">    &#125;</div><div class="line">    mutating func adjust() &#123;</div><div class="line">        self += 42</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">print(7.simpleDescription)</div></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>用enum 实现 Error protocol<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">enum PrinterError: Error &#123;</div><div class="line">    case outOfPaper</div><div class="line">    case noToner</div><div class="line">    case onFire</div><div class="line">&#125;</div><div class="line"></div><div class="line">func send(job: Int, toPrinter printerName: String) throws -&gt; String &#123;</div><div class="line">    if printerName == &quot;Never Has Toner&quot; &#123;</div><div class="line">        throw PrinterError.noToner</div><div class="line">    &#125;</div><div class="line">    return &quot;Job sent&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>处理异常 do catch</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">do &#123;</div><div class="line">    let printerResponse = try send(job: 1040, toPrinter: &quot;Bi Sheng&quot;)</div><div class="line">    print(printerResponse)</div><div class="line">&#125; catch &#123;</div><div class="line">    print(error)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>defer 相当于 finally</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var fridgeIsOpen = false</div><div class="line">let fridgeContent = [&quot;milk&quot;, &quot;eggs&quot;, &quot;leftovers&quot;]</div><div class="line"> </div><div class="line">func fridgeContains(_ food: String) -&gt; Bool &#123;</div><div class="line">    fridgeIsOpen = true</div><div class="line">    defer &#123;</div><div class="line">        fridgeIsOpen = false</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    let result = fridgeContent.contains(food)</div><div class="line">    return result</div><div class="line">&#125;</div><div class="line">fridgeContains(&quot;banana&quot;)</div><div class="line">print(fridgeIsOpen)</div></pre></td></tr></table></figure><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>泛型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func makeArray&lt;Item&gt;(repeating item: Item, numberOfTimes: Int) -&gt; [Item] &#123;</div><div class="line">    var result = [Item]()</div><div class="line">    for _ in 0..&lt;numberOfTimes &#123;</div><div class="line">        result.append(item)</div><div class="line">    &#125;</div><div class="line">    return result</div><div class="line">&#125;</div><div class="line">makeArray(repeating: &quot;knock&quot;, numberOfTimes: 4)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-ID1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Swift Tour&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; class=&quot;headerlink&quot; title=&quot;hello world&quot;&gt;&lt;/a&gt;hello world&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;print(&amp;quot;Hello, world!&amp;quot;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;简单值&quot;&gt;&lt;a href=&quot;#简单值&quot; class=&quot;headerlink&quot; title=&quot;简单值&quot;&gt;&lt;/a&gt;简单值&lt;/h2&gt;&lt;p&gt;let定义 常量&lt;br&gt;var定义 变量&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var myVariable = 42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;myVariable = 50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let myConstant = 42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译器可以推断-变量的类型。&quot;&gt;&lt;a href=&quot;#编译器可以推断-变量的类型。&quot; class=&quot;headerlink&quot; title=&quot;编译器可以推断 变量的类型。&quot;&gt;&lt;/a&gt;编译器可以推断 变量的类型。&lt;/h3&gt;&lt;p&gt;但如果 第一个出现变量时，没有初始时，可以显示的 给 变量 定义 类型， 在变量后面 写明类型，用一个冒号分开。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let implicitInteger = 70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let implicitDouble = 70.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let explicitDouble: Double = 70&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;明确的类型转换&quot;&gt;&lt;a href=&quot;#明确的类型转换&quot; class=&quot;headerlink&quot; title=&quot;明确的类型转换&quot;&gt;&lt;/a&gt;明确的类型转换&lt;/h2&gt;&lt;p&gt;如果一个类型 需要 转换成另一种类型，必须  显示的说明， 不能 隐式的转化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let label = &amp;quot;The width is &amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let width = 94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let widthLabel = label + String(width)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;将值-拼接到-字符串中&quot;&gt;&lt;a href=&quot;#将值-拼接到-字符串中&quot; class=&quot;headerlink&quot; title=&quot;将值 拼接到 字符串中&quot;&gt;&lt;/a&gt;将值 拼接到 字符串中&lt;/h2&gt;&lt;p&gt;使用 括号将值括起来，在前面加一个反斜杠 &lt;code&gt;\()&lt;/code&gt;  &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let apples = 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let oranges = 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let appleSummary = &amp;quot;I have \(apples) apples.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let fruitSummary = &amp;quot;I have \(apples + oranges) pieces of fruit.&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;多行字符串-，用三个双引号。&quot;&gt;&lt;a href=&quot;#多行字符串-，用三个双引号。&quot; class=&quot;headerlink&quot; title=&quot;多行字符串 ，用三个双引号。&quot;&gt;&lt;/a&gt;多行字符串 ，用三个双引号。&lt;/h2&gt;&lt;p&gt;同Python&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let quotation = &amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I said &amp;quot;I have \(apples) apples.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;And then I said &amp;quot;I have \(apples + oranges) pieces of fruit.&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;数组-，字典&quot;&gt;&lt;a href=&quot;#数组-，字典&quot; class=&quot;headerlink&quot; title=&quot;数组 ，字典&quot;&gt;&lt;/a&gt;数组 ，字典&lt;/h2&gt;&lt;p&gt;使用方括号&lt;code&gt;[]&lt;/code&gt;来 创建数组和字典 ，用index或者 key来访问。&lt;br&gt;最后一个元素后面，允许跟一个 逗号。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var shoppingList = [&amp;quot;catfish&amp;quot;, &amp;quot;water&amp;quot;, &amp;quot;tulips&amp;quot;, &amp;quot;blue paint&amp;quot;,]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;shoppingList[1] = &amp;quot;bottle of water&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var occupations = [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;Malcolm&amp;quot;: &amp;quot;Captain&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;Kaylee&amp;quot;: &amp;quot;Mechanic&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;occupations[&amp;quot;Jayne&amp;quot;] = &amp;quot;Public Relations&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;创建一个空的数组-，或者-字典&quot;&gt;&lt;a href=&quot;#创建一个空的数组-，或者-字典&quot; class=&quot;headerlink&quot; title=&quot;创建一个空的数组 ，或者 字典&quot;&gt;&lt;/a&gt;创建一个空的数组 ，或者 字典&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var emptyArray = [String]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var emptyDictionary = [String: Float]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emptyArray.append(&amp;quot;123&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(emptyArray)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;emptyDictionary[&amp;quot;123&amp;quot;] = 1.2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;print(emptyDictionary)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 希望 编译器 通过 值来 自己 判断类型，也可以用下面的 方式 初始化 空的 数组或者 字典。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;shoppingList = []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;occupations = [:]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="swift" scheme="http://www.youletter.cn/tags/swift/"/>
    
  </entry>
  
</feed>
